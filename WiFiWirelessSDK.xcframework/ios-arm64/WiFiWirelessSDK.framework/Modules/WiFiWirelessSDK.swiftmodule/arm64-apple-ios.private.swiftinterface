// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name WiFiWirelessSDK
import AVFoundation
import CallKit
import CommonCrypto
import CoreTelephony
import Foundation
import Swift
import SwiftUI
import UIKit
import UserNotifications
@_exported import WiFiWirelessSDK
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os
public protocol WifiWirelessCallDelegate : AnyObject {
  func isCallRunning(status: Swift.Bool)
  func streamRunning(call: WiFiWirelessSDK.Call)
  func callPaused(call: WiFiWirelessSDK.Call)
  func incomingCallReceived(call: WiFiWirelessSDK.Call)
  func outgoingInit(call: WiFiWirelessSDK.Call)
  func outgoingProgress(call: WiFiWirelessSDK.Call)
  func outgoingRinging(call: WiFiWirelessSDK.Call)
  func connected(call: WiFiWirelessSDK.Call)
  func callPausing(call: WiFiWirelessSDK.Call)
  func callResuming(call: WiFiWirelessSDK.Call)
  func error(call: WiFiWirelessSDK.Call)
  func callEnd(call: WiFiWirelessSDK.Call)
  func callReleased(call: WiFiWirelessSDK.Call)
}
public class WiFiWirelessManager {
  weak public var delegate: (any WiFiWirelessSDK.WifiWirelessCallDelegate)?
  public init()
  public var mCore: WiFiWirelessSDK.Core! {
    get
  }
  public var mAccount: WiFiWirelessSDK.Account? {
    get
  }
  public var loggedIn: Swift.Bool {
    get
  }
  public var isCallRunning: Swift.Bool {
    get
  }
  public func startService(callkitEnabled: Swift.Bool)
  public func login(withEmail: Swift.String, password: Swift.String)
  public func callTo(numWithCode: Swift.String)
  public func outgoingCall(to address: Swift.String)
  public func acceptCall()
  public func terminateCall()
  public func enableSpeaker(_ state: Swift.Bool)
  public func setHeld(call: Swift.OpaquePointer, hold: Swift.Bool)
  public func allowSpeaker() -> Swift.Bool
  public func setHeldWithSwift(call: WiFiWirelessSDK.Call, hold: Swift.Bool)
  public func muteCall(status: Swift.Bool)
  @objc deinit
}
extension WiFiWirelessSDK.WiFiWirelessManager : WiFiWirelessSDK.WifiWirelessCallDelegate {
  public func isCallRunning(status: Swift.Bool)
  public func streamRunning(call: WiFiWirelessSDK.Call)
  public func callPaused(call: WiFiWirelessSDK.Call)
  public func incomingCallReceived(call: WiFiWirelessSDK.Call)
  public func outgoingInit(call: WiFiWirelessSDK.Call)
  public func outgoingProgress(call: WiFiWirelessSDK.Call)
  public func outgoingRinging(call: WiFiWirelessSDK.Call)
  public func connected(call: WiFiWirelessSDK.Call)
  public func callPausing(call: WiFiWirelessSDK.Call)
  public func callResuming(call: WiFiWirelessSDK.Call)
  public func error(call: WiFiWirelessSDK.Call)
  public func callEnd(call: WiFiWirelessSDK.Call)
  public func callReleased(call: WiFiWirelessSDK.Call)
}
@_inheritsConvenienceInitializers @objc public class CallManager : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
extension WiFiWirelessSDK.CallManager : WiFiWirelessSDK.CoreDelegate {
  public func setCallOnHold(call: WiFiWirelessSDK.Call, hold: Swift.Bool)
  public func onCallStateChanged(core: WiFiWirelessSDK.Core, call: WiFiWirelessSDK.Call, state cstate: WiFiWirelessSDK.Call.State, message: Swift.String)
}
public enum AVPFMode : Swift.Int {
  case Default
  case Disabled
  case Enabled
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum AuthMethod : Swift.Int {
  case HttpDigest
  case Tls
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum CodecPriorityPolicy : Swift.Int {
  case Basic
  case Auto
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum ConsolidatedPresence : Swift.Int {
  case Online
  case Busy
  case DoNotDisturb
  case Offline
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum EcCalibratorStatus : Swift.Int {
  case InProgress
  case Done
  case Failed
  case DoneNoEcho
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum GlobalState : Swift.Int {
  case Off
  case Startup
  case On
  case Shutdown
  case Configuring
  case Ready
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum IceState : Swift.Int {
  case NotActivated
  case Failed
  case InProgress
  case HostConnection
  case ReflexiveConnection
  case RelayConnection
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum LimeState : Swift.Int {
  case Disabled
  case Mandatory
  case Preferred
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum LogCollectionState : Swift.Int {
  case Disabled
  case Enabled
  case EnabledWithoutPreviousLogHandler
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct LogLevel : Swift.OptionSet {
  public let rawValue: Swift.Int
  public init(rawValue: Swift.Int)
  public static let Debug: WiFiWirelessSDK.LogLevel
  public static let Trace: WiFiWirelessSDK.LogLevel
  public static let Message: WiFiWirelessSDK.LogLevel
  public static let Warning: WiFiWirelessSDK.LogLevel
  public static let Error: WiFiWirelessSDK.LogLevel
  public static let Fatal: WiFiWirelessSDK.LogLevel
  public typealias ArrayLiteralElement = WiFiWirelessSDK.LogLevel
  public typealias Element = WiFiWirelessSDK.LogLevel
  public typealias RawValue = Swift.Int
}
public enum MediaDirection : Swift.Int {
  case Invalid
  case Inactive
  case SendOnly
  case RecvOnly
  case SendRecv
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum MediaEncryption : Swift.Int {
  case None
  case SRTP
  case ZRTP
  case DTLS
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum MediaResourceMode : Swift.Int {
  case ExclusiveMediaResources
  case SharedMediaResources
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum PresenceBasicStatus : Swift.Int {
  case Open
  case Closed
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum Privacy : Swift.Int {
  case None
  case User
  case Header
  case Session
  case Id
  case Critical
  case Default
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum PublishState : Swift.Int {
  case None
  case IncomingReceived
  case Ok
  case Error
  case Expiring
  case Cleared
  case Terminating
  case OutgoingProgress
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum Reason : Swift.Int {
  case None
  case NoResponse
  case Forbidden
  case Declined
  case NotFound
  case NotAnswered
  case Busy
  case UnsupportedContent
  case BadEvent
  case IOError
  case DoNotDisturb
  case Unauthorized
  case NotAcceptable
  case NoMatch
  case MovedPermanently
  case Gone
  case TemporarilyUnavailable
  case AddressIncomplete
  case NotImplemented
  case BadGateway
  case SessionIntervalTooSmall
  case ServerTimeout
  case Unknown
  case Transferred
  case ConditionalRequestFailed
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum RegistrationState : Swift.Int {
  case None
  case Progress
  case Ok
  case Cleared
  case Failed
  case Refreshing
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum SessionExpiresRefresher : Swift.Int {
  case Unspecified
  case UAS
  case UAC
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum SignalStrengthUnit : Swift.Int {
  case Rssi
  case Dbm
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum SignalType : Swift.Int {
  case Wifi
  case Mobile
  case Other
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum SrtpSuite : Swift.Int {
  case AESCM128HMACSHA180
  case AESCM128HMACSHA132
  case AES192CMHMACSHA180
  case AES192CMHMACSHA132
  case AES256CMHMACSHA180
  case AES256CMHMACSHA132
  case AEADAES128GCM
  case AEADAES256GCM
  case Invalid
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum StreamType : Swift.Int {
  case Audio
  case Video
  case Text
  case Unknown
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum SubscribePolicy : Swift.Int {
  case SPWait
  case SPDeny
  case SPAccept
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum SubscriptionDir : Swift.Int {
  case Incoming
  case Outgoing
  case InvalidDir
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum SubscriptionState : Swift.Int {
  case None
  case OutgoingProgress
  case IncomingReceived
  case Pending
  case Active
  case Terminated
  case Error
  case Expiring
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum SupportLevel : Swift.Int {
  case NoSupport
  case Optional
  case Mandatory
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum ToneID : Swift.Int {
  case Undefined
  case Busy
  case CallWaiting
  case CallOnHold
  case CallLost
  case CallEnd
  case CallNotAnswered
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum TransportType : Swift.Int {
  case Udp
  case Tcp
  case Tls
  case Dtls
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum UpnpState : Swift.Int {
  case Idle
  case Pending
  case Adding
  case Removing
  case NotAvailable
  case Ok
  case Ko
  case Blacklisted
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum VersionUpdateCheckResult : Swift.Int {
  case UpToDate
  case NewVersionAvailable
  case Error
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum VideoSourceType : Swift.Int {
  case Unknown
  case Call
  case Camera
  case Image
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum XmlRpcArgType : Swift.Int {
  case None
  case Int
  case String
  case StringStruct
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum XmlRpcStatus : Swift.Int {
  case Pending
  case Ok
  case Failed
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum ZrtpKeyAgreement : Swift.Int {
  case Invalid
  case Dh2K
  case Dh3K
  case Ec25
  case Ec38
  case Ec52
  case X255
  case X448
  case K255
  case K448
  case Kyb1
  case Kyb2
  case Kyb3
  case Hqc1
  case Hqc2
  case Hqc3
  case K255Kyb512
  case K255Hqc128
  case K448Kyb1024
  case K448Hqc256
  case K255Kyb512Hqc128
  case K448Kyb1024Hqc256
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum ZrtpPeerStatus : Swift.Int {
  case Unknown
  case Invalid
  case Valid
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class LinphoneObject {
  @objc deinit
}
@available(iOS 13.0, tvOS 13.0, *)
@available(macOS, unavailable)
@available(watchOS, unavailable)
public struct LinphoneVideoViewHolder : SwiftUI.UIViewRepresentable {
  public init(setVideoWindowFn: @escaping (UIKit.UIView) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public func makeUIView(context: WiFiWirelessSDK.LinphoneVideoViewHolder.Context) -> UIKit.UIView
  @_Concurrency.MainActor(unsafe) public func updateUIView(_ uiView: UIKit.UIView, context: WiFiWirelessSDK.LinphoneVideoViewHolder.Context)
  public typealias Body = Swift.Never
  public typealias Coordinator = Swift.Void
  public typealias UIViewType = UIKit.UIView
}
public protocol AccountDelegate : AnyObject {
  func onRegistrationStateChanged(account: WiFiWirelessSDK.Account, state: WiFiWirelessSDK.RegistrationState, message: Swift.String)
}
extension WiFiWirelessSDK.AccountDelegate {
  public func onRegistrationStateChanged(account: WiFiWirelessSDK.Account, state: WiFiWirelessSDK.RegistrationState, message: Swift.String)
}
final public class AccountDelegateStub : WiFiWirelessSDK.AccountDelegate {
  final public func onRegistrationStateChanged(account: WiFiWirelessSDK.Account, state: WiFiWirelessSDK.RegistrationState, message: Swift.String)
  public init(onRegistrationStateChanged: ((WiFiWirelessSDK.Account, WiFiWirelessSDK.RegistrationState, Swift.String) -> Swift.Void)? = nil)
  @objc deinit
}
public protocol AccountCreatorDelegate : AnyObject {
  func onCreateAccount(creator: WiFiWirelessSDK.AccountCreator, status: WiFiWirelessSDK.AccountCreator.Status, response: Swift.String)
  func onIsAccountExist(creator: WiFiWirelessSDK.AccountCreator, status: WiFiWirelessSDK.AccountCreator.Status, response: Swift.String)
  func onActivateAccount(creator: WiFiWirelessSDK.AccountCreator, status: WiFiWirelessSDK.AccountCreator.Status, response: Swift.String)
  func onSendToken(creator: WiFiWirelessSDK.AccountCreator, status: WiFiWirelessSDK.AccountCreator.Status, response: Swift.String)
  func onAccountCreationRequestToken(creator: WiFiWirelessSDK.AccountCreator, status: WiFiWirelessSDK.AccountCreator.Status, response: Swift.String)
  func onAccountCreationTokenUsingRequestToken(creator: WiFiWirelessSDK.AccountCreator, status: WiFiWirelessSDK.AccountCreator.Status, response: Swift.String)
  func onIsAccountActivated(creator: WiFiWirelessSDK.AccountCreator, status: WiFiWirelessSDK.AccountCreator.Status, response: Swift.String)
  func onLinkAccount(creator: WiFiWirelessSDK.AccountCreator, status: WiFiWirelessSDK.AccountCreator.Status, response: Swift.String)
  func onActivateAlias(creator: WiFiWirelessSDK.AccountCreator, status: WiFiWirelessSDK.AccountCreator.Status, response: Swift.String)
  func onIsAliasUsed(creator: WiFiWirelessSDK.AccountCreator, status: WiFiWirelessSDK.AccountCreator.Status, response: Swift.String)
  func onIsAccountLinked(creator: WiFiWirelessSDK.AccountCreator, status: WiFiWirelessSDK.AccountCreator.Status, response: Swift.String)
  func onRecoverAccount(creator: WiFiWirelessSDK.AccountCreator, status: WiFiWirelessSDK.AccountCreator.Status, response: Swift.String)
  func onUpdateAccount(creator: WiFiWirelessSDK.AccountCreator, status: WiFiWirelessSDK.AccountCreator.Status, response: Swift.String)
  func onLoginLinphoneAccount(creator: WiFiWirelessSDK.AccountCreator, status: WiFiWirelessSDK.AccountCreator.Status, response: Swift.String)
}
extension WiFiWirelessSDK.AccountCreatorDelegate {
  public func onCreateAccount(creator: WiFiWirelessSDK.AccountCreator, status: WiFiWirelessSDK.AccountCreator.Status, response: Swift.String)
  public func onIsAccountExist(creator: WiFiWirelessSDK.AccountCreator, status: WiFiWirelessSDK.AccountCreator.Status, response: Swift.String)
  public func onActivateAccount(creator: WiFiWirelessSDK.AccountCreator, status: WiFiWirelessSDK.AccountCreator.Status, response: Swift.String)
  public func onSendToken(creator: WiFiWirelessSDK.AccountCreator, status: WiFiWirelessSDK.AccountCreator.Status, response: Swift.String)
  public func onAccountCreationRequestToken(creator: WiFiWirelessSDK.AccountCreator, status: WiFiWirelessSDK.AccountCreator.Status, response: Swift.String)
  public func onAccountCreationTokenUsingRequestToken(creator: WiFiWirelessSDK.AccountCreator, status: WiFiWirelessSDK.AccountCreator.Status, response: Swift.String)
  public func onIsAccountActivated(creator: WiFiWirelessSDK.AccountCreator, status: WiFiWirelessSDK.AccountCreator.Status, response: Swift.String)
  public func onLinkAccount(creator: WiFiWirelessSDK.AccountCreator, status: WiFiWirelessSDK.AccountCreator.Status, response: Swift.String)
  public func onActivateAlias(creator: WiFiWirelessSDK.AccountCreator, status: WiFiWirelessSDK.AccountCreator.Status, response: Swift.String)
  public func onIsAliasUsed(creator: WiFiWirelessSDK.AccountCreator, status: WiFiWirelessSDK.AccountCreator.Status, response: Swift.String)
  public func onIsAccountLinked(creator: WiFiWirelessSDK.AccountCreator, status: WiFiWirelessSDK.AccountCreator.Status, response: Swift.String)
  public func onRecoverAccount(creator: WiFiWirelessSDK.AccountCreator, status: WiFiWirelessSDK.AccountCreator.Status, response: Swift.String)
  public func onUpdateAccount(creator: WiFiWirelessSDK.AccountCreator, status: WiFiWirelessSDK.AccountCreator.Status, response: Swift.String)
  public func onLoginLinphoneAccount(creator: WiFiWirelessSDK.AccountCreator, status: WiFiWirelessSDK.AccountCreator.Status, response: Swift.String)
}
final public class AccountCreatorDelegateStub : WiFiWirelessSDK.AccountCreatorDelegate {
  final public func onCreateAccount(creator: WiFiWirelessSDK.AccountCreator, status: WiFiWirelessSDK.AccountCreator.Status, response: Swift.String)
  final public func onIsAccountExist(creator: WiFiWirelessSDK.AccountCreator, status: WiFiWirelessSDK.AccountCreator.Status, response: Swift.String)
  final public func onActivateAccount(creator: WiFiWirelessSDK.AccountCreator, status: WiFiWirelessSDK.AccountCreator.Status, response: Swift.String)
  final public func onSendToken(creator: WiFiWirelessSDK.AccountCreator, status: WiFiWirelessSDK.AccountCreator.Status, response: Swift.String)
  final public func onAccountCreationRequestToken(creator: WiFiWirelessSDK.AccountCreator, status: WiFiWirelessSDK.AccountCreator.Status, response: Swift.String)
  final public func onAccountCreationTokenUsingRequestToken(creator: WiFiWirelessSDK.AccountCreator, status: WiFiWirelessSDK.AccountCreator.Status, response: Swift.String)
  final public func onIsAccountActivated(creator: WiFiWirelessSDK.AccountCreator, status: WiFiWirelessSDK.AccountCreator.Status, response: Swift.String)
  final public func onLinkAccount(creator: WiFiWirelessSDK.AccountCreator, status: WiFiWirelessSDK.AccountCreator.Status, response: Swift.String)
  final public func onActivateAlias(creator: WiFiWirelessSDK.AccountCreator, status: WiFiWirelessSDK.AccountCreator.Status, response: Swift.String)
  final public func onIsAliasUsed(creator: WiFiWirelessSDK.AccountCreator, status: WiFiWirelessSDK.AccountCreator.Status, response: Swift.String)
  final public func onIsAccountLinked(creator: WiFiWirelessSDK.AccountCreator, status: WiFiWirelessSDK.AccountCreator.Status, response: Swift.String)
  final public func onRecoverAccount(creator: WiFiWirelessSDK.AccountCreator, status: WiFiWirelessSDK.AccountCreator.Status, response: Swift.String)
  final public func onUpdateAccount(creator: WiFiWirelessSDK.AccountCreator, status: WiFiWirelessSDK.AccountCreator.Status, response: Swift.String)
  final public func onLoginLinphoneAccount(creator: WiFiWirelessSDK.AccountCreator, status: WiFiWirelessSDK.AccountCreator.Status, response: Swift.String)
  public init(onCreateAccount: ((WiFiWirelessSDK.AccountCreator, WiFiWirelessSDK.AccountCreator.Status, Swift.String) -> Swift.Void)? = nil, onIsAccountExist: ((WiFiWirelessSDK.AccountCreator, WiFiWirelessSDK.AccountCreator.Status, Swift.String) -> Swift.Void)? = nil, onActivateAccount: ((WiFiWirelessSDK.AccountCreator, WiFiWirelessSDK.AccountCreator.Status, Swift.String) -> Swift.Void)? = nil, onSendToken: ((WiFiWirelessSDK.AccountCreator, WiFiWirelessSDK.AccountCreator.Status, Swift.String) -> Swift.Void)? = nil, onAccountCreationRequestToken: ((WiFiWirelessSDK.AccountCreator, WiFiWirelessSDK.AccountCreator.Status, Swift.String) -> Swift.Void)? = nil, onAccountCreationTokenUsingRequestToken: ((WiFiWirelessSDK.AccountCreator, WiFiWirelessSDK.AccountCreator.Status, Swift.String) -> Swift.Void)? = nil, onIsAccountActivated: ((WiFiWirelessSDK.AccountCreator, WiFiWirelessSDK.AccountCreator.Status, Swift.String) -> Swift.Void)? = nil, onLinkAccount: ((WiFiWirelessSDK.AccountCreator, WiFiWirelessSDK.AccountCreator.Status, Swift.String) -> Swift.Void)? = nil, onActivateAlias: ((WiFiWirelessSDK.AccountCreator, WiFiWirelessSDK.AccountCreator.Status, Swift.String) -> Swift.Void)? = nil, onIsAliasUsed: ((WiFiWirelessSDK.AccountCreator, WiFiWirelessSDK.AccountCreator.Status, Swift.String) -> Swift.Void)? = nil, onIsAccountLinked: ((WiFiWirelessSDK.AccountCreator, WiFiWirelessSDK.AccountCreator.Status, Swift.String) -> Swift.Void)? = nil, onRecoverAccount: ((WiFiWirelessSDK.AccountCreator, WiFiWirelessSDK.AccountCreator.Status, Swift.String) -> Swift.Void)? = nil, onUpdateAccount: ((WiFiWirelessSDK.AccountCreator, WiFiWirelessSDK.AccountCreator.Status, Swift.String) -> Swift.Void)? = nil, onLoginLinphoneAccount: ((WiFiWirelessSDK.AccountCreator, WiFiWirelessSDK.AccountCreator.Status, Swift.String) -> Swift.Void)? = nil)
  @objc deinit
}
public protocol AlertDelegate : AnyObject {
  func onTerminated(alert: WiFiWirelessSDK.Alert)
}
extension WiFiWirelessSDK.AlertDelegate {
  public func onTerminated(alert: WiFiWirelessSDK.Alert)
}
final public class AlertDelegateStub : WiFiWirelessSDK.AlertDelegate {
  final public func onTerminated(alert: WiFiWirelessSDK.Alert)
  public init(onTerminated: ((WiFiWirelessSDK.Alert) -> Swift.Void)? = nil)
  @objc deinit
}
public protocol CallDelegate : AnyObject {
  func onDtmfReceived(call: WiFiWirelessSDK.Call, dtmf: Swift.Int)
  func onGoclearAckSent(call: WiFiWirelessSDK.Call)
  func onEncryptionChanged(call: WiFiWirelessSDK.Call, on: Swift.Bool, authenticationToken: Swift.String)
  func onSendMasterKeyChanged(call: WiFiWirelessSDK.Call, sendMasterKey: Swift.String)
  func onReceiveMasterKeyChanged(call: WiFiWirelessSDK.Call, receiveMasterKey: Swift.String)
  func onInfoMessageReceived(call: WiFiWirelessSDK.Call, message: WiFiWirelessSDK.InfoMessage)
  func onStateChanged(call: WiFiWirelessSDK.Call, state: WiFiWirelessSDK.Call.State, message: Swift.String)
  func onStatsUpdated(call: WiFiWirelessSDK.Call, stats: WiFiWirelessSDK.CallStats)
  func onTransferStateChanged(call: WiFiWirelessSDK.Call, state: WiFiWirelessSDK.Call.State)
  func onAckProcessing(call: WiFiWirelessSDK.Call, ack: WiFiWirelessSDK.Headers, isReceived: Swift.Bool)
  func onTmmbrReceived(call: WiFiWirelessSDK.Call, streamIndex: Swift.Int, tmmbr: Swift.Int)
  func onSnapshotTaken(call: WiFiWirelessSDK.Call, filePath: Swift.String)
  func onNextVideoFrameDecoded(call: WiFiWirelessSDK.Call)
  func onCameraNotWorking(call: WiFiWirelessSDK.Call, cameraName: Swift.String)
  func onVideoDisplayErrorOccurred(call: WiFiWirelessSDK.Call, errorCode: Swift.Int)
  func onAudioDeviceChanged(call: WiFiWirelessSDK.Call, audioDevice: WiFiWirelessSDK.AudioDevice)
  func onRemoteRecording(call: WiFiWirelessSDK.Call, recording: Swift.Bool)
}
extension WiFiWirelessSDK.CallDelegate {
  public func onDtmfReceived(call: WiFiWirelessSDK.Call, dtmf: Swift.Int)
  public func onGoclearAckSent(call: WiFiWirelessSDK.Call)
  public func onEncryptionChanged(call: WiFiWirelessSDK.Call, on: Swift.Bool, authenticationToken: Swift.String)
  public func onSendMasterKeyChanged(call: WiFiWirelessSDK.Call, sendMasterKey: Swift.String)
  public func onReceiveMasterKeyChanged(call: WiFiWirelessSDK.Call, receiveMasterKey: Swift.String)
  public func onInfoMessageReceived(call: WiFiWirelessSDK.Call, message: WiFiWirelessSDK.InfoMessage)
  public func onStateChanged(call: WiFiWirelessSDK.Call, state: WiFiWirelessSDK.Call.State, message: Swift.String)
  public func onStatsUpdated(call: WiFiWirelessSDK.Call, stats: WiFiWirelessSDK.CallStats)
  public func onTransferStateChanged(call: WiFiWirelessSDK.Call, state: WiFiWirelessSDK.Call.State)
  public func onAckProcessing(call: WiFiWirelessSDK.Call, ack: WiFiWirelessSDK.Headers, isReceived: Swift.Bool)
  public func onTmmbrReceived(call: WiFiWirelessSDK.Call, streamIndex: Swift.Int, tmmbr: Swift.Int)
  public func onSnapshotTaken(call: WiFiWirelessSDK.Call, filePath: Swift.String)
  public func onNextVideoFrameDecoded(call: WiFiWirelessSDK.Call)
  public func onCameraNotWorking(call: WiFiWirelessSDK.Call, cameraName: Swift.String)
  public func onVideoDisplayErrorOccurred(call: WiFiWirelessSDK.Call, errorCode: Swift.Int)
  public func onAudioDeviceChanged(call: WiFiWirelessSDK.Call, audioDevice: WiFiWirelessSDK.AudioDevice)
  public func onRemoteRecording(call: WiFiWirelessSDK.Call, recording: Swift.Bool)
}
final public class CallDelegateStub : WiFiWirelessSDK.CallDelegate {
  final public func onDtmfReceived(call: WiFiWirelessSDK.Call, dtmf: Swift.Int)
  final public func onGoclearAckSent(call: WiFiWirelessSDK.Call)
  final public func onEncryptionChanged(call: WiFiWirelessSDK.Call, on: Swift.Bool, authenticationToken: Swift.String)
  final public func onSendMasterKeyChanged(call: WiFiWirelessSDK.Call, sendMasterKey: Swift.String)
  final public func onReceiveMasterKeyChanged(call: WiFiWirelessSDK.Call, receiveMasterKey: Swift.String)
  final public func onInfoMessageReceived(call: WiFiWirelessSDK.Call, message: WiFiWirelessSDK.InfoMessage)
  final public func onStateChanged(call: WiFiWirelessSDK.Call, state: WiFiWirelessSDK.Call.State, message: Swift.String)
  final public func onStatsUpdated(call: WiFiWirelessSDK.Call, stats: WiFiWirelessSDK.CallStats)
  final public func onTransferStateChanged(call: WiFiWirelessSDK.Call, state: WiFiWirelessSDK.Call.State)
  final public func onAckProcessing(call: WiFiWirelessSDK.Call, ack: WiFiWirelessSDK.Headers, isReceived: Swift.Bool)
  final public func onTmmbrReceived(call: WiFiWirelessSDK.Call, streamIndex: Swift.Int, tmmbr: Swift.Int)
  final public func onSnapshotTaken(call: WiFiWirelessSDK.Call, filePath: Swift.String)
  final public func onNextVideoFrameDecoded(call: WiFiWirelessSDK.Call)
  final public func onCameraNotWorking(call: WiFiWirelessSDK.Call, cameraName: Swift.String)
  final public func onVideoDisplayErrorOccurred(call: WiFiWirelessSDK.Call, errorCode: Swift.Int)
  final public func onAudioDeviceChanged(call: WiFiWirelessSDK.Call, audioDevice: WiFiWirelessSDK.AudioDevice)
  final public func onRemoteRecording(call: WiFiWirelessSDK.Call, recording: Swift.Bool)
  public init(onDtmfReceived: ((WiFiWirelessSDK.Call, Swift.Int) -> Swift.Void)? = nil, onGoclearAckSent: ((WiFiWirelessSDK.Call) -> Swift.Void)? = nil, onEncryptionChanged: ((WiFiWirelessSDK.Call, Swift.Bool, Swift.String) -> Swift.Void)? = nil, onSendMasterKeyChanged: ((WiFiWirelessSDK.Call, Swift.String) -> Swift.Void)? = nil, onReceiveMasterKeyChanged: ((WiFiWirelessSDK.Call, Swift.String) -> Swift.Void)? = nil, onInfoMessageReceived: ((WiFiWirelessSDK.Call, WiFiWirelessSDK.InfoMessage) -> Swift.Void)? = nil, onStateChanged: ((WiFiWirelessSDK.Call, WiFiWirelessSDK.Call.State, Swift.String) -> Swift.Void)? = nil, onStatsUpdated: ((WiFiWirelessSDK.Call, WiFiWirelessSDK.CallStats) -> Swift.Void)? = nil, onTransferStateChanged: ((WiFiWirelessSDK.Call, WiFiWirelessSDK.Call.State) -> Swift.Void)? = nil, onAckProcessing: ((WiFiWirelessSDK.Call, WiFiWirelessSDK.Headers, Swift.Bool) -> Swift.Void)? = nil, onTmmbrReceived: ((WiFiWirelessSDK.Call, Swift.Int, Swift.Int) -> Swift.Void)? = nil, onSnapshotTaken: ((WiFiWirelessSDK.Call, Swift.String) -> Swift.Void)? = nil, onNextVideoFrameDecoded: ((WiFiWirelessSDK.Call) -> Swift.Void)? = nil, onCameraNotWorking: ((WiFiWirelessSDK.Call, Swift.String) -> Swift.Void)? = nil, onVideoDisplayErrorOccurred: ((WiFiWirelessSDK.Call, Swift.Int) -> Swift.Void)? = nil, onAudioDeviceChanged: ((WiFiWirelessSDK.Call, WiFiWirelessSDK.AudioDevice) -> Swift.Void)? = nil, onRemoteRecording: ((WiFiWirelessSDK.Call, Swift.Bool) -> Swift.Void)? = nil)
  @objc deinit
}
public protocol ChatMessageDelegate : AnyObject {
  func onMsgStateChanged(message: WiFiWirelessSDK.ChatMessage, state: WiFiWirelessSDK.ChatMessage.State)
  func onNewMessageReaction(message: WiFiWirelessSDK.ChatMessage, reaction: WiFiWirelessSDK.ChatMessageReaction)
  func onReactionRemoved(message: WiFiWirelessSDK.ChatMessage, address: WiFiWirelessSDK.Address)
  func onFileTransferRecv(message: WiFiWirelessSDK.ChatMessage, content: WiFiWirelessSDK.Content, buffer: WiFiWirelessSDK.Buffer)
  func onFileTransferSend(message: WiFiWirelessSDK.ChatMessage, content: WiFiWirelessSDK.Content, offset: Swift.Int, size: Swift.Int) -> WiFiWirelessSDK.Buffer?
  func onFileTransferSendChunk(message: WiFiWirelessSDK.ChatMessage, content: WiFiWirelessSDK.Content, offset: Swift.Int, size: Swift.Int, buffer: WiFiWirelessSDK.Buffer)
  func onFileTransferProgressIndication(message: WiFiWirelessSDK.ChatMessage, content: WiFiWirelessSDK.Content, offset: Swift.Int, total: Swift.Int)
  func onParticipantImdnStateChanged(message: WiFiWirelessSDK.ChatMessage, state: WiFiWirelessSDK.ParticipantImdnState)
  func onEphemeralMessageTimerStarted(message: WiFiWirelessSDK.ChatMessage)
  func onEphemeralMessageDeleted(message: WiFiWirelessSDK.ChatMessage)
}
extension WiFiWirelessSDK.ChatMessageDelegate {
  public func onMsgStateChanged(message: WiFiWirelessSDK.ChatMessage, state: WiFiWirelessSDK.ChatMessage.State)
  public func onNewMessageReaction(message: WiFiWirelessSDK.ChatMessage, reaction: WiFiWirelessSDK.ChatMessageReaction)
  public func onReactionRemoved(message: WiFiWirelessSDK.ChatMessage, address: WiFiWirelessSDK.Address)
  public func onFileTransferRecv(message: WiFiWirelessSDK.ChatMessage, content: WiFiWirelessSDK.Content, buffer: WiFiWirelessSDK.Buffer)
  public func onFileTransferSend(message: WiFiWirelessSDK.ChatMessage, content: WiFiWirelessSDK.Content, offset: Swift.Int, size: Swift.Int) -> WiFiWirelessSDK.Buffer?
  public func onFileTransferSendChunk(message: WiFiWirelessSDK.ChatMessage, content: WiFiWirelessSDK.Content, offset: Swift.Int, size: Swift.Int, buffer: WiFiWirelessSDK.Buffer)
  public func onFileTransferProgressIndication(message: WiFiWirelessSDK.ChatMessage, content: WiFiWirelessSDK.Content, offset: Swift.Int, total: Swift.Int)
  public func onParticipantImdnStateChanged(message: WiFiWirelessSDK.ChatMessage, state: WiFiWirelessSDK.ParticipantImdnState)
  public func onEphemeralMessageTimerStarted(message: WiFiWirelessSDK.ChatMessage)
  public func onEphemeralMessageDeleted(message: WiFiWirelessSDK.ChatMessage)
}
final public class ChatMessageDelegateStub : WiFiWirelessSDK.ChatMessageDelegate {
  final public func onMsgStateChanged(message: WiFiWirelessSDK.ChatMessage, state: WiFiWirelessSDK.ChatMessage.State)
  final public func onNewMessageReaction(message: WiFiWirelessSDK.ChatMessage, reaction: WiFiWirelessSDK.ChatMessageReaction)
  final public func onReactionRemoved(message: WiFiWirelessSDK.ChatMessage, address: WiFiWirelessSDK.Address)
  final public func onFileTransferRecv(message: WiFiWirelessSDK.ChatMessage, content: WiFiWirelessSDK.Content, buffer: WiFiWirelessSDK.Buffer)
  final public func onFileTransferSend(message: WiFiWirelessSDK.ChatMessage, content: WiFiWirelessSDK.Content, offset: Swift.Int, size: Swift.Int)
  final public func onFileTransferSendChunk(message: WiFiWirelessSDK.ChatMessage, content: WiFiWirelessSDK.Content, offset: Swift.Int, size: Swift.Int, buffer: WiFiWirelessSDK.Buffer)
  final public func onFileTransferProgressIndication(message: WiFiWirelessSDK.ChatMessage, content: WiFiWirelessSDK.Content, offset: Swift.Int, total: Swift.Int)
  final public func onParticipantImdnStateChanged(message: WiFiWirelessSDK.ChatMessage, state: WiFiWirelessSDK.ParticipantImdnState)
  final public func onEphemeralMessageTimerStarted(message: WiFiWirelessSDK.ChatMessage)
  final public func onEphemeralMessageDeleted(message: WiFiWirelessSDK.ChatMessage)
  public init(onMsgStateChanged: ((WiFiWirelessSDK.ChatMessage, WiFiWirelessSDK.ChatMessage.State) -> Swift.Void)? = nil, onNewMessageReaction: ((WiFiWirelessSDK.ChatMessage, WiFiWirelessSDK.ChatMessageReaction) -> Swift.Void)? = nil, onReactionRemoved: ((WiFiWirelessSDK.ChatMessage, WiFiWirelessSDK.Address) -> Swift.Void)? = nil, onFileTransferRecv: ((WiFiWirelessSDK.ChatMessage, WiFiWirelessSDK.Content, WiFiWirelessSDK.Buffer) -> Swift.Void)? = nil, onFileTransferSend: ((WiFiWirelessSDK.ChatMessage, WiFiWirelessSDK.Content, Swift.Int, Swift.Int) -> Swift.Void)? = nil, onFileTransferSendChunk: ((WiFiWirelessSDK.ChatMessage, WiFiWirelessSDK.Content, Swift.Int, Swift.Int, WiFiWirelessSDK.Buffer) -> Swift.Void)? = nil, onFileTransferProgressIndication: ((WiFiWirelessSDK.ChatMessage, WiFiWirelessSDK.Content, Swift.Int, Swift.Int) -> Swift.Void)? = nil, onParticipantImdnStateChanged: ((WiFiWirelessSDK.ChatMessage, WiFiWirelessSDK.ParticipantImdnState) -> Swift.Void)? = nil, onEphemeralMessageTimerStarted: ((WiFiWirelessSDK.ChatMessage) -> Swift.Void)? = nil, onEphemeralMessageDeleted: ((WiFiWirelessSDK.ChatMessage) -> Swift.Void)? = nil)
  @objc deinit
}
public protocol ChatRoomDelegate : AnyObject {
  func onIsComposingReceived(chatRoom: WiFiWirelessSDK.ChatRoom, remoteAddress: WiFiWirelessSDK.Address, isComposing: Swift.Bool)
  func onMessageReceived(chatRoom: WiFiWirelessSDK.ChatRoom, message: WiFiWirelessSDK.ChatMessage)
  func onMessagesReceived(chatRoom: WiFiWirelessSDK.ChatRoom, chatMessages: [WiFiWirelessSDK.ChatMessage])
  func onNewEvent(chatRoom: WiFiWirelessSDK.ChatRoom, eventLog: WiFiWirelessSDK.EventLog)
  func onNewEvents(chatRoom: WiFiWirelessSDK.ChatRoom, eventLogs: [WiFiWirelessSDK.EventLog])
  func onChatMessageReceived(chatRoom: WiFiWirelessSDK.ChatRoom, eventLog: WiFiWirelessSDK.EventLog)
  func onChatMessagesReceived(chatRoom: WiFiWirelessSDK.ChatRoom, eventLogs: [WiFiWirelessSDK.EventLog])
  func onChatMessageSending(chatRoom: WiFiWirelessSDK.ChatRoom, eventLog: WiFiWirelessSDK.EventLog)
  func onChatMessageSent(chatRoom: WiFiWirelessSDK.ChatRoom, eventLog: WiFiWirelessSDK.EventLog)
  func onParticipantAdded(chatRoom: WiFiWirelessSDK.ChatRoom, eventLog: WiFiWirelessSDK.EventLog)
  func onParticipantRemoved(chatRoom: WiFiWirelessSDK.ChatRoom, eventLog: WiFiWirelessSDK.EventLog)
  func onParticipantAdminStatusChanged(chatRoom: WiFiWirelessSDK.ChatRoom, eventLog: WiFiWirelessSDK.EventLog)
  func onStateChanged(chatRoom: WiFiWirelessSDK.ChatRoom, newState: WiFiWirelessSDK.ChatRoom.State)
  func onSecurityEvent(chatRoom: WiFiWirelessSDK.ChatRoom, eventLog: WiFiWirelessSDK.EventLog)
  func onSubjectChanged(chatRoom: WiFiWirelessSDK.ChatRoom, eventLog: WiFiWirelessSDK.EventLog)
  func onUndecryptableMessageReceived(chatRoom: WiFiWirelessSDK.ChatRoom, message: WiFiWirelessSDK.ChatMessage)
  func onParticipantDeviceAdded(chatRoom: WiFiWirelessSDK.ChatRoom, eventLog: WiFiWirelessSDK.EventLog)
  func onParticipantDeviceRemoved(chatRoom: WiFiWirelessSDK.ChatRoom, eventLog: WiFiWirelessSDK.EventLog)
  func onParticipantDeviceStateChanged(chatRoom: WiFiWirelessSDK.ChatRoom, eventLog: WiFiWirelessSDK.EventLog, state: WiFiWirelessSDK.ParticipantDevice.State)
  func onParticipantDeviceMediaAvailabilityChanged(chatRoom: WiFiWirelessSDK.ChatRoom, eventLog: WiFiWirelessSDK.EventLog)
  func onConferenceJoined(chatRoom: WiFiWirelessSDK.ChatRoom, eventLog: WiFiWirelessSDK.EventLog)
  func onConferenceLeft(chatRoom: WiFiWirelessSDK.ChatRoom, eventLog: WiFiWirelessSDK.EventLog)
  func onEphemeralEvent(chatRoom: WiFiWirelessSDK.ChatRoom, eventLog: WiFiWirelessSDK.EventLog)
  func onEphemeralMessageTimerStarted(chatRoom: WiFiWirelessSDK.ChatRoom, eventLog: WiFiWirelessSDK.EventLog)
  func onEphemeralMessageDeleted(chatRoom: WiFiWirelessSDK.ChatRoom, eventLog: WiFiWirelessSDK.EventLog)
  func onConferenceAddressGeneration(chatRoom: WiFiWirelessSDK.ChatRoom)
  func onParticipantRegistrationSubscriptionRequested(chatRoom: WiFiWirelessSDK.ChatRoom, participantAddress: WiFiWirelessSDK.Address)
  func onParticipantRegistrationUnsubscriptionRequested(chatRoom: WiFiWirelessSDK.ChatRoom, participantAddress: WiFiWirelessSDK.Address)
  func onChatMessageShouldBeStored(chatRoom: WiFiWirelessSDK.ChatRoom, message: WiFiWirelessSDK.ChatMessage)
  func onChatMessageParticipantImdnStateChanged(chatRoom: WiFiWirelessSDK.ChatRoom, message: WiFiWirelessSDK.ChatMessage, state: WiFiWirelessSDK.ParticipantImdnState)
  func onChatRoomRead(chatRoom: WiFiWirelessSDK.ChatRoom)
}
extension WiFiWirelessSDK.ChatRoomDelegate {
  public func onIsComposingReceived(chatRoom: WiFiWirelessSDK.ChatRoom, remoteAddress: WiFiWirelessSDK.Address, isComposing: Swift.Bool)
  public func onMessageReceived(chatRoom: WiFiWirelessSDK.ChatRoom, message: WiFiWirelessSDK.ChatMessage)
  public func onMessagesReceived(chatRoom: WiFiWirelessSDK.ChatRoom, chatMessages: [WiFiWirelessSDK.ChatMessage])
  public func onNewEvent(chatRoom: WiFiWirelessSDK.ChatRoom, eventLog: WiFiWirelessSDK.EventLog)
  public func onNewEvents(chatRoom: WiFiWirelessSDK.ChatRoom, eventLogs: [WiFiWirelessSDK.EventLog])
  public func onChatMessageReceived(chatRoom: WiFiWirelessSDK.ChatRoom, eventLog: WiFiWirelessSDK.EventLog)
  public func onChatMessagesReceived(chatRoom: WiFiWirelessSDK.ChatRoom, eventLogs: [WiFiWirelessSDK.EventLog])
  public func onChatMessageSending(chatRoom: WiFiWirelessSDK.ChatRoom, eventLog: WiFiWirelessSDK.EventLog)
  public func onChatMessageSent(chatRoom: WiFiWirelessSDK.ChatRoom, eventLog: WiFiWirelessSDK.EventLog)
  public func onParticipantAdded(chatRoom: WiFiWirelessSDK.ChatRoom, eventLog: WiFiWirelessSDK.EventLog)
  public func onParticipantRemoved(chatRoom: WiFiWirelessSDK.ChatRoom, eventLog: WiFiWirelessSDK.EventLog)
  public func onParticipantAdminStatusChanged(chatRoom: WiFiWirelessSDK.ChatRoom, eventLog: WiFiWirelessSDK.EventLog)
  public func onStateChanged(chatRoom: WiFiWirelessSDK.ChatRoom, newState: WiFiWirelessSDK.ChatRoom.State)
  public func onSecurityEvent(chatRoom: WiFiWirelessSDK.ChatRoom, eventLog: WiFiWirelessSDK.EventLog)
  public func onSubjectChanged(chatRoom: WiFiWirelessSDK.ChatRoom, eventLog: WiFiWirelessSDK.EventLog)
  public func onUndecryptableMessageReceived(chatRoom: WiFiWirelessSDK.ChatRoom, message: WiFiWirelessSDK.ChatMessage)
  public func onParticipantDeviceAdded(chatRoom: WiFiWirelessSDK.ChatRoom, eventLog: WiFiWirelessSDK.EventLog)
  public func onParticipantDeviceRemoved(chatRoom: WiFiWirelessSDK.ChatRoom, eventLog: WiFiWirelessSDK.EventLog)
  public func onParticipantDeviceStateChanged(chatRoom: WiFiWirelessSDK.ChatRoom, eventLog: WiFiWirelessSDK.EventLog, state: WiFiWirelessSDK.ParticipantDevice.State)
  public func onParticipantDeviceMediaAvailabilityChanged(chatRoom: WiFiWirelessSDK.ChatRoom, eventLog: WiFiWirelessSDK.EventLog)
  public func onConferenceJoined(chatRoom: WiFiWirelessSDK.ChatRoom, eventLog: WiFiWirelessSDK.EventLog)
  public func onConferenceLeft(chatRoom: WiFiWirelessSDK.ChatRoom, eventLog: WiFiWirelessSDK.EventLog)
  public func onEphemeralEvent(chatRoom: WiFiWirelessSDK.ChatRoom, eventLog: WiFiWirelessSDK.EventLog)
  public func onEphemeralMessageTimerStarted(chatRoom: WiFiWirelessSDK.ChatRoom, eventLog: WiFiWirelessSDK.EventLog)
  public func onEphemeralMessageDeleted(chatRoom: WiFiWirelessSDK.ChatRoom, eventLog: WiFiWirelessSDK.EventLog)
  public func onConferenceAddressGeneration(chatRoom: WiFiWirelessSDK.ChatRoom)
  public func onParticipantRegistrationSubscriptionRequested(chatRoom: WiFiWirelessSDK.ChatRoom, participantAddress: WiFiWirelessSDK.Address)
  public func onParticipantRegistrationUnsubscriptionRequested(chatRoom: WiFiWirelessSDK.ChatRoom, participantAddress: WiFiWirelessSDK.Address)
  public func onChatMessageShouldBeStored(chatRoom: WiFiWirelessSDK.ChatRoom, message: WiFiWirelessSDK.ChatMessage)
  public func onChatMessageParticipantImdnStateChanged(chatRoom: WiFiWirelessSDK.ChatRoom, message: WiFiWirelessSDK.ChatMessage, state: WiFiWirelessSDK.ParticipantImdnState)
  public func onChatRoomRead(chatRoom: WiFiWirelessSDK.ChatRoom)
}
final public class ChatRoomDelegateStub : WiFiWirelessSDK.ChatRoomDelegate {
  final public func onIsComposingReceived(chatRoom: WiFiWirelessSDK.ChatRoom, remoteAddress: WiFiWirelessSDK.Address, isComposing: Swift.Bool)
  final public func onMessageReceived(chatRoom: WiFiWirelessSDK.ChatRoom, message: WiFiWirelessSDK.ChatMessage)
  final public func onMessagesReceived(chatRoom: WiFiWirelessSDK.ChatRoom, chatMessages: [WiFiWirelessSDK.ChatMessage])
  final public func onNewEvent(chatRoom: WiFiWirelessSDK.ChatRoom, eventLog: WiFiWirelessSDK.EventLog)
  final public func onNewEvents(chatRoom: WiFiWirelessSDK.ChatRoom, eventLogs: [WiFiWirelessSDK.EventLog])
  final public func onChatMessageReceived(chatRoom: WiFiWirelessSDK.ChatRoom, eventLog: WiFiWirelessSDK.EventLog)
  final public func onChatMessagesReceived(chatRoom: WiFiWirelessSDK.ChatRoom, eventLogs: [WiFiWirelessSDK.EventLog])
  final public func onChatMessageSending(chatRoom: WiFiWirelessSDK.ChatRoom, eventLog: WiFiWirelessSDK.EventLog)
  final public func onChatMessageSent(chatRoom: WiFiWirelessSDK.ChatRoom, eventLog: WiFiWirelessSDK.EventLog)
  final public func onParticipantAdded(chatRoom: WiFiWirelessSDK.ChatRoom, eventLog: WiFiWirelessSDK.EventLog)
  final public func onParticipantRemoved(chatRoom: WiFiWirelessSDK.ChatRoom, eventLog: WiFiWirelessSDK.EventLog)
  final public func onParticipantAdminStatusChanged(chatRoom: WiFiWirelessSDK.ChatRoom, eventLog: WiFiWirelessSDK.EventLog)
  final public func onStateChanged(chatRoom: WiFiWirelessSDK.ChatRoom, newState: WiFiWirelessSDK.ChatRoom.State)
  final public func onSecurityEvent(chatRoom: WiFiWirelessSDK.ChatRoom, eventLog: WiFiWirelessSDK.EventLog)
  final public func onSubjectChanged(chatRoom: WiFiWirelessSDK.ChatRoom, eventLog: WiFiWirelessSDK.EventLog)
  final public func onUndecryptableMessageReceived(chatRoom: WiFiWirelessSDK.ChatRoom, message: WiFiWirelessSDK.ChatMessage)
  final public func onParticipantDeviceAdded(chatRoom: WiFiWirelessSDK.ChatRoom, eventLog: WiFiWirelessSDK.EventLog)
  final public func onParticipantDeviceRemoved(chatRoom: WiFiWirelessSDK.ChatRoom, eventLog: WiFiWirelessSDK.EventLog)
  final public func onParticipantDeviceStateChanged(chatRoom: WiFiWirelessSDK.ChatRoom, eventLog: WiFiWirelessSDK.EventLog, state: WiFiWirelessSDK.ParticipantDevice.State)
  final public func onParticipantDeviceMediaAvailabilityChanged(chatRoom: WiFiWirelessSDK.ChatRoom, eventLog: WiFiWirelessSDK.EventLog)
  final public func onConferenceJoined(chatRoom: WiFiWirelessSDK.ChatRoom, eventLog: WiFiWirelessSDK.EventLog)
  final public func onConferenceLeft(chatRoom: WiFiWirelessSDK.ChatRoom, eventLog: WiFiWirelessSDK.EventLog)
  final public func onEphemeralEvent(chatRoom: WiFiWirelessSDK.ChatRoom, eventLog: WiFiWirelessSDK.EventLog)
  final public func onEphemeralMessageTimerStarted(chatRoom: WiFiWirelessSDK.ChatRoom, eventLog: WiFiWirelessSDK.EventLog)
  final public func onEphemeralMessageDeleted(chatRoom: WiFiWirelessSDK.ChatRoom, eventLog: WiFiWirelessSDK.EventLog)
  final public func onConferenceAddressGeneration(chatRoom: WiFiWirelessSDK.ChatRoom)
  final public func onParticipantRegistrationSubscriptionRequested(chatRoom: WiFiWirelessSDK.ChatRoom, participantAddress: WiFiWirelessSDK.Address)
  final public func onParticipantRegistrationUnsubscriptionRequested(chatRoom: WiFiWirelessSDK.ChatRoom, participantAddress: WiFiWirelessSDK.Address)
  final public func onChatMessageShouldBeStored(chatRoom: WiFiWirelessSDK.ChatRoom, message: WiFiWirelessSDK.ChatMessage)
  final public func onChatMessageParticipantImdnStateChanged(chatRoom: WiFiWirelessSDK.ChatRoom, message: WiFiWirelessSDK.ChatMessage, state: WiFiWirelessSDK.ParticipantImdnState)
  final public func onChatRoomRead(chatRoom: WiFiWirelessSDK.ChatRoom)
  public init(onIsComposingReceived: ((WiFiWirelessSDK.ChatRoom, WiFiWirelessSDK.Address, Swift.Bool) -> Swift.Void)? = nil, onMessageReceived: ((WiFiWirelessSDK.ChatRoom, WiFiWirelessSDK.ChatMessage) -> Swift.Void)? = nil, onMessagesReceived: ((WiFiWirelessSDK.ChatRoom, [WiFiWirelessSDK.ChatMessage]) -> Swift.Void)? = nil, onNewEvent: ((WiFiWirelessSDK.ChatRoom, WiFiWirelessSDK.EventLog) -> Swift.Void)? = nil, onNewEvents: ((WiFiWirelessSDK.ChatRoom, [WiFiWirelessSDK.EventLog]) -> Swift.Void)? = nil, onChatMessageReceived: ((WiFiWirelessSDK.ChatRoom, WiFiWirelessSDK.EventLog) -> Swift.Void)? = nil, onChatMessagesReceived: ((WiFiWirelessSDK.ChatRoom, [WiFiWirelessSDK.EventLog]) -> Swift.Void)? = nil, onChatMessageSending: ((WiFiWirelessSDK.ChatRoom, WiFiWirelessSDK.EventLog) -> Swift.Void)? = nil, onChatMessageSent: ((WiFiWirelessSDK.ChatRoom, WiFiWirelessSDK.EventLog) -> Swift.Void)? = nil, onParticipantAdded: ((WiFiWirelessSDK.ChatRoom, WiFiWirelessSDK.EventLog) -> Swift.Void)? = nil, onParticipantRemoved: ((WiFiWirelessSDK.ChatRoom, WiFiWirelessSDK.EventLog) -> Swift.Void)? = nil, onParticipantAdminStatusChanged: ((WiFiWirelessSDK.ChatRoom, WiFiWirelessSDK.EventLog) -> Swift.Void)? = nil, onStateChanged: ((WiFiWirelessSDK.ChatRoom, WiFiWirelessSDK.ChatRoom.State) -> Swift.Void)? = nil, onSecurityEvent: ((WiFiWirelessSDK.ChatRoom, WiFiWirelessSDK.EventLog) -> Swift.Void)? = nil, onSubjectChanged: ((WiFiWirelessSDK.ChatRoom, WiFiWirelessSDK.EventLog) -> Swift.Void)? = nil, onUndecryptableMessageReceived: ((WiFiWirelessSDK.ChatRoom, WiFiWirelessSDK.ChatMessage) -> Swift.Void)? = nil, onParticipantDeviceAdded: ((WiFiWirelessSDK.ChatRoom, WiFiWirelessSDK.EventLog) -> Swift.Void)? = nil, onParticipantDeviceRemoved: ((WiFiWirelessSDK.ChatRoom, WiFiWirelessSDK.EventLog) -> Swift.Void)? = nil, onParticipantDeviceStateChanged: ((WiFiWirelessSDK.ChatRoom, WiFiWirelessSDK.EventLog, WiFiWirelessSDK.ParticipantDevice.State) -> Swift.Void)? = nil, onParticipantDeviceMediaAvailabilityChanged: ((WiFiWirelessSDK.ChatRoom, WiFiWirelessSDK.EventLog) -> Swift.Void)? = nil, onConferenceJoined: ((WiFiWirelessSDK.ChatRoom, WiFiWirelessSDK.EventLog) -> Swift.Void)? = nil, onConferenceLeft: ((WiFiWirelessSDK.ChatRoom, WiFiWirelessSDK.EventLog) -> Swift.Void)? = nil, onEphemeralEvent: ((WiFiWirelessSDK.ChatRoom, WiFiWirelessSDK.EventLog) -> Swift.Void)? = nil, onEphemeralMessageTimerStarted: ((WiFiWirelessSDK.ChatRoom, WiFiWirelessSDK.EventLog) -> Swift.Void)? = nil, onEphemeralMessageDeleted: ((WiFiWirelessSDK.ChatRoom, WiFiWirelessSDK.EventLog) -> Swift.Void)? = nil, onConferenceAddressGeneration: ((WiFiWirelessSDK.ChatRoom) -> Swift.Void)? = nil, onParticipantRegistrationSubscriptionRequested: ((WiFiWirelessSDK.ChatRoom, WiFiWirelessSDK.Address) -> Swift.Void)? = nil, onParticipantRegistrationUnsubscriptionRequested: ((WiFiWirelessSDK.ChatRoom, WiFiWirelessSDK.Address) -> Swift.Void)? = nil, onChatMessageShouldBeStored: ((WiFiWirelessSDK.ChatRoom, WiFiWirelessSDK.ChatMessage) -> Swift.Void)? = nil, onChatMessageParticipantImdnStateChanged: ((WiFiWirelessSDK.ChatRoom, WiFiWirelessSDK.ChatMessage, WiFiWirelessSDK.ParticipantImdnState) -> Swift.Void)? = nil, onChatRoomRead: ((WiFiWirelessSDK.ChatRoom) -> Swift.Void)? = nil)
  @objc deinit
}
public protocol ConferenceDelegate : AnyObject {
  func onParticipantAdded(conference: WiFiWirelessSDK.Conference, participant: WiFiWirelessSDK.Participant)
  func onParticipantRemoved(conference: WiFiWirelessSDK.Conference, participant: WiFiWirelessSDK.Participant)
  func onParticipantDeviceAdded(conference: WiFiWirelessSDK.Conference, participantDevice: WiFiWirelessSDK.ParticipantDevice)
  func onParticipantDeviceRemoved(conference: WiFiWirelessSDK.Conference, participantDevice: WiFiWirelessSDK.ParticipantDevice)
  func onParticipantRoleChanged(conference: WiFiWirelessSDK.Conference, participant: WiFiWirelessSDK.Participant)
  func onParticipantAdminStatusChanged(conference: WiFiWirelessSDK.Conference, participant: WiFiWirelessSDK.Participant)
  func onParticipantDeviceStateChanged(conference: WiFiWirelessSDK.Conference, device: WiFiWirelessSDK.ParticipantDevice, state: WiFiWirelessSDK.ParticipantDevice.State)
  func onParticipantDeviceMediaAvailabilityChanged(conference: WiFiWirelessSDK.Conference, device: WiFiWirelessSDK.ParticipantDevice)
  func onParticipantDeviceMediaCapabilityChanged(conference: WiFiWirelessSDK.Conference, device: WiFiWirelessSDK.ParticipantDevice)
  func onStateChanged(conference: WiFiWirelessSDK.Conference, newState: WiFiWirelessSDK.Conference.State)
  func onAvailableMediaChanged(conference: WiFiWirelessSDK.Conference)
  func onSubjectChanged(conference: WiFiWirelessSDK.Conference, subject: Swift.String)
  func onParticipantDeviceIsSpeakingChanged(conference: WiFiWirelessSDK.Conference, participantDevice: WiFiWirelessSDK.ParticipantDevice, isSpeaking: Swift.Bool)
  func onParticipantDeviceIsMuted(conference: WiFiWirelessSDK.Conference, participantDevice: WiFiWirelessSDK.ParticipantDevice, isMuted: Swift.Bool)
  func onAudioDeviceChanged(conference: WiFiWirelessSDK.Conference, audioDevice: WiFiWirelessSDK.AudioDevice)
  func onActiveSpeakerParticipantDevice(conference: WiFiWirelessSDK.Conference, participantDevice: WiFiWirelessSDK.ParticipantDevice)
}
extension WiFiWirelessSDK.ConferenceDelegate {
  public func onParticipantAdded(conference: WiFiWirelessSDK.Conference, participant: WiFiWirelessSDK.Participant)
  public func onParticipantRemoved(conference: WiFiWirelessSDK.Conference, participant: WiFiWirelessSDK.Participant)
  public func onParticipantDeviceAdded(conference: WiFiWirelessSDK.Conference, participantDevice: WiFiWirelessSDK.ParticipantDevice)
  public func onParticipantDeviceRemoved(conference: WiFiWirelessSDK.Conference, participantDevice: WiFiWirelessSDK.ParticipantDevice)
  public func onParticipantRoleChanged(conference: WiFiWirelessSDK.Conference, participant: WiFiWirelessSDK.Participant)
  public func onParticipantAdminStatusChanged(conference: WiFiWirelessSDK.Conference, participant: WiFiWirelessSDK.Participant)
  public func onParticipantDeviceStateChanged(conference: WiFiWirelessSDK.Conference, device: WiFiWirelessSDK.ParticipantDevice, state: WiFiWirelessSDK.ParticipantDevice.State)
  public func onParticipantDeviceMediaAvailabilityChanged(conference: WiFiWirelessSDK.Conference, device: WiFiWirelessSDK.ParticipantDevice)
  public func onParticipantDeviceMediaCapabilityChanged(conference: WiFiWirelessSDK.Conference, device: WiFiWirelessSDK.ParticipantDevice)
  public func onStateChanged(conference: WiFiWirelessSDK.Conference, newState: WiFiWirelessSDK.Conference.State)
  public func onAvailableMediaChanged(conference: WiFiWirelessSDK.Conference)
  public func onSubjectChanged(conference: WiFiWirelessSDK.Conference, subject: Swift.String)
  public func onParticipantDeviceIsSpeakingChanged(conference: WiFiWirelessSDK.Conference, participantDevice: WiFiWirelessSDK.ParticipantDevice, isSpeaking: Swift.Bool)
  public func onParticipantDeviceIsMuted(conference: WiFiWirelessSDK.Conference, participantDevice: WiFiWirelessSDK.ParticipantDevice, isMuted: Swift.Bool)
  public func onAudioDeviceChanged(conference: WiFiWirelessSDK.Conference, audioDevice: WiFiWirelessSDK.AudioDevice)
  public func onActiveSpeakerParticipantDevice(conference: WiFiWirelessSDK.Conference, participantDevice: WiFiWirelessSDK.ParticipantDevice)
}
final public class ConferenceDelegateStub : WiFiWirelessSDK.ConferenceDelegate {
  final public func onParticipantAdded(conference: WiFiWirelessSDK.Conference, participant: WiFiWirelessSDK.Participant)
  final public func onParticipantRemoved(conference: WiFiWirelessSDK.Conference, participant: WiFiWirelessSDK.Participant)
  final public func onParticipantDeviceAdded(conference: WiFiWirelessSDK.Conference, participantDevice: WiFiWirelessSDK.ParticipantDevice)
  final public func onParticipantDeviceRemoved(conference: WiFiWirelessSDK.Conference, participantDevice: WiFiWirelessSDK.ParticipantDevice)
  final public func onParticipantRoleChanged(conference: WiFiWirelessSDK.Conference, participant: WiFiWirelessSDK.Participant)
  final public func onParticipantAdminStatusChanged(conference: WiFiWirelessSDK.Conference, participant: WiFiWirelessSDK.Participant)
  final public func onParticipantDeviceStateChanged(conference: WiFiWirelessSDK.Conference, device: WiFiWirelessSDK.ParticipantDevice, state: WiFiWirelessSDK.ParticipantDevice.State)
  final public func onParticipantDeviceMediaAvailabilityChanged(conference: WiFiWirelessSDK.Conference, device: WiFiWirelessSDK.ParticipantDevice)
  final public func onParticipantDeviceMediaCapabilityChanged(conference: WiFiWirelessSDK.Conference, device: WiFiWirelessSDK.ParticipantDevice)
  final public func onStateChanged(conference: WiFiWirelessSDK.Conference, newState: WiFiWirelessSDK.Conference.State)
  final public func onAvailableMediaChanged(conference: WiFiWirelessSDK.Conference)
  final public func onSubjectChanged(conference: WiFiWirelessSDK.Conference, subject: Swift.String)
  final public func onParticipantDeviceIsSpeakingChanged(conference: WiFiWirelessSDK.Conference, participantDevice: WiFiWirelessSDK.ParticipantDevice, isSpeaking: Swift.Bool)
  final public func onParticipantDeviceIsMuted(conference: WiFiWirelessSDK.Conference, participantDevice: WiFiWirelessSDK.ParticipantDevice, isMuted: Swift.Bool)
  final public func onAudioDeviceChanged(conference: WiFiWirelessSDK.Conference, audioDevice: WiFiWirelessSDK.AudioDevice)
  final public func onActiveSpeakerParticipantDevice(conference: WiFiWirelessSDK.Conference, participantDevice: WiFiWirelessSDK.ParticipantDevice)
  public init(onParticipantAdded: ((WiFiWirelessSDK.Conference, WiFiWirelessSDK.Participant) -> Swift.Void)? = nil, onParticipantRemoved: ((WiFiWirelessSDK.Conference, WiFiWirelessSDK.Participant) -> Swift.Void)? = nil, onParticipantDeviceAdded: ((WiFiWirelessSDK.Conference, WiFiWirelessSDK.ParticipantDevice) -> Swift.Void)? = nil, onParticipantDeviceRemoved: ((WiFiWirelessSDK.Conference, WiFiWirelessSDK.ParticipantDevice) -> Swift.Void)? = nil, onParticipantRoleChanged: ((WiFiWirelessSDK.Conference, WiFiWirelessSDK.Participant) -> Swift.Void)? = nil, onParticipantAdminStatusChanged: ((WiFiWirelessSDK.Conference, WiFiWirelessSDK.Participant) -> Swift.Void)? = nil, onParticipantDeviceStateChanged: ((WiFiWirelessSDK.Conference, WiFiWirelessSDK.ParticipantDevice, WiFiWirelessSDK.ParticipantDevice.State) -> Swift.Void)? = nil, onParticipantDeviceMediaAvailabilityChanged: ((WiFiWirelessSDK.Conference, WiFiWirelessSDK.ParticipantDevice) -> Swift.Void)? = nil, onParticipantDeviceMediaCapabilityChanged: ((WiFiWirelessSDK.Conference, WiFiWirelessSDK.ParticipantDevice) -> Swift.Void)? = nil, onStateChanged: ((WiFiWirelessSDK.Conference, WiFiWirelessSDK.Conference.State) -> Swift.Void)? = nil, onAvailableMediaChanged: ((WiFiWirelessSDK.Conference) -> Swift.Void)? = nil, onSubjectChanged: ((WiFiWirelessSDK.Conference, Swift.String) -> Swift.Void)? = nil, onParticipantDeviceIsSpeakingChanged: ((WiFiWirelessSDK.Conference, WiFiWirelessSDK.ParticipantDevice, Swift.Bool) -> Swift.Void)? = nil, onParticipantDeviceIsMuted: ((WiFiWirelessSDK.Conference, WiFiWirelessSDK.ParticipantDevice, Swift.Bool) -> Swift.Void)? = nil, onAudioDeviceChanged: ((WiFiWirelessSDK.Conference, WiFiWirelessSDK.AudioDevice) -> Swift.Void)? = nil, onActiveSpeakerParticipantDevice: ((WiFiWirelessSDK.Conference, WiFiWirelessSDK.ParticipantDevice) -> Swift.Void)? = nil)
  @objc deinit
}
public protocol ConferenceSchedulerDelegate : AnyObject {
  func onStateChanged(conferenceScheduler: WiFiWirelessSDK.ConferenceScheduler, state: WiFiWirelessSDK.ConferenceScheduler.State)
  func onInvitationsSent(conferenceScheduler: WiFiWirelessSDK.ConferenceScheduler, failedInvitations: [WiFiWirelessSDK.Address])
}
extension WiFiWirelessSDK.ConferenceSchedulerDelegate {
  public func onStateChanged(conferenceScheduler: WiFiWirelessSDK.ConferenceScheduler, state: WiFiWirelessSDK.ConferenceScheduler.State)
  public func onInvitationsSent(conferenceScheduler: WiFiWirelessSDK.ConferenceScheduler, failedInvitations: [WiFiWirelessSDK.Address])
}
final public class ConferenceSchedulerDelegateStub : WiFiWirelessSDK.ConferenceSchedulerDelegate {
  final public func onStateChanged(conferenceScheduler: WiFiWirelessSDK.ConferenceScheduler, state: WiFiWirelessSDK.ConferenceScheduler.State)
  final public func onInvitationsSent(conferenceScheduler: WiFiWirelessSDK.ConferenceScheduler, failedInvitations: [WiFiWirelessSDK.Address])
  public init(onStateChanged: ((WiFiWirelessSDK.ConferenceScheduler, WiFiWirelessSDK.ConferenceScheduler.State) -> Swift.Void)? = nil, onInvitationsSent: ((WiFiWirelessSDK.ConferenceScheduler, [WiFiWirelessSDK.Address]) -> Swift.Void)? = nil)
  @objc deinit
}
public protocol CoreDelegate : AnyObject {
  func onNewAlertTriggered(core: WiFiWirelessSDK.Core, alert: WiFiWirelessSDK.Alert)
  func onGlobalStateChanged(core: WiFiWirelessSDK.Core, state: WiFiWirelessSDK.GlobalState, message: Swift.String)
  func onRegistrationStateChanged(core: WiFiWirelessSDK.Core, proxyConfig: WiFiWirelessSDK.ProxyConfig, state: WiFiWirelessSDK.RegistrationState, message: Swift.String)
  func onConferenceInfoReceived(core: WiFiWirelessSDK.Core, conferenceInfo: WiFiWirelessSDK.ConferenceInfo)
  func onPushNotificationReceived(core: WiFiWirelessSDK.Core, payload: Swift.String)
  func onPreviewDisplayErrorOccurred(core: WiFiWirelessSDK.Core, errorCode: Swift.Int)
  func onCallStateChanged(core: WiFiWirelessSDK.Core, call: WiFiWirelessSDK.Call, state: WiFiWirelessSDK.Call.State, message: Swift.String)
  func onNotifyPresenceReceived(core: WiFiWirelessSDK.Core, linphoneFriend: WiFiWirelessSDK.Friend)
  func onNotifyPresenceReceivedForUriOrTel(core: WiFiWirelessSDK.Core, linphoneFriend: WiFiWirelessSDK.Friend, uriOrTel: Swift.String, presenceModel: WiFiWirelessSDK.PresenceModel)
  func onNewSubscriptionRequested(core: WiFiWirelessSDK.Core, linphoneFriend: WiFiWirelessSDK.Friend, url: Swift.String)
  func onAuthenticationRequested(core: WiFiWirelessSDK.Core, authInfo: WiFiWirelessSDK.AuthInfo, method: WiFiWirelessSDK.AuthMethod)
  func onCallLogUpdated(core: WiFiWirelessSDK.Core, callLog: WiFiWirelessSDK.CallLog)
  func onCallIdUpdated(core: WiFiWirelessSDK.Core, previousCallId: Swift.String, currentCallId: Swift.String)
  func onMessageReceived(core: WiFiWirelessSDK.Core, chatRoom: WiFiWirelessSDK.ChatRoom, message: WiFiWirelessSDK.ChatMessage)
  func onNewMessageReaction(core: WiFiWirelessSDK.Core, chatRoom: WiFiWirelessSDK.ChatRoom, message: WiFiWirelessSDK.ChatMessage, reaction: WiFiWirelessSDK.ChatMessageReaction)
  func onReactionRemoved(core: WiFiWirelessSDK.Core, chatRoom: WiFiWirelessSDK.ChatRoom, message: WiFiWirelessSDK.ChatMessage, address: WiFiWirelessSDK.Address)
  func onMessagesReceived(core: WiFiWirelessSDK.Core, chatRoom: WiFiWirelessSDK.ChatRoom, messages: [WiFiWirelessSDK.ChatMessage])
  func onMessageSent(core: WiFiWirelessSDK.Core, chatRoom: WiFiWirelessSDK.ChatRoom, message: WiFiWirelessSDK.ChatMessage)
  func onChatRoomSessionStateChanged(core: WiFiWirelessSDK.Core, chatRoom: WiFiWirelessSDK.ChatRoom, state: WiFiWirelessSDK.Call.State, message: Swift.String)
  func onChatRoomRead(core: WiFiWirelessSDK.Core, chatRoom: WiFiWirelessSDK.ChatRoom)
  func onMessageReceivedUnableDecrypt(core: WiFiWirelessSDK.Core, chatRoom: WiFiWirelessSDK.ChatRoom, message: WiFiWirelessSDK.ChatMessage)
  func onIsComposingReceived(core: WiFiWirelessSDK.Core, chatRoom: WiFiWirelessSDK.ChatRoom)
  func onDtmfReceived(core: WiFiWirelessSDK.Core, call: WiFiWirelessSDK.Call, dtmf: Swift.Int)
  func onReferReceived(core: WiFiWirelessSDK.Core, referTo: Swift.String)
  func onCallGoclearAckSent(core: WiFiWirelessSDK.Core, call: WiFiWirelessSDK.Call)
  func onCallEncryptionChanged(core: WiFiWirelessSDK.Core, call: WiFiWirelessSDK.Call, mediaEncryptionEnabled: Swift.Bool, authenticationToken: Swift.String)
  func onCallSendMasterKeyChanged(core: WiFiWirelessSDK.Core, call: WiFiWirelessSDK.Call, masterKey: Swift.String)
  func onCallReceiveMasterKeyChanged(core: WiFiWirelessSDK.Core, call: WiFiWirelessSDK.Call, masterKey: Swift.String)
  func onTransferStateChanged(core: WiFiWirelessSDK.Core, transfered: WiFiWirelessSDK.Call, callState: WiFiWirelessSDK.Call.State)
  func onBuddyInfoUpdated(core: WiFiWirelessSDK.Core, linphoneFriend: WiFiWirelessSDK.Friend)
  func onCallStatsUpdated(core: WiFiWirelessSDK.Core, call: WiFiWirelessSDK.Call, callStats: WiFiWirelessSDK.CallStats)
  func onInfoReceived(core: WiFiWirelessSDK.Core, call: WiFiWirelessSDK.Call, message: WiFiWirelessSDK.InfoMessage)
  func onSubscriptionStateChanged(core: WiFiWirelessSDK.Core, linphoneEvent: WiFiWirelessSDK.Event, state: WiFiWirelessSDK.SubscriptionState)
  func onNotifySent(core: WiFiWirelessSDK.Core, linphoneEvent: WiFiWirelessSDK.Event, body: WiFiWirelessSDK.Content?)
  func onNotifyReceived(core: WiFiWirelessSDK.Core, linphoneEvent: WiFiWirelessSDK.Event, notifiedEvent: Swift.String, body: WiFiWirelessSDK.Content?)
  func onSubscribeReceived(core: WiFiWirelessSDK.Core, linphoneEvent: WiFiWirelessSDK.Event, subscribeEvent: Swift.String, body: WiFiWirelessSDK.Content?)
  func onPublishStateChanged(core: WiFiWirelessSDK.Core, linphoneEvent: WiFiWirelessSDK.Event, state: WiFiWirelessSDK.PublishState)
  func onPublishReceived(core: WiFiWirelessSDK.Core, linphoneEvent: WiFiWirelessSDK.Event, publishEvent: Swift.String, body: WiFiWirelessSDK.Content?)
  func onConfiguringStatus(core: WiFiWirelessSDK.Core, status: WiFiWirelessSDK.Config.ConfiguringState, message: Swift.String)
  func onNetworkReachable(core: WiFiWirelessSDK.Core, reachable: Swift.Bool)
  func onLogCollectionUploadStateChanged(core: WiFiWirelessSDK.Core, state: WiFiWirelessSDK.Core.LogCollectionUploadState, info: Swift.String)
  func onLogCollectionUploadProgressIndication(core: WiFiWirelessSDK.Core, offset: Swift.Int, total: Swift.Int)
  func onFriendListCreated(core: WiFiWirelessSDK.Core, friendList: WiFiWirelessSDK.FriendList)
  func onFriendListRemoved(core: WiFiWirelessSDK.Core, friendList: WiFiWirelessSDK.FriendList)
  func onCallCreated(core: WiFiWirelessSDK.Core, call: WiFiWirelessSDK.Call)
  func onVersionUpdateCheckResultReceived(core: WiFiWirelessSDK.Core, result: WiFiWirelessSDK.VersionUpdateCheckResult, version: Swift.String, url: Swift.String)
  func onConferenceStateChanged(core: WiFiWirelessSDK.Core, conference: WiFiWirelessSDK.Conference, state: WiFiWirelessSDK.Conference.State)
  func onChatRoomStateChanged(core: WiFiWirelessSDK.Core, chatRoom: WiFiWirelessSDK.ChatRoom, state: WiFiWirelessSDK.ChatRoom.State)
  func onChatRoomSubjectChanged(core: WiFiWirelessSDK.Core, chatRoom: WiFiWirelessSDK.ChatRoom)
  func onChatRoomEphemeralMessageDeleted(core: WiFiWirelessSDK.Core, chatRoom: WiFiWirelessSDK.ChatRoom)
  func onImeeUserRegistration(core: WiFiWirelessSDK.Core, status: Swift.Bool, userId: Swift.String, info: Swift.String)
  func onQrcodeFound(core: WiFiWirelessSDK.Core, result: Swift.String)
  func onFirstCallStarted(core: WiFiWirelessSDK.Core)
  func onLastCallEnded(core: WiFiWirelessSDK.Core)
  func onAudioDeviceChanged(core: WiFiWirelessSDK.Core, audioDevice: WiFiWirelessSDK.AudioDevice)
  func onAudioDevicesListUpdated(core: WiFiWirelessSDK.Core)
  func onEcCalibrationResult(core: WiFiWirelessSDK.Core, status: WiFiWirelessSDK.EcCalibratorStatus, delayMs: Swift.Int)
  func onEcCalibrationAudioInit(core: WiFiWirelessSDK.Core)
  func onEcCalibrationAudioUninit(core: WiFiWirelessSDK.Core)
  func onAccountRegistrationStateChanged(core: WiFiWirelessSDK.Core, account: WiFiWirelessSDK.Account, state: WiFiWirelessSDK.RegistrationState, message: Swift.String)
  func onDefaultAccountChanged(core: WiFiWirelessSDK.Core, account: WiFiWirelessSDK.Account?)
  func onAccountAdded(core: WiFiWirelessSDK.Core, account: WiFiWirelessSDK.Account)
  func onAccountRemoved(core: WiFiWirelessSDK.Core, account: WiFiWirelessSDK.Account)
}
extension WiFiWirelessSDK.CoreDelegate {
  public func onNewAlertTriggered(core: WiFiWirelessSDK.Core, alert: WiFiWirelessSDK.Alert)
  public func onGlobalStateChanged(core: WiFiWirelessSDK.Core, state: WiFiWirelessSDK.GlobalState, message: Swift.String)
  public func onRegistrationStateChanged(core: WiFiWirelessSDK.Core, proxyConfig: WiFiWirelessSDK.ProxyConfig, state: WiFiWirelessSDK.RegistrationState, message: Swift.String)
  public func onConferenceInfoReceived(core: WiFiWirelessSDK.Core, conferenceInfo: WiFiWirelessSDK.ConferenceInfo)
  public func onPushNotificationReceived(core: WiFiWirelessSDK.Core, payload: Swift.String)
  public func onPreviewDisplayErrorOccurred(core: WiFiWirelessSDK.Core, errorCode: Swift.Int)
  public func onCallStateChanged(core: WiFiWirelessSDK.Core, call: WiFiWirelessSDK.Call, state: WiFiWirelessSDK.Call.State, message: Swift.String)
  public func onNotifyPresenceReceived(core: WiFiWirelessSDK.Core, linphoneFriend: WiFiWirelessSDK.Friend)
  public func onNotifyPresenceReceivedForUriOrTel(core: WiFiWirelessSDK.Core, linphoneFriend: WiFiWirelessSDK.Friend, uriOrTel: Swift.String, presenceModel: WiFiWirelessSDK.PresenceModel)
  public func onNewSubscriptionRequested(core: WiFiWirelessSDK.Core, linphoneFriend: WiFiWirelessSDK.Friend, url: Swift.String)
  public func onAuthenticationRequested(core: WiFiWirelessSDK.Core, authInfo: WiFiWirelessSDK.AuthInfo, method: WiFiWirelessSDK.AuthMethod)
  public func onCallLogUpdated(core: WiFiWirelessSDK.Core, callLog: WiFiWirelessSDK.CallLog)
  public func onCallIdUpdated(core: WiFiWirelessSDK.Core, previousCallId: Swift.String, currentCallId: Swift.String)
  public func onMessageReceived(core: WiFiWirelessSDK.Core, chatRoom: WiFiWirelessSDK.ChatRoom, message: WiFiWirelessSDK.ChatMessage)
  public func onNewMessageReaction(core: WiFiWirelessSDK.Core, chatRoom: WiFiWirelessSDK.ChatRoom, message: WiFiWirelessSDK.ChatMessage, reaction: WiFiWirelessSDK.ChatMessageReaction)
  public func onReactionRemoved(core: WiFiWirelessSDK.Core, chatRoom: WiFiWirelessSDK.ChatRoom, message: WiFiWirelessSDK.ChatMessage, address: WiFiWirelessSDK.Address)
  public func onMessagesReceived(core: WiFiWirelessSDK.Core, chatRoom: WiFiWirelessSDK.ChatRoom, messages: [WiFiWirelessSDK.ChatMessage])
  public func onMessageSent(core: WiFiWirelessSDK.Core, chatRoom: WiFiWirelessSDK.ChatRoom, message: WiFiWirelessSDK.ChatMessage)
  public func onChatRoomSessionStateChanged(core: WiFiWirelessSDK.Core, chatRoom: WiFiWirelessSDK.ChatRoom, state: WiFiWirelessSDK.Call.State, message: Swift.String)
  public func onChatRoomRead(core: WiFiWirelessSDK.Core, chatRoom: WiFiWirelessSDK.ChatRoom)
  public func onMessageReceivedUnableDecrypt(core: WiFiWirelessSDK.Core, chatRoom: WiFiWirelessSDK.ChatRoom, message: WiFiWirelessSDK.ChatMessage)
  public func onIsComposingReceived(core: WiFiWirelessSDK.Core, chatRoom: WiFiWirelessSDK.ChatRoom)
  public func onDtmfReceived(core: WiFiWirelessSDK.Core, call: WiFiWirelessSDK.Call, dtmf: Swift.Int)
  public func onReferReceived(core: WiFiWirelessSDK.Core, referTo: Swift.String)
  public func onCallGoclearAckSent(core: WiFiWirelessSDK.Core, call: WiFiWirelessSDK.Call)
  public func onCallEncryptionChanged(core: WiFiWirelessSDK.Core, call: WiFiWirelessSDK.Call, mediaEncryptionEnabled: Swift.Bool, authenticationToken: Swift.String)
  public func onCallSendMasterKeyChanged(core: WiFiWirelessSDK.Core, call: WiFiWirelessSDK.Call, masterKey: Swift.String)
  public func onCallReceiveMasterKeyChanged(core: WiFiWirelessSDK.Core, call: WiFiWirelessSDK.Call, masterKey: Swift.String)
  public func onTransferStateChanged(core: WiFiWirelessSDK.Core, transfered: WiFiWirelessSDK.Call, callState: WiFiWirelessSDK.Call.State)
  public func onBuddyInfoUpdated(core: WiFiWirelessSDK.Core, linphoneFriend: WiFiWirelessSDK.Friend)
  public func onCallStatsUpdated(core: WiFiWirelessSDK.Core, call: WiFiWirelessSDK.Call, callStats: WiFiWirelessSDK.CallStats)
  public func onInfoReceived(core: WiFiWirelessSDK.Core, call: WiFiWirelessSDK.Call, message: WiFiWirelessSDK.InfoMessage)
  public func onSubscriptionStateChanged(core: WiFiWirelessSDK.Core, linphoneEvent: WiFiWirelessSDK.Event, state: WiFiWirelessSDK.SubscriptionState)
  public func onNotifySent(core: WiFiWirelessSDK.Core, linphoneEvent: WiFiWirelessSDK.Event, body: WiFiWirelessSDK.Content?)
  public func onNotifyReceived(core: WiFiWirelessSDK.Core, linphoneEvent: WiFiWirelessSDK.Event, notifiedEvent: Swift.String, body: WiFiWirelessSDK.Content?)
  public func onSubscribeReceived(core: WiFiWirelessSDK.Core, linphoneEvent: WiFiWirelessSDK.Event, subscribeEvent: Swift.String, body: WiFiWirelessSDK.Content?)
  public func onPublishStateChanged(core: WiFiWirelessSDK.Core, linphoneEvent: WiFiWirelessSDK.Event, state: WiFiWirelessSDK.PublishState)
  public func onPublishReceived(core: WiFiWirelessSDK.Core, linphoneEvent: WiFiWirelessSDK.Event, publishEvent: Swift.String, body: WiFiWirelessSDK.Content?)
  public func onConfiguringStatus(core: WiFiWirelessSDK.Core, status: WiFiWirelessSDK.Config.ConfiguringState, message: Swift.String)
  public func onNetworkReachable(core: WiFiWirelessSDK.Core, reachable: Swift.Bool)
  public func onLogCollectionUploadStateChanged(core: WiFiWirelessSDK.Core, state: WiFiWirelessSDK.Core.LogCollectionUploadState, info: Swift.String)
  public func onLogCollectionUploadProgressIndication(core: WiFiWirelessSDK.Core, offset: Swift.Int, total: Swift.Int)
  public func onFriendListCreated(core: WiFiWirelessSDK.Core, friendList: WiFiWirelessSDK.FriendList)
  public func onFriendListRemoved(core: WiFiWirelessSDK.Core, friendList: WiFiWirelessSDK.FriendList)
  public func onCallCreated(core: WiFiWirelessSDK.Core, call: WiFiWirelessSDK.Call)
  public func onVersionUpdateCheckResultReceived(core: WiFiWirelessSDK.Core, result: WiFiWirelessSDK.VersionUpdateCheckResult, version: Swift.String, url: Swift.String)
  public func onConferenceStateChanged(core: WiFiWirelessSDK.Core, conference: WiFiWirelessSDK.Conference, state: WiFiWirelessSDK.Conference.State)
  public func onChatRoomStateChanged(core: WiFiWirelessSDK.Core, chatRoom: WiFiWirelessSDK.ChatRoom, state: WiFiWirelessSDK.ChatRoom.State)
  public func onChatRoomSubjectChanged(core: WiFiWirelessSDK.Core, chatRoom: WiFiWirelessSDK.ChatRoom)
  public func onChatRoomEphemeralMessageDeleted(core: WiFiWirelessSDK.Core, chatRoom: WiFiWirelessSDK.ChatRoom)
  public func onImeeUserRegistration(core: WiFiWirelessSDK.Core, status: Swift.Bool, userId: Swift.String, info: Swift.String)
  public func onQrcodeFound(core: WiFiWirelessSDK.Core, result: Swift.String)
  public func onFirstCallStarted(core: WiFiWirelessSDK.Core)
  public func onLastCallEnded(core: WiFiWirelessSDK.Core)
  public func onAudioDeviceChanged(core: WiFiWirelessSDK.Core, audioDevice: WiFiWirelessSDK.AudioDevice)
  public func onAudioDevicesListUpdated(core: WiFiWirelessSDK.Core)
  public func onEcCalibrationResult(core: WiFiWirelessSDK.Core, status: WiFiWirelessSDK.EcCalibratorStatus, delayMs: Swift.Int)
  public func onEcCalibrationAudioInit(core: WiFiWirelessSDK.Core)
  public func onEcCalibrationAudioUninit(core: WiFiWirelessSDK.Core)
  public func onAccountRegistrationStateChanged(core: WiFiWirelessSDK.Core, account: WiFiWirelessSDK.Account, state: WiFiWirelessSDK.RegistrationState, message: Swift.String)
  public func onDefaultAccountChanged(core: WiFiWirelessSDK.Core, account: WiFiWirelessSDK.Account?)
  public func onAccountAdded(core: WiFiWirelessSDK.Core, account: WiFiWirelessSDK.Account)
  public func onAccountRemoved(core: WiFiWirelessSDK.Core, account: WiFiWirelessSDK.Account)
}
final public class CoreDelegateStub : WiFiWirelessSDK.CoreDelegate {
  final public func onNewAlertTriggered(core: WiFiWirelessSDK.Core, alert: WiFiWirelessSDK.Alert)
  final public func onGlobalStateChanged(core: WiFiWirelessSDK.Core, state: WiFiWirelessSDK.GlobalState, message: Swift.String)
  final public func onRegistrationStateChanged(core: WiFiWirelessSDK.Core, proxyConfig: WiFiWirelessSDK.ProxyConfig, state: WiFiWirelessSDK.RegistrationState, message: Swift.String)
  final public func onConferenceInfoReceived(core: WiFiWirelessSDK.Core, conferenceInfo: WiFiWirelessSDK.ConferenceInfo)
  final public func onPushNotificationReceived(core: WiFiWirelessSDK.Core, payload: Swift.String)
  final public func onPreviewDisplayErrorOccurred(core: WiFiWirelessSDK.Core, errorCode: Swift.Int)
  final public func onCallStateChanged(core: WiFiWirelessSDK.Core, call: WiFiWirelessSDK.Call, state: WiFiWirelessSDK.Call.State, message: Swift.String)
  final public func onNotifyPresenceReceived(core: WiFiWirelessSDK.Core, linphoneFriend: WiFiWirelessSDK.Friend)
  final public func onNotifyPresenceReceivedForUriOrTel(core: WiFiWirelessSDK.Core, linphoneFriend: WiFiWirelessSDK.Friend, uriOrTel: Swift.String, presenceModel: WiFiWirelessSDK.PresenceModel)
  final public func onNewSubscriptionRequested(core: WiFiWirelessSDK.Core, linphoneFriend: WiFiWirelessSDK.Friend, url: Swift.String)
  final public func onAuthenticationRequested(core: WiFiWirelessSDK.Core, authInfo: WiFiWirelessSDK.AuthInfo, method: WiFiWirelessSDK.AuthMethod)
  final public func onCallLogUpdated(core: WiFiWirelessSDK.Core, callLog: WiFiWirelessSDK.CallLog)
  final public func onCallIdUpdated(core: WiFiWirelessSDK.Core, previousCallId: Swift.String, currentCallId: Swift.String)
  final public func onMessageReceived(core: WiFiWirelessSDK.Core, chatRoom: WiFiWirelessSDK.ChatRoom, message: WiFiWirelessSDK.ChatMessage)
  final public func onNewMessageReaction(core: WiFiWirelessSDK.Core, chatRoom: WiFiWirelessSDK.ChatRoom, message: WiFiWirelessSDK.ChatMessage, reaction: WiFiWirelessSDK.ChatMessageReaction)
  final public func onReactionRemoved(core: WiFiWirelessSDK.Core, chatRoom: WiFiWirelessSDK.ChatRoom, message: WiFiWirelessSDK.ChatMessage, address: WiFiWirelessSDK.Address)
  final public func onMessagesReceived(core: WiFiWirelessSDK.Core, chatRoom: WiFiWirelessSDK.ChatRoom, messages: [WiFiWirelessSDK.ChatMessage])
  final public func onMessageSent(core: WiFiWirelessSDK.Core, chatRoom: WiFiWirelessSDK.ChatRoom, message: WiFiWirelessSDK.ChatMessage)
  final public func onChatRoomSessionStateChanged(core: WiFiWirelessSDK.Core, chatRoom: WiFiWirelessSDK.ChatRoom, state: WiFiWirelessSDK.Call.State, message: Swift.String)
  final public func onChatRoomRead(core: WiFiWirelessSDK.Core, chatRoom: WiFiWirelessSDK.ChatRoom)
  final public func onMessageReceivedUnableDecrypt(core: WiFiWirelessSDK.Core, chatRoom: WiFiWirelessSDK.ChatRoom, message: WiFiWirelessSDK.ChatMessage)
  final public func onIsComposingReceived(core: WiFiWirelessSDK.Core, chatRoom: WiFiWirelessSDK.ChatRoom)
  final public func onDtmfReceived(core: WiFiWirelessSDK.Core, call: WiFiWirelessSDK.Call, dtmf: Swift.Int)
  final public func onReferReceived(core: WiFiWirelessSDK.Core, referTo: Swift.String)
  final public func onCallGoclearAckSent(core: WiFiWirelessSDK.Core, call: WiFiWirelessSDK.Call)
  final public func onCallEncryptionChanged(core: WiFiWirelessSDK.Core, call: WiFiWirelessSDK.Call, mediaEncryptionEnabled: Swift.Bool, authenticationToken: Swift.String)
  final public func onCallSendMasterKeyChanged(core: WiFiWirelessSDK.Core, call: WiFiWirelessSDK.Call, masterKey: Swift.String)
  final public func onCallReceiveMasterKeyChanged(core: WiFiWirelessSDK.Core, call: WiFiWirelessSDK.Call, masterKey: Swift.String)
  final public func onTransferStateChanged(core: WiFiWirelessSDK.Core, transfered: WiFiWirelessSDK.Call, callState: WiFiWirelessSDK.Call.State)
  final public func onBuddyInfoUpdated(core: WiFiWirelessSDK.Core, linphoneFriend: WiFiWirelessSDK.Friend)
  final public func onCallStatsUpdated(core: WiFiWirelessSDK.Core, call: WiFiWirelessSDK.Call, callStats: WiFiWirelessSDK.CallStats)
  final public func onInfoReceived(core: WiFiWirelessSDK.Core, call: WiFiWirelessSDK.Call, message: WiFiWirelessSDK.InfoMessage)
  final public func onSubscriptionStateChanged(core: WiFiWirelessSDK.Core, linphoneEvent: WiFiWirelessSDK.Event, state: WiFiWirelessSDK.SubscriptionState)
  final public func onNotifySent(core: WiFiWirelessSDK.Core, linphoneEvent: WiFiWirelessSDK.Event, body: WiFiWirelessSDK.Content?)
  final public func onNotifyReceived(core: WiFiWirelessSDK.Core, linphoneEvent: WiFiWirelessSDK.Event, notifiedEvent: Swift.String, body: WiFiWirelessSDK.Content?)
  final public func onSubscribeReceived(core: WiFiWirelessSDK.Core, linphoneEvent: WiFiWirelessSDK.Event, subscribeEvent: Swift.String, body: WiFiWirelessSDK.Content?)
  final public func onPublishStateChanged(core: WiFiWirelessSDK.Core, linphoneEvent: WiFiWirelessSDK.Event, state: WiFiWirelessSDK.PublishState)
  final public func onPublishReceived(core: WiFiWirelessSDK.Core, linphoneEvent: WiFiWirelessSDK.Event, publishEvent: Swift.String, body: WiFiWirelessSDK.Content?)
  final public func onConfiguringStatus(core: WiFiWirelessSDK.Core, status: WiFiWirelessSDK.Config.ConfiguringState, message: Swift.String)
  final public func onNetworkReachable(core: WiFiWirelessSDK.Core, reachable: Swift.Bool)
  final public func onLogCollectionUploadStateChanged(core: WiFiWirelessSDK.Core, state: WiFiWirelessSDK.Core.LogCollectionUploadState, info: Swift.String)
  final public func onLogCollectionUploadProgressIndication(core: WiFiWirelessSDK.Core, offset: Swift.Int, total: Swift.Int)
  final public func onFriendListCreated(core: WiFiWirelessSDK.Core, friendList: WiFiWirelessSDK.FriendList)
  final public func onFriendListRemoved(core: WiFiWirelessSDK.Core, friendList: WiFiWirelessSDK.FriendList)
  final public func onCallCreated(core: WiFiWirelessSDK.Core, call: WiFiWirelessSDK.Call)
  final public func onVersionUpdateCheckResultReceived(core: WiFiWirelessSDK.Core, result: WiFiWirelessSDK.VersionUpdateCheckResult, version: Swift.String, url: Swift.String)
  final public func onConferenceStateChanged(core: WiFiWirelessSDK.Core, conference: WiFiWirelessSDK.Conference, state: WiFiWirelessSDK.Conference.State)
  final public func onChatRoomStateChanged(core: WiFiWirelessSDK.Core, chatRoom: WiFiWirelessSDK.ChatRoom, state: WiFiWirelessSDK.ChatRoom.State)
  final public func onChatRoomSubjectChanged(core: WiFiWirelessSDK.Core, chatRoom: WiFiWirelessSDK.ChatRoom)
  final public func onChatRoomEphemeralMessageDeleted(core: WiFiWirelessSDK.Core, chatRoom: WiFiWirelessSDK.ChatRoom)
  final public func onImeeUserRegistration(core: WiFiWirelessSDK.Core, status: Swift.Bool, userId: Swift.String, info: Swift.String)
  final public func onQrcodeFound(core: WiFiWirelessSDK.Core, result: Swift.String)
  final public func onFirstCallStarted(core: WiFiWirelessSDK.Core)
  final public func onLastCallEnded(core: WiFiWirelessSDK.Core)
  final public func onAudioDeviceChanged(core: WiFiWirelessSDK.Core, audioDevice: WiFiWirelessSDK.AudioDevice)
  final public func onAudioDevicesListUpdated(core: WiFiWirelessSDK.Core)
  final public func onEcCalibrationResult(core: WiFiWirelessSDK.Core, status: WiFiWirelessSDK.EcCalibratorStatus, delayMs: Swift.Int)
  final public func onEcCalibrationAudioInit(core: WiFiWirelessSDK.Core)
  final public func onEcCalibrationAudioUninit(core: WiFiWirelessSDK.Core)
  final public func onAccountRegistrationStateChanged(core: WiFiWirelessSDK.Core, account: WiFiWirelessSDK.Account, state: WiFiWirelessSDK.RegistrationState, message: Swift.String)
  final public func onDefaultAccountChanged(core: WiFiWirelessSDK.Core, account: WiFiWirelessSDK.Account?)
  final public func onAccountAdded(core: WiFiWirelessSDK.Core, account: WiFiWirelessSDK.Account)
  final public func onAccountRemoved(core: WiFiWirelessSDK.Core, account: WiFiWirelessSDK.Account)
  public init(onNewAlertTriggered: ((WiFiWirelessSDK.Core, WiFiWirelessSDK.Alert) -> Swift.Void)? = nil, onGlobalStateChanged: ((WiFiWirelessSDK.Core, WiFiWirelessSDK.GlobalState, Swift.String) -> Swift.Void)? = nil, onRegistrationStateChanged: ((WiFiWirelessSDK.Core, WiFiWirelessSDK.ProxyConfig, WiFiWirelessSDK.RegistrationState, Swift.String) -> Swift.Void)? = nil, onConferenceInfoReceived: ((WiFiWirelessSDK.Core, WiFiWirelessSDK.ConferenceInfo) -> Swift.Void)? = nil, onPushNotificationReceived: ((WiFiWirelessSDK.Core, Swift.String) -> Swift.Void)? = nil, onPreviewDisplayErrorOccurred: ((WiFiWirelessSDK.Core, Swift.Int) -> Swift.Void)? = nil, onCallStateChanged: ((WiFiWirelessSDK.Core, WiFiWirelessSDK.Call, WiFiWirelessSDK.Call.State, Swift.String) -> Swift.Void)? = nil, onNotifyPresenceReceived: ((WiFiWirelessSDK.Core, WiFiWirelessSDK.Friend) -> Swift.Void)? = nil, onNotifyPresenceReceivedForUriOrTel: ((WiFiWirelessSDK.Core, WiFiWirelessSDK.Friend, Swift.String, WiFiWirelessSDK.PresenceModel) -> Swift.Void)? = nil, onNewSubscriptionRequested: ((WiFiWirelessSDK.Core, WiFiWirelessSDK.Friend, Swift.String) -> Swift.Void)? = nil, onAuthenticationRequested: ((WiFiWirelessSDK.Core, WiFiWirelessSDK.AuthInfo, WiFiWirelessSDK.AuthMethod) -> Swift.Void)? = nil, onCallLogUpdated: ((WiFiWirelessSDK.Core, WiFiWirelessSDK.CallLog) -> Swift.Void)? = nil, onCallIdUpdated: ((WiFiWirelessSDK.Core, Swift.String, Swift.String) -> Swift.Void)? = nil, onMessageReceived: ((WiFiWirelessSDK.Core, WiFiWirelessSDK.ChatRoom, WiFiWirelessSDK.ChatMessage) -> Swift.Void)? = nil, onNewMessageReaction: ((WiFiWirelessSDK.Core, WiFiWirelessSDK.ChatRoom, WiFiWirelessSDK.ChatMessage, WiFiWirelessSDK.ChatMessageReaction) -> Swift.Void)? = nil, onReactionRemoved: ((WiFiWirelessSDK.Core, WiFiWirelessSDK.ChatRoom, WiFiWirelessSDK.ChatMessage, WiFiWirelessSDK.Address) -> Swift.Void)? = nil, onMessagesReceived: ((WiFiWirelessSDK.Core, WiFiWirelessSDK.ChatRoom, [WiFiWirelessSDK.ChatMessage]) -> Swift.Void)? = nil, onMessageSent: ((WiFiWirelessSDK.Core, WiFiWirelessSDK.ChatRoom, WiFiWirelessSDK.ChatMessage) -> Swift.Void)? = nil, onChatRoomSessionStateChanged: ((WiFiWirelessSDK.Core, WiFiWirelessSDK.ChatRoom, WiFiWirelessSDK.Call.State, Swift.String) -> Swift.Void)? = nil, onChatRoomRead: ((WiFiWirelessSDK.Core, WiFiWirelessSDK.ChatRoom) -> Swift.Void)? = nil, onMessageReceivedUnableDecrypt: ((WiFiWirelessSDK.Core, WiFiWirelessSDK.ChatRoom, WiFiWirelessSDK.ChatMessage) -> Swift.Void)? = nil, onIsComposingReceived: ((WiFiWirelessSDK.Core, WiFiWirelessSDK.ChatRoom) -> Swift.Void)? = nil, onDtmfReceived: ((WiFiWirelessSDK.Core, WiFiWirelessSDK.Call, Swift.Int) -> Swift.Void)? = nil, onReferReceived: ((WiFiWirelessSDK.Core, Swift.String) -> Swift.Void)? = nil, onCallGoclearAckSent: ((WiFiWirelessSDK.Core, WiFiWirelessSDK.Call) -> Swift.Void)? = nil, onCallEncryptionChanged: ((WiFiWirelessSDK.Core, WiFiWirelessSDK.Call, Swift.Bool, Swift.String) -> Swift.Void)? = nil, onCallSendMasterKeyChanged: ((WiFiWirelessSDK.Core, WiFiWirelessSDK.Call, Swift.String) -> Swift.Void)? = nil, onCallReceiveMasterKeyChanged: ((WiFiWirelessSDK.Core, WiFiWirelessSDK.Call, Swift.String) -> Swift.Void)? = nil, onTransferStateChanged: ((WiFiWirelessSDK.Core, WiFiWirelessSDK.Call, WiFiWirelessSDK.Call.State) -> Swift.Void)? = nil, onBuddyInfoUpdated: ((WiFiWirelessSDK.Core, WiFiWirelessSDK.Friend) -> Swift.Void)? = nil, onCallStatsUpdated: ((WiFiWirelessSDK.Core, WiFiWirelessSDK.Call, WiFiWirelessSDK.CallStats) -> Swift.Void)? = nil, onInfoReceived: ((WiFiWirelessSDK.Core, WiFiWirelessSDK.Call, WiFiWirelessSDK.InfoMessage) -> Swift.Void)? = nil, onSubscriptionStateChanged: ((WiFiWirelessSDK.Core, WiFiWirelessSDK.Event, WiFiWirelessSDK.SubscriptionState) -> Swift.Void)? = nil, onNotifySent: ((WiFiWirelessSDK.Core, WiFiWirelessSDK.Event, WiFiWirelessSDK.Content?) -> Swift.Void)? = nil, onNotifyReceived: ((WiFiWirelessSDK.Core, WiFiWirelessSDK.Event, Swift.String, WiFiWirelessSDK.Content?) -> Swift.Void)? = nil, onSubscribeReceived: ((WiFiWirelessSDK.Core, WiFiWirelessSDK.Event, Swift.String, WiFiWirelessSDK.Content?) -> Swift.Void)? = nil, onPublishStateChanged: ((WiFiWirelessSDK.Core, WiFiWirelessSDK.Event, WiFiWirelessSDK.PublishState) -> Swift.Void)? = nil, onPublishReceived: ((WiFiWirelessSDK.Core, WiFiWirelessSDK.Event, Swift.String, WiFiWirelessSDK.Content?) -> Swift.Void)? = nil, onConfiguringStatus: ((WiFiWirelessSDK.Core, WiFiWirelessSDK.Config.ConfiguringState, Swift.String) -> Swift.Void)? = nil, onNetworkReachable: ((WiFiWirelessSDK.Core, Swift.Bool) -> Swift.Void)? = nil, onLogCollectionUploadStateChanged: ((WiFiWirelessSDK.Core, WiFiWirelessSDK.Core.LogCollectionUploadState, Swift.String) -> Swift.Void)? = nil, onLogCollectionUploadProgressIndication: ((WiFiWirelessSDK.Core, Swift.Int, Swift.Int) -> Swift.Void)? = nil, onFriendListCreated: ((WiFiWirelessSDK.Core, WiFiWirelessSDK.FriendList) -> Swift.Void)? = nil, onFriendListRemoved: ((WiFiWirelessSDK.Core, WiFiWirelessSDK.FriendList) -> Swift.Void)? = nil, onCallCreated: ((WiFiWirelessSDK.Core, WiFiWirelessSDK.Call) -> Swift.Void)? = nil, onVersionUpdateCheckResultReceived: ((WiFiWirelessSDK.Core, WiFiWirelessSDK.VersionUpdateCheckResult, Swift.String, Swift.String) -> Swift.Void)? = nil, onConferenceStateChanged: ((WiFiWirelessSDK.Core, WiFiWirelessSDK.Conference, WiFiWirelessSDK.Conference.State) -> Swift.Void)? = nil, onChatRoomStateChanged: ((WiFiWirelessSDK.Core, WiFiWirelessSDK.ChatRoom, WiFiWirelessSDK.ChatRoom.State) -> Swift.Void)? = nil, onChatRoomSubjectChanged: ((WiFiWirelessSDK.Core, WiFiWirelessSDK.ChatRoom) -> Swift.Void)? = nil, onChatRoomEphemeralMessageDeleted: ((WiFiWirelessSDK.Core, WiFiWirelessSDK.ChatRoom) -> Swift.Void)? = nil, onImeeUserRegistration: ((WiFiWirelessSDK.Core, Swift.Bool, Swift.String, Swift.String) -> Swift.Void)? = nil, onQrcodeFound: ((WiFiWirelessSDK.Core, Swift.String) -> Swift.Void)? = nil, onFirstCallStarted: ((WiFiWirelessSDK.Core) -> Swift.Void)? = nil, onLastCallEnded: ((WiFiWirelessSDK.Core) -> Swift.Void)? = nil, onAudioDeviceChanged: ((WiFiWirelessSDK.Core, WiFiWirelessSDK.AudioDevice) -> Swift.Void)? = nil, onAudioDevicesListUpdated: ((WiFiWirelessSDK.Core) -> Swift.Void)? = nil, onEcCalibrationResult: ((WiFiWirelessSDK.Core, WiFiWirelessSDK.EcCalibratorStatus, Swift.Int) -> Swift.Void)? = nil, onEcCalibrationAudioInit: ((WiFiWirelessSDK.Core) -> Swift.Void)? = nil, onEcCalibrationAudioUninit: ((WiFiWirelessSDK.Core) -> Swift.Void)? = nil, onAccountRegistrationStateChanged: ((WiFiWirelessSDK.Core, WiFiWirelessSDK.Account, WiFiWirelessSDK.RegistrationState, Swift.String) -> Swift.Void)? = nil, onDefaultAccountChanged: ((WiFiWirelessSDK.Core, WiFiWirelessSDK.Account?) -> Swift.Void)? = nil, onAccountAdded: ((WiFiWirelessSDK.Core, WiFiWirelessSDK.Account) -> Swift.Void)? = nil, onAccountRemoved: ((WiFiWirelessSDK.Core, WiFiWirelessSDK.Account) -> Swift.Void)? = nil)
  @objc deinit
}
public protocol EventDelegate : AnyObject {
  func onNotifyResponse(linphoneEvent: WiFiWirelessSDK.Event)
}
extension WiFiWirelessSDK.EventDelegate {
  public func onNotifyResponse(linphoneEvent: WiFiWirelessSDK.Event)
}
final public class EventDelegateStub : WiFiWirelessSDK.EventDelegate {
  final public func onNotifyResponse(linphoneEvent: WiFiWirelessSDK.Event)
  public init(onNotifyResponse: ((WiFiWirelessSDK.Event) -> Swift.Void)? = nil)
  @objc deinit
}
public protocol FriendDelegate : AnyObject {
  func onPresenceReceived(linphoneFriend: WiFiWirelessSDK.Friend)
}
extension WiFiWirelessSDK.FriendDelegate {
  public func onPresenceReceived(linphoneFriend: WiFiWirelessSDK.Friend)
}
final public class FriendDelegateStub : WiFiWirelessSDK.FriendDelegate {
  final public func onPresenceReceived(linphoneFriend: WiFiWirelessSDK.Friend)
  public init(onPresenceReceived: ((WiFiWirelessSDK.Friend) -> Swift.Void)? = nil)
  @objc deinit
}
public protocol FriendListDelegate : AnyObject {
  func onContactCreated(friendList: WiFiWirelessSDK.FriendList, linphoneFriend: WiFiWirelessSDK.Friend)
  func onContactDeleted(friendList: WiFiWirelessSDK.FriendList, linphoneFriend: WiFiWirelessSDK.Friend)
  func onContactUpdated(friendList: WiFiWirelessSDK.FriendList, newFriend: WiFiWirelessSDK.Friend, oldFriend: WiFiWirelessSDK.Friend)
  func onSyncStatusChanged(friendList: WiFiWirelessSDK.FriendList, status: WiFiWirelessSDK.FriendList.SyncStatus, message: Swift.String)
  func onPresenceReceived(friendList: WiFiWirelessSDK.FriendList, friends: [WiFiWirelessSDK.Friend])
}
extension WiFiWirelessSDK.FriendListDelegate {
  public func onContactCreated(friendList: WiFiWirelessSDK.FriendList, linphoneFriend: WiFiWirelessSDK.Friend)
  public func onContactDeleted(friendList: WiFiWirelessSDK.FriendList, linphoneFriend: WiFiWirelessSDK.Friend)
  public func onContactUpdated(friendList: WiFiWirelessSDK.FriendList, newFriend: WiFiWirelessSDK.Friend, oldFriend: WiFiWirelessSDK.Friend)
  public func onSyncStatusChanged(friendList: WiFiWirelessSDK.FriendList, status: WiFiWirelessSDK.FriendList.SyncStatus, message: Swift.String)
  public func onPresenceReceived(friendList: WiFiWirelessSDK.FriendList, friends: [WiFiWirelessSDK.Friend])
}
final public class FriendListDelegateStub : WiFiWirelessSDK.FriendListDelegate {
  final public func onContactCreated(friendList: WiFiWirelessSDK.FriendList, linphoneFriend: WiFiWirelessSDK.Friend)
  final public func onContactDeleted(friendList: WiFiWirelessSDK.FriendList, linphoneFriend: WiFiWirelessSDK.Friend)
  final public func onContactUpdated(friendList: WiFiWirelessSDK.FriendList, newFriend: WiFiWirelessSDK.Friend, oldFriend: WiFiWirelessSDK.Friend)
  final public func onSyncStatusChanged(friendList: WiFiWirelessSDK.FriendList, status: WiFiWirelessSDK.FriendList.SyncStatus, message: Swift.String)
  final public func onPresenceReceived(friendList: WiFiWirelessSDK.FriendList, friends: [WiFiWirelessSDK.Friend])
  public init(onContactCreated: ((WiFiWirelessSDK.FriendList, WiFiWirelessSDK.Friend) -> Swift.Void)? = nil, onContactDeleted: ((WiFiWirelessSDK.FriendList, WiFiWirelessSDK.Friend) -> Swift.Void)? = nil, onContactUpdated: ((WiFiWirelessSDK.FriendList, WiFiWirelessSDK.Friend, WiFiWirelessSDK.Friend) -> Swift.Void)? = nil, onSyncStatusChanged: ((WiFiWirelessSDK.FriendList, WiFiWirelessSDK.FriendList.SyncStatus, Swift.String) -> Swift.Void)? = nil, onPresenceReceived: ((WiFiWirelessSDK.FriendList, [WiFiWirelessSDK.Friend]) -> Swift.Void)? = nil)
  @objc deinit
}
public protocol LoggingServiceDelegate : AnyObject {
  func onLogMessageWritten(logService: WiFiWirelessSDK.LoggingService, domain: Swift.String, level: WiFiWirelessSDK.LogLevel, message: Swift.String)
}
extension WiFiWirelessSDK.LoggingServiceDelegate {
  public func onLogMessageWritten(logService: WiFiWirelessSDK.LoggingService, domain: Swift.String, level: WiFiWirelessSDK.LogLevel, message: Swift.String)
}
final public class LoggingServiceDelegateStub : WiFiWirelessSDK.LoggingServiceDelegate {
  final public func onLogMessageWritten(logService: WiFiWirelessSDK.LoggingService, domain: Swift.String, level: WiFiWirelessSDK.LogLevel, message: Swift.String)
  public init(onLogMessageWritten: ((WiFiWirelessSDK.LoggingService, Swift.String, WiFiWirelessSDK.LogLevel, Swift.String) -> Swift.Void)? = nil)
  @objc deinit
}
public protocol MagicSearchDelegate : AnyObject {
  func onSearchResultsReceived(magicSearch: WiFiWirelessSDK.MagicSearch)
  func onLdapHaveMoreResults(magicSearch: WiFiWirelessSDK.MagicSearch, ldap: WiFiWirelessSDK.Ldap)
}
extension WiFiWirelessSDK.MagicSearchDelegate {
  public func onSearchResultsReceived(magicSearch: WiFiWirelessSDK.MagicSearch)
  public func onLdapHaveMoreResults(magicSearch: WiFiWirelessSDK.MagicSearch, ldap: WiFiWirelessSDK.Ldap)
}
final public class MagicSearchDelegateStub : WiFiWirelessSDK.MagicSearchDelegate {
  final public func onSearchResultsReceived(magicSearch: WiFiWirelessSDK.MagicSearch)
  final public func onLdapHaveMoreResults(magicSearch: WiFiWirelessSDK.MagicSearch, ldap: WiFiWirelessSDK.Ldap)
  public init(onSearchResultsReceived: ((WiFiWirelessSDK.MagicSearch) -> Swift.Void)? = nil, onLdapHaveMoreResults: ((WiFiWirelessSDK.MagicSearch, WiFiWirelessSDK.Ldap) -> Swift.Void)? = nil)
  @objc deinit
}
public protocol ParticipantDeviceDelegate : AnyObject {
  func onIsSpeakingChanged(participantDevice: WiFiWirelessSDK.ParticipantDevice, isSpeaking: Swift.Bool)
  func onIsMuted(participantDevice: WiFiWirelessSDK.ParticipantDevice, isMuted: Swift.Bool)
  func onStateChanged(participantDevice: WiFiWirelessSDK.ParticipantDevice, state: WiFiWirelessSDK.ParticipantDevice.State)
  func onStreamCapabilityChanged(participantDevice: WiFiWirelessSDK.ParticipantDevice, direction: WiFiWirelessSDK.MediaDirection, streamType: WiFiWirelessSDK.StreamType)
  func onStreamAvailabilityChanged(participantDevice: WiFiWirelessSDK.ParticipantDevice, available: Swift.Bool, streamType: WiFiWirelessSDK.StreamType)
  func onVideoDisplayErrorOccurred(participantDevice: WiFiWirelessSDK.ParticipantDevice, errorCode: Swift.Int)
}
extension WiFiWirelessSDK.ParticipantDeviceDelegate {
  public func onIsSpeakingChanged(participantDevice: WiFiWirelessSDK.ParticipantDevice, isSpeaking: Swift.Bool)
  public func onIsMuted(participantDevice: WiFiWirelessSDK.ParticipantDevice, isMuted: Swift.Bool)
  public func onStateChanged(participantDevice: WiFiWirelessSDK.ParticipantDevice, state: WiFiWirelessSDK.ParticipantDevice.State)
  public func onStreamCapabilityChanged(participantDevice: WiFiWirelessSDK.ParticipantDevice, direction: WiFiWirelessSDK.MediaDirection, streamType: WiFiWirelessSDK.StreamType)
  public func onStreamAvailabilityChanged(participantDevice: WiFiWirelessSDK.ParticipantDevice, available: Swift.Bool, streamType: WiFiWirelessSDK.StreamType)
  public func onVideoDisplayErrorOccurred(participantDevice: WiFiWirelessSDK.ParticipantDevice, errorCode: Swift.Int)
}
final public class ParticipantDeviceDelegateStub : WiFiWirelessSDK.ParticipantDeviceDelegate {
  final public func onIsSpeakingChanged(participantDevice: WiFiWirelessSDK.ParticipantDevice, isSpeaking: Swift.Bool)
  final public func onIsMuted(participantDevice: WiFiWirelessSDK.ParticipantDevice, isMuted: Swift.Bool)
  final public func onStateChanged(participantDevice: WiFiWirelessSDK.ParticipantDevice, state: WiFiWirelessSDK.ParticipantDevice.State)
  final public func onStreamCapabilityChanged(participantDevice: WiFiWirelessSDK.ParticipantDevice, direction: WiFiWirelessSDK.MediaDirection, streamType: WiFiWirelessSDK.StreamType)
  final public func onStreamAvailabilityChanged(participantDevice: WiFiWirelessSDK.ParticipantDevice, available: Swift.Bool, streamType: WiFiWirelessSDK.StreamType)
  final public func onVideoDisplayErrorOccurred(participantDevice: WiFiWirelessSDK.ParticipantDevice, errorCode: Swift.Int)
  public init(onIsSpeakingChanged: ((WiFiWirelessSDK.ParticipantDevice, Swift.Bool) -> Swift.Void)? = nil, onIsMuted: ((WiFiWirelessSDK.ParticipantDevice, Swift.Bool) -> Swift.Void)? = nil, onStateChanged: ((WiFiWirelessSDK.ParticipantDevice, WiFiWirelessSDK.ParticipantDevice.State) -> Swift.Void)? = nil, onStreamCapabilityChanged: ((WiFiWirelessSDK.ParticipantDevice, WiFiWirelessSDK.MediaDirection, WiFiWirelessSDK.StreamType) -> Swift.Void)? = nil, onStreamAvailabilityChanged: ((WiFiWirelessSDK.ParticipantDevice, Swift.Bool, WiFiWirelessSDK.StreamType) -> Swift.Void)? = nil, onVideoDisplayErrorOccurred: ((WiFiWirelessSDK.ParticipantDevice, Swift.Int) -> Swift.Void)? = nil)
  @objc deinit
}
public protocol PlayerDelegate : AnyObject {
  func onEofReached(player: WiFiWirelessSDK.Player)
}
extension WiFiWirelessSDK.PlayerDelegate {
  public func onEofReached(player: WiFiWirelessSDK.Player)
}
final public class PlayerDelegateStub : WiFiWirelessSDK.PlayerDelegate {
  final public func onEofReached(player: WiFiWirelessSDK.Player)
  public init(onEofReached: ((WiFiWirelessSDK.Player) -> Swift.Void)? = nil)
  @objc deinit
}
public protocol XmlRpcRequestDelegate : AnyObject {
  func onResponse(request: WiFiWirelessSDK.XmlRpcRequest)
}
extension WiFiWirelessSDK.XmlRpcRequestDelegate {
  public func onResponse(request: WiFiWirelessSDK.XmlRpcRequest)
}
final public class XmlRpcRequestDelegateStub : WiFiWirelessSDK.XmlRpcRequestDelegate {
  final public func onResponse(request: WiFiWirelessSDK.XmlRpcRequest)
  public init(onResponse: ((WiFiWirelessSDK.XmlRpcRequest) -> Swift.Void)? = nil)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class Account : WiFiWirelessSDK.LinphoneObject {
  public static func getSwiftObject(cObject: Swift.OpaquePointer) -> WiFiWirelessSDK.Account
  public var getCobject: Swift.OpaquePointer? {
    get
  }
  public func addDelegate(delegate: any WiFiWirelessSDK.AccountDelegate)
  public func removeDelegate(delegate: any WiFiWirelessSDK.AccountDelegate)
  public static func newWithConfig(lc: WiFiWirelessSDK.Core?, params: WiFiWirelessSDK.AccountParams, config: WiFiWirelessSDK.ProxyConfig?) -> WiFiWirelessSDK.Account?
  public var avpfEnabled: Swift.Bool {
    get
  }
  public var callLogs: [WiFiWirelessSDK.CallLog] {
    get
  }
  public var chatRooms: [WiFiWirelessSDK.ChatRoom] {
    get
  }
  public var conferenceInformationList: [WiFiWirelessSDK.ConferenceInfo] {
    get
  }
  public var contactAddress: WiFiWirelessSDK.Address? {
    get
    set
  }
  public var core: WiFiWirelessSDK.Core? {
    get
  }
  public var currentDelegate: (any WiFiWirelessSDK.AccountDelegate)? {
    get
  }
  public var dependency: WiFiWirelessSDK.Account? {
    get
    set
  }
  public var error: WiFiWirelessSDK.Reason {
    get
  }
  public var errorInfo: WiFiWirelessSDK.ErrorInfo? {
    get
  }
  @available(*, deprecated)
  public var isAvpfEnabled: Swift.Bool {
    get
  }
  public var missedCallsCount: Swift.Int {
    get
  }
  public var params: WiFiWirelessSDK.AccountParams? {
    get
    set
  }
  public var state: WiFiWirelessSDK.RegistrationState {
    get
  }
  @available(*, deprecated)
  public var transport: WiFiWirelessSDK.TransportType {
    get
  }
  public var unreadChatMessageCount: Swift.Int {
    get
  }
  public var userData: Swift.UnsafeMutableRawPointer? {
    get
    set
  }
  public func addCustomParam(key: Swift.String, value: Swift.String)
  public func clearCallLogs()
  public func clone() -> WiFiWirelessSDK.Account?
  public func findAuthInfo() -> WiFiWirelessSDK.AuthInfo?
  public func getCallLogsForAddress(remoteAddress: WiFiWirelessSDK.Address) -> [WiFiWirelessSDK.CallLog]
  public func getCustomHeader(headerName: Swift.String) -> Swift.String
  public func getCustomParam(key: Swift.String) -> Swift.String
  public func isPhoneNumber(username: Swift.String) -> Swift.Bool
  public func normalizePhoneNumber(username: Swift.String) -> Swift.String
  public func normalizeSipUri(username: Swift.String) -> WiFiWirelessSDK.Address?
  public func pauseRegister()
  public func refreshRegister()
  public func resetMissedCallsCount()
  public func setCustomHeader(headerName: Swift.String, headerValue: Swift.String?)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class AccountCreator : WiFiWirelessSDK.LinphoneObject {
  public static func getSwiftObject(cObject: Swift.OpaquePointer) -> WiFiWirelessSDK.AccountCreator
  public var getCobject: Swift.OpaquePointer? {
    get
  }
  public enum Status : Swift.Int {
    case RequestOk
    case RequestFailed
    case MissingArguments
    case MissingCallbacks
    case AccountCreated
    case AccountNotCreated
    case AccountExist
    case AccountExistWithAlias
    case AccountNotExist
    case AliasIsAccount
    case AliasExist
    case AliasNotExist
    case AccountActivated
    case AccountAlreadyActivated
    case AccountNotActivated
    case AccountLinked
    case AccountNotLinked
    case ServerError
    case PhoneNumberInvalid
    case WrongActivationCode
    case PhoneNumberOverused
    case AlgoNotSupported
    case UnexpectedError
    case NotImplementedError
    case RequestNotAuthorized
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum TransportStatus : Swift.Int {
    case Ok
    case Unsupported
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum DomainStatus : Swift.Int {
    case Ok
    case Invalid
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum ActivationCodeStatus : Swift.Int {
    case Ok
    case TooShort
    case TooLong
    case InvalidCharacters
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum AlgoStatus : Swift.Int {
    case Ok
    case NotSupported
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum LanguageStatus : Swift.Int {
    case Ok
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum PasswordStatus : Swift.Int {
    case Ok
    case TooShort
    case TooLong
    case InvalidCharacters
    case MissingCharacters
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum EmailStatus : Swift.Int {
    case Ok
    case Malformed
    case InvalidCharacters
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum UsernameStatus : Swift.Int {
    case Ok
    case TooShort
    case TooLong
    case InvalidCharacters
    case Invalid
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum Backend : Swift.Int {
    case XMLRPC
    case FlexiAPI
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum PhoneNumberStatus : Swift.Int {
    case Ok
    case TooShort
    case TooLong
    case InvalidCountryCode
    case Invalid
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public func addDelegate(delegate: any WiFiWirelessSDK.AccountCreatorDelegate)
  public func removeDelegate(delegate: any WiFiWirelessSDK.AccountCreatorDelegate)
  public static func create(core: WiFiWirelessSDK.Core) throws -> WiFiWirelessSDK.AccountCreator
  public var accountCreationRequestToken: Swift.String? {
    get
    set
  }
  public var activationCode: Swift.String? {
    get
    set
  }
  public var algorithm: Swift.String? {
    get
    set
  }
  public var asDefault: Swift.Bool? {
    get
    set
  }
  public var currentDelegate: (any WiFiWirelessSDK.AccountCreatorDelegate)? {
    get
  }
  public var displayName: Swift.String? {
    get
    set
  }
  public var domain: Swift.String? {
    get
    set
  }
  public var email: Swift.String? {
    get
    set
  }
  public var ha1: Swift.String? {
    get
    set
  }
  public var language: Swift.String? {
    get
    set
  }
  public var password: Swift.String? {
    get
    set
  }
  public var phoneCountryCode: Swift.String? {
    get
  }
  public var phoneNumber: Swift.String? {
    get
  }
  public var pnParam: Swift.String? {
    get
    set
  }
  public var pnPrid: Swift.String? {
    get
    set
  }
  public var pnProvider: Swift.String? {
    get
    set
  }
  public var proxyConfig: WiFiWirelessSDK.ProxyConfig? {
    get
    set
  }
  public var setAsDefault: Swift.Bool {
    get
  }
  public var token: Swift.String? {
    get
    set
  }
  public var transport: WiFiWirelessSDK.TransportType {
    get
    set
  }
  public var userData: Swift.UnsafeMutableRawPointer? {
    get
    set
  }
  public var username: Swift.String? {
    get
    set
  }
  public func activateAccount() -> WiFiWirelessSDK.AccountCreator.Status
  public func activateAlias() -> WiFiWirelessSDK.AccountCreator.Status
  public func createAccount() throws -> WiFiWirelessSDK.AccountCreator.Status
  public func createAccountInCore() throws -> WiFiWirelessSDK.Account
  @available(*, deprecated)
  public func createProxyConfig() throws -> WiFiWirelessSDK.ProxyConfig
  public func isAccountActivated() -> WiFiWirelessSDK.AccountCreator.Status
  public func isAccountExist() -> WiFiWirelessSDK.AccountCreator.Status
  public func isAccountLinked() -> WiFiWirelessSDK.AccountCreator.Status
  public func isAliasUsed() -> WiFiWirelessSDK.AccountCreator.Status
  public func linkAccount() -> WiFiWirelessSDK.AccountCreator.Status
  public func loginLinphoneAccount() -> WiFiWirelessSDK.AccountCreator.Status
  public func recoverAccount() -> WiFiWirelessSDK.AccountCreator.Status
  public func requestAccountCreationRequestToken() -> WiFiWirelessSDK.AccountCreator.Status
  public func requestAccountCreationTokenUsingRequestToken() -> WiFiWirelessSDK.AccountCreator.Status
  public func requestAuthToken() -> WiFiWirelessSDK.AccountCreator.Status
  public func reset()
  public func setPhoneNumber(phoneNumber: Swift.String?, countryCode: Swift.String?) -> Swift.UInt
  public func updateAccount() -> WiFiWirelessSDK.AccountCreator.Status
  public func useTestAdminAccount()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class AccountParams : WiFiWirelessSDK.LinphoneObject {
  public static func getSwiftObject(cObject: Swift.OpaquePointer) -> WiFiWirelessSDK.AccountParams
  public var getCobject: Swift.OpaquePointer? {
    get
  }
  public static func newWithConfig(lc: WiFiWirelessSDK.Core, index: Swift.Int) -> WiFiWirelessSDK.AccountParams?
  public var audioVideoConferenceFactoryAddress: WiFiWirelessSDK.Address? {
    get
    set
  }
  public var avpfMode: WiFiWirelessSDK.AVPFMode {
    get
    set
  }
  public var avpfRrInterval: Swift.UInt8 {
    get
    set
  }
  public var conferenceFactoryAddress: WiFiWirelessSDK.Address? {
    get
    set
  }
  public var conferenceFactoryUri: Swift.String? {
    get
    @available(*, deprecated)
    set
  }
  public var contactParameters: Swift.String? {
    get
    set
  }
  public var contactUriParameters: Swift.String? {
    get
    set
  }
  public var cpimInBasicChatRoomEnabled: Swift.Bool {
    get
    set
  }
  public var customContact: WiFiWirelessSDK.Address? {
    get
    set
  }
  public var dialEscapePlusEnabled: Swift.Bool {
    get
    set
  }
  public var domain: Swift.String? {
    get
  }
  public var expires: Swift.Int {
    get
    set
  }
  @available(*, deprecated)
  public var identity: Swift.String? {
    get
  }
  public var identityAddress: WiFiWirelessSDK.Address? {
    get
  }
  public func setIdentityaddress(newValue: WiFiWirelessSDK.Address) throws
  public var idkey: Swift.String? {
    get
    set
  }
  public var internationalPrefix: Swift.String? {
    get
    set
  }
  public var isPushNotificationAvailable: Swift.Bool {
    get
  }
  public var limeServerUrl: Swift.String? {
    get
    set
  }
  public var natPolicy: WiFiWirelessSDK.NatPolicy? {
    get
    set
  }
  public var outboundProxyEnabled: Swift.Bool {
    get
    set
  }
  public var pictureUri: Swift.String? {
    get
    set
  }
  public var privacy: Swift.UInt {
    get
    set
  }
  public var publishEnabled: Swift.Bool {
    get
    set
  }
  public var publishExpires: Swift.Int {
    get
    set
  }
  public var pushNotificationAllowed: Swift.Bool {
    get
    set
  }
  public var pushNotificationConfig: WiFiWirelessSDK.PushNotificationConfig? {
    get
    set
  }
  public var qualityReportingCollector: Swift.String? {
    get
    set
  }
  public var qualityReportingEnabled: Swift.Bool {
    get
    set
  }
  public var qualityReportingInterval: Swift.Int {
    get
    set
  }
  public var realm: Swift.String? {
    get
    set
  }
  public var refKey: Swift.String? {
    get
    set
  }
  public var registerEnabled: Swift.Bool {
    get
    set
  }
  public var remotePushNotificationAllowed: Swift.Bool {
    get
    set
  }
  public var routesAddresses: [WiFiWirelessSDK.Address] {
    get
  }
  public func setRoutesaddresses(newValue: [WiFiWirelessSDK.Address]) throws
  public var rtpBundleAssumptionEnabled: Swift.Bool {
    get
    set
  }
  public var rtpBundleEnabled: Swift.Bool {
    get
    set
  }
  @available(*, deprecated)
  public var serverAddr: Swift.String? {
    get
  }
  @available(*, deprecated)
  public func setServeraddr(newValue: Swift.String) throws
  public var serverAddress: WiFiWirelessSDK.Address? {
    get
  }
  public func setServeraddress(newValue: WiFiWirelessSDK.Address) throws
  public var transport: WiFiWirelessSDK.TransportType {
    get
    set
  }
  public var useInternationalPrefixForCallsAndChats: Swift.Bool {
    get
    set
  }
  public var userData: Swift.UnsafeMutableRawPointer? {
    get
    set
  }
  public func addCustomParam(key: Swift.String, value: Swift.String)
  public func clone() -> WiFiWirelessSDK.AccountParams?
  public func getCustomParam(key: Swift.String) -> Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class Address : WiFiWirelessSDK.LinphoneObject {
  public static func getSwiftObject(cObject: Swift.OpaquePointer) -> WiFiWirelessSDK.Address
  public var getCobject: Swift.OpaquePointer? {
    get
  }
  public enum Family : Swift.Int {
    case Inet
    case Inet6
    case Unspec
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public var displayName: Swift.String? {
    get
  }
  public func setDisplayname(newValue: Swift.String) throws
  public var domain: Swift.String? {
    get
  }
  public func setDomain(newValue: Swift.String) throws
  public var isSip: Swift.Bool {
    get
  }
  public var isValid: Swift.Bool? {
    get
  }
  public var methodParam: Swift.String? {
    get
    set
  }
  public var password: Swift.String? {
    get
    set
  }
  public var port: Swift.Int {
    get
  }
  public func setPort(newValue: Swift.Int) throws
  public var scheme: Swift.String? {
    get
  }
  public var secure: Swift.Bool {
    get
    set
  }
  public var transport: WiFiWirelessSDK.TransportType {
    get
  }
  public func setTransport(newValue: WiFiWirelessSDK.TransportType) throws
  public var uriParams: Swift.String {
    get
    set
  }
  public var username: Swift.String? {
    get
  }
  public func setUsername(newValue: Swift.String) throws
  public func asString() -> Swift.String
  public func asStringUriOnly() -> Swift.String
  public func clean()
  public func clone() -> WiFiWirelessSDK.Address?
  public func equal(address2: WiFiWirelessSDK.Address) -> Swift.Bool
  public func getHeader(headerName: Swift.String) -> Swift.String
  public func getParam(paramName: Swift.String) -> Swift.String
  public func getUriParam(uriParamName: Swift.String) -> Swift.String
  public func hasParam(paramName: Swift.String) -> Swift.Bool
  public func hasUriParam(uriParamName: Swift.String) -> Swift.Bool
  public func removeUriParam(uriParamName: Swift.String)
  public func setHeader(headerName: Swift.String, headerValue: Swift.String?)
  public func setParam(paramName: Swift.String, paramValue: Swift.String?)
  public func setUriParam(uriParamName: Swift.String, uriParamValue: Swift.String?)
  public func weakEqual(address2: WiFiWirelessSDK.Address) -> Swift.Bool
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class Alert : WiFiWirelessSDK.LinphoneObject {
  public static func getSwiftObject(cObject: Swift.OpaquePointer) -> WiFiWirelessSDK.Alert
  public var getCobject: Swift.OpaquePointer? {
    get
  }
  public enum Kind : Swift.Int {
    case QoSCameraMisfunction
    case QoSCameraLowFramerate
    case QoSVideoStalled
    case QoSHighLossLateRate
    case QoSHighRemoteLossRate
    case QoSBurstOccured
    case QoSRetransmissionFailures
    case QoSLowDownloadBandwidthEstimation
    case QoSLowQualityReceivedVideo
    case QoSLowQualitySentVideo
    case QoSLowSignal
    case QoSLostSignal
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public func addDelegate(delegate: any WiFiWirelessSDK.AlertDelegate)
  public func removeDelegate(delegate: any WiFiWirelessSDK.AlertDelegate)
  public static func typeToString(type: WiFiWirelessSDK.Alert.Kind) -> Swift.String
  public var call: WiFiWirelessSDK.Call? {
    get
  }
  public var currentDelegate: (any WiFiWirelessSDK.AlertDelegate)? {
    get
  }
  public var endTime: Darwin.time_t {
    get
  }
  public var informations: WiFiWirelessSDK.Dictionary? {
    get
  }
  public var startTime: Darwin.time_t {
    get
  }
  public var state: Swift.Bool {
    get
  }
  public var type: WiFiWirelessSDK.Alert.Kind {
    get
  }
  public func clone() -> WiFiWirelessSDK.Alert?
  public func notifyOnTerminated()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class AudioDevice : WiFiWirelessSDK.LinphoneObject {
  public static func getSwiftObject(cObject: Swift.OpaquePointer) -> WiFiWirelessSDK.AudioDevice
  public var getCobject: Swift.OpaquePointer? {
    get
  }
  public struct Capabilities : Swift.OptionSet {
    public let rawValue: Swift.Int
    public init(rawValue: Swift.Int)
    public static let CapabilityRecord: WiFiWirelessSDK.AudioDevice.Capabilities
    public static let CapabilityPlay: WiFiWirelessSDK.AudioDevice.Capabilities
    public static let CapabilityAll: WiFiWirelessSDK.AudioDevice.Capabilities
    public typealias ArrayLiteralElement = WiFiWirelessSDK.AudioDevice.Capabilities
    public typealias Element = WiFiWirelessSDK.AudioDevice.Capabilities
    public typealias RawValue = Swift.Int
  }
  public enum Kind : Swift.Int {
    case Unknown
    case Microphone
    case Earpiece
    case Speaker
    case Bluetooth
    case BluetoothA2DP
    case Telephony
    case AuxLine
    case GenericUsb
    case Headset
    case Headphones
    case HearingAid
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public var capabilities: WiFiWirelessSDK.AudioDevice.Capabilities {
    get
  }
  public var deviceName: Swift.String {
    get
  }
  public var driverName: Swift.String {
    get
  }
  public var id: Swift.String {
    get
  }
  public var type: WiFiWirelessSDK.AudioDevice.Kind {
    get
  }
  public func hasCapability(capability: WiFiWirelessSDK.AudioDevice.Capabilities) -> Swift.Bool
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class AuthInfo : WiFiWirelessSDK.LinphoneObject {
  public static func getSwiftObject(cObject: Swift.OpaquePointer) -> WiFiWirelessSDK.AuthInfo
  public var getCobject: Swift.OpaquePointer? {
    get
  }
  public var algorithm: Swift.String? {
    get
    set
  }
  public var availableAlgorithms: [Swift.String] {
    get
    set
  }
  public var domain: Swift.String? {
    get
    set
  }
  public var ha1: Swift.String? {
    get
    set
  }
  public var password: Swift.String? {
    get
    set
  }
  public var realm: Swift.String? {
    get
    set
  }
  public var tlsCert: Swift.String? {
    get
    set
  }
  public var tlsCertPath: Swift.String? {
    get
    set
  }
  public var tlsKey: Swift.String? {
    get
    set
  }
  public var tlsKeyPath: Swift.String? {
    get
    set
  }
  public var userid: Swift.String? {
    get
    set
  }
  public var username: Swift.String? {
    get
    set
  }
  public func addAvailableAlgorithm(algorithm: Swift.String?)
  public func clearAvailableAlgorithms()
  public func clone() -> WiFiWirelessSDK.AuthInfo?
  public func isEqualButAlgorithms(authInfo2: WiFiWirelessSDK.AuthInfo?) -> Swift.Bool
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class Buffer : WiFiWirelessSDK.LinphoneObject {
  public static func getSwiftObject(cObject: Swift.OpaquePointer) -> WiFiWirelessSDK.Buffer
  public var getCobject: Swift.OpaquePointer? {
    get
  }
  public static func newFromData(data: Swift.UnsafePointer<Swift.UInt8>, size: Swift.Int) -> WiFiWirelessSDK.Buffer?
  public static func newFromString(data: Swift.String) -> WiFiWirelessSDK.Buffer?
  public var content: Swift.UnsafePointer<Swift.UInt8> {
    get
  }
  public var isEmpty: Swift.Bool {
    get
  }
  public var size: Swift.Int {
    get
    set
  }
  public var stringContent: Swift.String {
    get
    set
  }
  public var userData: Swift.UnsafeMutableRawPointer? {
    get
    set
  }
  public func setContent(content: Swift.UnsafePointer<Swift.UInt8>, size: Swift.Int)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class Call : WiFiWirelessSDK.LinphoneObject {
  public static func getSwiftObject(cObject: Swift.OpaquePointer) -> WiFiWirelessSDK.Call
  public var getCobject: Swift.OpaquePointer? {
    get
  }
  public enum Status : Swift.Int {
    case Success
    case Aborted
    case Missed
    case Declined
    case EarlyAborted
    case AcceptedElsewhere
    case DeclinedElsewhere
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum Dir : Swift.Int {
    case Outgoing
    case Incoming
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum State : Swift.Int {
    case Idle
    case IncomingReceived
    case PushIncomingReceived
    case OutgoingInit
    case OutgoingProgress
    case OutgoingRinging
    case OutgoingEarlyMedia
    case Connected
    case StreamsRunning
    case Pausing
    case Paused
    case Resuming
    case Referred
    case Error
    case End
    case PausedByRemote
    case UpdatedByRemote
    case IncomingEarlyMedia
    case Updating
    case Released
    case EarlyUpdatedByRemote
    case EarlyUpdating
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public func addDelegate(delegate: any WiFiWirelessSDK.CallDelegate)
  public func removeDelegate(delegate: any WiFiWirelessSDK.CallDelegate)
  public var audioStats: WiFiWirelessSDK.CallStats? {
    get
  }
  public var authenticationToken: Swift.String? {
    get
  }
  public var authenticationTokenVerified: Swift.Bool {
    get
    set
  }
  public var averageQuality: Swift.Float {
    get
  }
  public var callLog: WiFiWirelessSDK.CallLog? {
    get
  }
  public var cameraEnabled: Swift.Bool {
    get
    set
  }
  public var chatRoom: WiFiWirelessSDK.ChatRoom? {
    get
  }
  public var conference: WiFiWirelessSDK.Conference? {
    get
  }
  public var core: WiFiWirelessSDK.Core? {
    get
  }
  public var currentDelegate: (any WiFiWirelessSDK.CallDelegate)? {
    get
  }
  public var currentParams: WiFiWirelessSDK.CallParams? {
    get
  }
  public var currentQuality: Swift.Float {
    get
  }
  public var dir: WiFiWirelessSDK.Call.Dir {
    get
  }
  public var diversionAddress: WiFiWirelessSDK.Address? {
    get
  }
  public var duration: Swift.Int {
    get
  }
  public var echoCancellationEnabled: Swift.Bool {
    get
    set
  }
  public var echoLimiterEnabled: Swift.Bool {
    get
    set
  }
  public var errorInfo: WiFiWirelessSDK.ErrorInfo? {
    get
  }
  public var inputAudioDevice: WiFiWirelessSDK.AudioDevice? {
    get
    set
  }
  @available(*, deprecated)
  public var isRecording: Swift.Bool {
    get
  }
  public var microphoneMuted: Swift.Bool {
    get
    set
  }
  public var microphoneVolumeGain: Swift.Float {
    get
    set
  }
  public var nativeVideoWindowId: Swift.UnsafeMutableRawPointer? {
    get
    set
  }
  public var outputAudioDevice: WiFiWirelessSDK.AudioDevice? {
    get
    set
  }
  public var params: WiFiWirelessSDK.CallParams? {
    get
    set
  }
  public var playVolume: Swift.Float {
    get
  }
  public var player: WiFiWirelessSDK.Player? {
    get
  }
  public var reason: WiFiWirelessSDK.Reason {
    get
  }
  public var recordVolume: Swift.Float {
    get
  }
  public var referTo: Swift.String? {
    get
  }
  public var remoteAddress: WiFiWirelessSDK.Address? {
    get
  }
  @available(*, deprecated)
  public var remoteAddressAsString: Swift.String? {
    get
  }
  public var remoteContact: Swift.String? {
    get
  }
  public var remoteContactAddress: WiFiWirelessSDK.Address? {
    get
  }
  public var remoteParams: WiFiWirelessSDK.CallParams? {
    get
  }
  public var remoteUserAgent: Swift.String? {
    get
  }
  public var replacedCall: WiFiWirelessSDK.Call? {
    get
  }
  public var requestAddress: WiFiWirelessSDK.Address? {
    get
  }
  public var speakerMuted: Swift.Bool {
    get
    set
  }
  public var speakerVolumeGain: Swift.Float {
    get
    set
  }
  public var state: WiFiWirelessSDK.Call.State {
    get
  }
  public var streamCount: Swift.Int {
    get
  }
  public var textStats: WiFiWirelessSDK.CallStats? {
    get
  }
  public var toAddress: WiFiWirelessSDK.Address? {
    get
  }
  public var transferState: WiFiWirelessSDK.Call.State {
    get
  }
  public var transferTargetCall: WiFiWirelessSDK.Call? {
    get
  }
  public var transfererCall: WiFiWirelessSDK.Call? {
    get
  }
  public var userData: Swift.UnsafeMutableRawPointer? {
    get
    set
  }
  public var videoSource: WiFiWirelessSDK.VideoSourceDescriptor? {
    get
    set
  }
  public var videoStats: WiFiWirelessSDK.CallStats? {
    get
  }
  public func accept() throws
  public func acceptEarlyMedia() throws
  public func acceptEarlyMediaWithParams(params: WiFiWirelessSDK.CallParams?) throws
  public func acceptUpdate(params: WiFiWirelessSDK.CallParams?) throws
  public func acceptWithParams(params: WiFiWirelessSDK.CallParams?) throws
  public func askedToAutoanswer() -> Swift.Bool
  public func cancelDtmfs()
  public func confirmGoClear()
  public func createNativeVideoWindowId() throws -> Swift.UnsafeMutableRawPointer
  public func decline(reason: WiFiWirelessSDK.Reason) throws
  public func declineWithErrorInfo(ei: WiFiWirelessSDK.ErrorInfo?) -> Swift.Int
  public func deferUpdate() throws
  public func getStats(type: WiFiWirelessSDK.StreamType) -> WiFiWirelessSDK.CallStats?
  @available(*, deprecated)
  public func getToHeader(headerName: Swift.String) -> Swift.String
  public func hasTransferPending() -> Swift.Bool
  public func mediaInProgress() -> Swift.Bool
  public func notifyRinging()
  public func oglRender()
  public func pause() throws
  @available(*, deprecated)
  public func redirect(redirectUri: Swift.String) throws
  public func redirectTo(redirectAddress: WiFiWirelessSDK.Address) throws
  public func requestNotifyNextVideoFrameDecoded()
  public func resume() throws
  public func sendDtmf(dtmf: Swift.CChar) throws
  public func sendDtmfs(dtmfs: Swift.String) throws
  public func sendInfoMessage(info: WiFiWirelessSDK.InfoMessage) throws
  public func sendVfuRequest()
  public func startRecording()
  public func stopRecording()
  public func takePreviewSnapshot(filePath: Swift.String) throws
  public func takeVideoSnapshot(filePath: Swift.String) throws
  public func terminate() throws
  public func terminateWithErrorInfo(ei: WiFiWirelessSDK.ErrorInfo?) throws
  @available(*, deprecated)
  public func transfer(referTo: Swift.String) throws
  public func transferTo(referTo: WiFiWirelessSDK.Address) throws
  public func transferToAnother(dest: WiFiWirelessSDK.Call) throws
  public func update(params: WiFiWirelessSDK.CallParams?) throws
  public func zoom(zoomFactor: Swift.Float, cx: Swift.Float, cy: Swift.Float)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CallLog : WiFiWirelessSDK.LinphoneObject {
  public static func getSwiftObject(cObject: Swift.OpaquePointer) -> WiFiWirelessSDK.CallLog
  public var getCobject: Swift.OpaquePointer? {
    get
  }
  public var callId: Swift.String? {
    get
  }
  public var conferenceInfo: WiFiWirelessSDK.ConferenceInfo? {
    get
  }
  public var dir: WiFiWirelessSDK.Call.Dir {
    get
  }
  public var duration: Swift.Int {
    get
  }
  public var errorInfo: WiFiWirelessSDK.ErrorInfo? {
    get
  }
  public var fromAddress: WiFiWirelessSDK.Address? {
    get
  }
  public var localAddress: WiFiWirelessSDK.Address? {
    get
  }
  public var quality: Swift.Float {
    get
  }
  public var refKey: Swift.String? {
    get
    set
  }
  public var remoteAddress: WiFiWirelessSDK.Address? {
    get
    set
  }
  public var startDate: Darwin.time_t {
    get
  }
  public var status: WiFiWirelessSDK.Call.Status {
    get
  }
  public var toAddress: WiFiWirelessSDK.Address? {
    get
  }
  public var userData: Swift.UnsafeMutableRawPointer? {
    get
    set
  }
  public var videoEnabled: Swift.Bool {
    get
  }
  public func toStr() -> Swift.String
  public func wasConference() -> Swift.Bool
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CallParams : WiFiWirelessSDK.LinphoneObject {
  public static func getSwiftObject(cObject: Swift.OpaquePointer) -> WiFiWirelessSDK.CallParams
  public var getCobject: Swift.OpaquePointer? {
    get
  }
  public var account: WiFiWirelessSDK.Account? {
    get
    set
  }
  public var audioBandwidthLimit: Swift.Int {
    get
    set
  }
  public var audioDirection: WiFiWirelessSDK.MediaDirection {
    get
    set
  }
  public var audioEnabled: Swift.Bool {
    get
    set
  }
  public var audioMulticastEnabled: Swift.Bool {
    get
    set
  }
  public var avpfEnabled: Swift.Bool {
    get
    set
  }
  public var capabilityNegotiationReinviteEnabled: Swift.Bool {
    @available(*, deprecated)
    get
    set
  }
  public var capabilityNegotiationsEnabled: Swift.Bool {
    get
    set
  }
  public var cfgLinesMergingEnabled: Swift.Bool? {
    get
    set
  }
  public var conferenceVideoLayout: WiFiWirelessSDK.Conference.Layout {
    get
    set
  }
  public var customContents: [WiFiWirelessSDK.Content] {
    get
  }
  public var earlyMediaSendingEnabled: Swift.Bool {
    get
    set
  }
  public var fromHeader: Swift.String? {
    get
    set
  }
  public var inputAudioDevice: WiFiWirelessSDK.AudioDevice? {
    get
    set
  }
  @available(*, deprecated)
  public var isCapabilityNegotiationReinviteEnabled: Swift.Bool {
    get
  }
  public var isRecording: Swift.Bool {
    get
  }
  public var localConferenceMode: Swift.Bool {
    get
  }
  public var lowBandwidthEnabled: Swift.Bool {
    get
    set
  }
  public var mediaEncryption: WiFiWirelessSDK.MediaEncryption {
    get
    set
  }
  public var micEnabled: Swift.Bool {
    get
    set
  }
  public var outputAudioDevice: WiFiWirelessSDK.AudioDevice? {
    get
    set
  }
  public var privacy: Swift.UInt {
    get
    set
  }
  public var proxyConfig: WiFiWirelessSDK.ProxyConfig? {
    @available(*, deprecated)
    get
    @available(*, deprecated)
    set
  }
  public var realtimeTextEnabled: Swift.Bool {
    get
  }
  public func setRealtimetextenabled(newValue: Swift.Bool) throws
  public var realtimeTextKeepaliveInterval: Swift.UInt {
    get
    set
  }
  public var receivedFramerate: Swift.Float {
    get
  }
  public var receivedVideoDefinition: WiFiWirelessSDK.VideoDefinition? {
    get
  }
  public var recordFile: Swift.String? {
    get
    set
  }
  public var rtpBundleEnabled: Swift.Bool {
    get
    @available(*, deprecated)
    set
  }
  public var rtpProfile: Swift.String {
    get
  }
  public var sentFramerate: Swift.Float {
    get
  }
  public var sentVideoDefinition: WiFiWirelessSDK.VideoDefinition? {
    get
  }
  public var sessionName: Swift.String? {
    get
    set
  }
  public var tcapLineMergingEnabled: Swift.Bool? {
    get
    set
  }
  public var toneIndicationsEnabled: Swift.Bool {
    get
    set
  }
  public var usedAudioPayloadType: WiFiWirelessSDK.PayloadType? {
    get
  }
  public var usedTextPayloadType: WiFiWirelessSDK.PayloadType? {
    get
  }
  public var usedVideoPayloadType: WiFiWirelessSDK.PayloadType? {
    get
  }
  public var userData: Swift.UnsafeMutableRawPointer? {
    get
    set
  }
  public var videoDirection: WiFiWirelessSDK.MediaDirection {
    get
    set
  }
  public var videoEnabled: Swift.Bool {
    get
    set
  }
  public var videoMulticastEnabled: Swift.Bool {
    get
    set
  }
  public func addCustomContent(content: WiFiWirelessSDK.Content)
  public func addCustomHeader(headerName: Swift.String, headerValue: Swift.String?)
  public func addCustomSdpAttribute(attributeName: Swift.String, attributeValue: Swift.String?)
  public func addCustomSdpMediaAttribute(type: WiFiWirelessSDK.StreamType, attributeName: Swift.String, attributeValue: Swift.String?)
  public func cfgLinesMerged() -> Swift.Bool
  public func clearCustomSdpAttributes()
  public func clearCustomSdpMediaAttributes(type: WiFiWirelessSDK.StreamType)
  @available(*, deprecated)
  public func copy() -> WiFiWirelessSDK.CallParams?
  public func getCustomHeader(headerName: Swift.String) -> Swift.String
  public func getCustomSdpAttribute(attributeName: Swift.String) -> Swift.String
  public func getCustomSdpMediaAttribute(type: WiFiWirelessSDK.StreamType, attributeName: Swift.String) -> Swift.String
  public func hasCustomSdpAttribute(attributeName: Swift.String) -> Swift.Bool
  public func hasCustomSdpMediaAttribute(type: WiFiWirelessSDK.StreamType, attributeName: Swift.String) -> Swift.Bool
  public func isMediaEncryptionSupported(encryption: WiFiWirelessSDK.MediaEncryption) -> Swift.Bool
  public func tcapLinesMerged() -> Swift.Bool
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CallStats : WiFiWirelessSDK.LinphoneObject {
  public static func getSwiftObject(cObject: Swift.OpaquePointer) -> WiFiWirelessSDK.CallStats
  public var getCobject: Swift.OpaquePointer? {
    get
  }
  public var downloadBandwidth: Swift.Float {
    get
  }
  public var estimatedDownloadBandwidth: Swift.Float {
    get
  }
  public var iceState: WiFiWirelessSDK.IceState {
    get
  }
  public var ipFamilyOfRemote: WiFiWirelessSDK.Address.Family {
    get
  }
  public var isZrtpKeyAgreementAlgoPostQuantum: Swift.Bool {
    get
  }
  public var jitterBufferSizeMs: Swift.Float {
    get
  }
  public var latePacketsCumulativeNumber: Swift.UInt64 {
    get
  }
  public var localLateRate: Swift.Float {
    get
  }
  public var localLossRate: Swift.Float {
    get
  }
  public var receiverInterarrivalJitter: Swift.Float {
    get
  }
  public var receiverLossRate: Swift.Float {
    get
  }
  public var roundTripDelay: Swift.Float {
    get
  }
  public var rtcpDownloadBandwidth: Swift.Float {
    get
  }
  public var rtcpUploadBandwidth: Swift.Float {
    get
  }
  public var senderInterarrivalJitter: Swift.Float {
    get
  }
  public var senderLossRate: Swift.Float {
    get
  }
  public var type: WiFiWirelessSDK.StreamType {
    get
  }
  public var uploadBandwidth: Swift.Float {
    get
  }
  public var upnpState: WiFiWirelessSDK.UpnpState {
    get
  }
  public var userData: Swift.UnsafeMutableRawPointer? {
    get
    set
  }
  public var zrtpAuthTagAlgo: Swift.String {
    get
  }
  public var zrtpCipherAlgo: Swift.String {
    get
  }
  public var zrtpHashAlgo: Swift.String {
    get
  }
  public var zrtpKeyAgreementAlgo: Swift.String {
    get
  }
  public var zrtpSasAlgo: Swift.String {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class ChatMessage : WiFiWirelessSDK.LinphoneObject {
  public static func getSwiftObject(cObject: Swift.OpaquePointer) -> WiFiWirelessSDK.ChatMessage
  public var getCobject: Swift.OpaquePointer? {
    get
  }
  public enum Direction : Swift.Int {
    case Incoming
    case Outgoing
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum State : Swift.Int {
    case Idle
    case InProgress
    case Delivered
    case NotDelivered
    case FileTransferError
    case FileTransferDone
    case DeliveredToUser
    case Displayed
    case FileTransferInProgress
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public func addDelegate(delegate: any WiFiWirelessSDK.ChatMessageDelegate)
  public func removeDelegate(delegate: any WiFiWirelessSDK.ChatMessageDelegate)
  public var appdata: Swift.String? {
    get
    set
  }
  public var callId: Swift.String {
    get
  }
  public var chatRoom: WiFiWirelessSDK.ChatRoom? {
    get
  }
  public var contentType: Swift.String {
    get
    set
  }
  public var contents: [WiFiWirelessSDK.Content] {
    get
  }
  public var core: WiFiWirelessSDK.Core? {
    get
  }
  public var currentDelegate: (any WiFiWirelessSDK.ChatMessageDelegate)? {
    get
  }
  public var ephemeralExpireTime: Darwin.time_t {
    get
  }
  public var ephemeralLifetime: Swift.Int {
    get
  }
  public var errorInfo: WiFiWirelessSDK.ErrorInfo? {
    get
  }
  public var externalBodyUrl: Swift.String? {
    get
    set
  }
  public var fileTransferInformation: WiFiWirelessSDK.Content? {
    get
  }
  public var forwardInfo: Swift.String? {
    get
  }
  public var fromAddress: WiFiWirelessSDK.Address? {
    get
  }
  public var isEphemeral: Swift.Bool {
    get
  }
  @available(*, deprecated)
  public var isFileTransfer: Swift.Bool {
    get
  }
  public var isFileTransferInProgress: Swift.Bool {
    get
  }
  public var isForward: Swift.Bool {
    get
  }
  public var isOutgoing: Swift.Bool {
    get
  }
  public var isRead: Swift.Bool {
    get
  }
  public var isReply: Swift.Bool {
    get
  }
  public var isSecured: Swift.Bool {
    get
  }
  @available(*, deprecated)
  public var isText: Swift.Bool {
    get
  }
  public var localAddress: WiFiWirelessSDK.Address? {
    get
  }
  public var messageId: Swift.String {
    get
  }
  public var ownReaction: WiFiWirelessSDK.ChatMessageReaction? {
    get
  }
  public var reactions: [WiFiWirelessSDK.ChatMessageReaction] {
    get
  }
  public var replyMessage: WiFiWirelessSDK.ChatMessage? {
    get
  }
  public var replyMessageId: Swift.String? {
    get
  }
  public var replyMessageSenderAddress: WiFiWirelessSDK.Address? {
    get
  }
  public var state: WiFiWirelessSDK.ChatMessage.State {
    get
  }
  @available(*, deprecated)
  public var textContent: Swift.String? {
    get
  }
  public var time: Darwin.time_t {
    get
  }
  public var toAddress: WiFiWirelessSDK.Address? {
    get
  }
  public var toBeStored: Swift.Bool {
    get
    set
  }
  public var userData: Swift.UnsafeMutableRawPointer? {
    get
    set
  }
  public var utf8Text: Swift.String? {
    get
    set
  }
  public func addContent(content: WiFiWirelessSDK.Content)
  public func addCustomHeader(headerName: Swift.String, headerValue: Swift.String?)
  public func addFileContent(content: WiFiWirelessSDK.Content)
  @available(*, deprecated)
  public func addTextContent(text: Swift.String)
  public func addUtf8TextContent(text: Swift.String)
  public func cancelFileTransfer()
  public func createReaction(utf8Reaction: Swift.String) throws -> WiFiWirelessSDK.ChatMessageReaction
  public func downloadContent(content: WiFiWirelessSDK.Content) -> Swift.Bool
  public func getCustomHeader(headerName: Swift.String) -> Swift.String
  public func getParticipantsByImdnState(state: WiFiWirelessSDK.ChatMessage.State) -> [WiFiWirelessSDK.ParticipantImdnState]
  public func hasConferenceInvitationContent() -> Swift.Bool
  @available(*, deprecated)
  public func hasTextContent() -> Swift.Bool
  public func putChar(character: Swift.UInt32) throws
  public func removeContent(content: WiFiWirelessSDK.Content)
  public func removeCustomHeader(headerName: Swift.String)
  public func send()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class ChatMessageReaction : WiFiWirelessSDK.LinphoneObject {
  public static func getSwiftObject(cObject: Swift.OpaquePointer) -> WiFiWirelessSDK.ChatMessageReaction
  public var getCobject: Swift.OpaquePointer? {
    get
  }
  public var body: Swift.String {
    get
  }
  public var callId: Swift.String {
    get
  }
  public var fromAddress: WiFiWirelessSDK.Address? {
    get
  }
  public func send()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class ChatRoom : WiFiWirelessSDK.LinphoneObject {
  public static func getSwiftObject(cObject: Swift.OpaquePointer) -> WiFiWirelessSDK.ChatRoom
  public var getCobject: Swift.OpaquePointer? {
    get
  }
  public struct Capabilities : Swift.OptionSet {
    public let rawValue: Swift.Int
    public init(rawValue: Swift.Int)
    public static let None: WiFiWirelessSDK.ChatRoom.Capabilities
    public static let Basic: WiFiWirelessSDK.ChatRoom.Capabilities
    public static let RealTimeText: WiFiWirelessSDK.ChatRoom.Capabilities
    public static let Conference: WiFiWirelessSDK.ChatRoom.Capabilities
    public static let Proxy: WiFiWirelessSDK.ChatRoom.Capabilities
    public static let Migratable: WiFiWirelessSDK.ChatRoom.Capabilities
    public static let OneToOne: WiFiWirelessSDK.ChatRoom.Capabilities
    public static let Encrypted: WiFiWirelessSDK.ChatRoom.Capabilities
    public static let Ephemeral: WiFiWirelessSDK.ChatRoom.Capabilities
    public typealias ArrayLiteralElement = WiFiWirelessSDK.ChatRoom.Capabilities
    public typealias Element = WiFiWirelessSDK.ChatRoom.Capabilities
    public typealias RawValue = Swift.Int
  }
  public struct Backend : Swift.OptionSet {
    public let rawValue: Swift.Int
    public init(rawValue: Swift.Int)
    public static let Basic: WiFiWirelessSDK.ChatRoom.Backend
    public static let FlexisipChat: WiFiWirelessSDK.ChatRoom.Backend
    public typealias ArrayLiteralElement = WiFiWirelessSDK.ChatRoom.Backend
    public typealias Element = WiFiWirelessSDK.ChatRoom.Backend
    public typealias RawValue = Swift.Int
  }
  public enum SecurityLevel : Swift.Int {
    case Unsafe
    case ClearText
    case Encrypted
    case Safe
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum EphemeralMode : Swift.Int {
    case DeviceManaged
    case AdminManaged
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public struct EncryptionBackend : Swift.OptionSet {
    public let rawValue: Swift.Int
    public init(rawValue: Swift.Int)
    public static let None: WiFiWirelessSDK.ChatRoom.EncryptionBackend
    public static let Lime: WiFiWirelessSDK.ChatRoom.EncryptionBackend
    public typealias ArrayLiteralElement = WiFiWirelessSDK.ChatRoom.EncryptionBackend
    public typealias Element = WiFiWirelessSDK.ChatRoom.EncryptionBackend
    public typealias RawValue = Swift.Int
  }
  public enum State : Swift.Int {
    case None
    case Instantiated
    case CreationPending
    case Created
    case CreationFailed
    case TerminationPending
    case Terminated
    case TerminationFailed
    case Deleted
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public func addDelegate(delegate: any WiFiWirelessSDK.ChatRoomDelegate)
  public func removeDelegate(delegate: any WiFiWirelessSDK.ChatRoomDelegate)
  public static func stateToString(state: WiFiWirelessSDK.ChatRoom.State) -> Swift.String
  public var call: WiFiWirelessSDK.Call? {
    get
  }
  public var capabilities: Swift.UInt {
    get
  }
  public var char: Swift.UInt32 {
    get
  }
  public var composingAddresses: [WiFiWirelessSDK.Address] {
    get
  }
  public var conferenceAddress: WiFiWirelessSDK.Address? {
    get
    set
  }
  public var core: WiFiWirelessSDK.Core? {
    get
  }
  public var creationTime: Darwin.time_t {
    get
  }
  public var currentDelegate: (any WiFiWirelessSDK.ChatRoomDelegate)? {
    get
  }
  public var currentParams: WiFiWirelessSDK.ChatRoomParams? {
    get
  }
  public var ephemeralEnabled: Swift.Bool {
    get
    set
  }
  public var ephemeralLifetime: Swift.Int {
    get
    set
  }
  public var ephemeralMode: WiFiWirelessSDK.ChatRoom.EphemeralMode {
    get
    set
  }
  public var historyEventsSize: Swift.Int {
    get
  }
  public var historySize: Swift.Int {
    get
  }
  public var isEmpty: Swift.Bool {
    get
  }
  public var isReadOnly: Swift.Bool {
    get
  }
  public var isRemoteComposing: Swift.Bool {
    get
  }
  public var lastMessageInHistory: WiFiWirelessSDK.ChatMessage? {
    get
  }
  public var lastUpdateTime: Darwin.time_t {
    get
  }
  public var localAddress: WiFiWirelessSDK.Address? {
    get
  }
  public var me: WiFiWirelessSDK.Participant? {
    get
  }
  public var muted: Swift.Bool {
    get
    set
  }
  public var nbParticipants: Swift.Int {
    get
  }
  public var participants: [WiFiWirelessSDK.Participant] {
    get
  }
  public var peerAddress: WiFiWirelessSDK.Address? {
    get
  }
  public var securityLevel: WiFiWirelessSDK.ChatRoom.SecurityLevel {
    get
  }
  public var state: WiFiWirelessSDK.ChatRoom.State {
    get
  }
  public var subject: Swift.String? {
    get
    set
  }
  public var unreadHistory: [WiFiWirelessSDK.ChatMessage] {
    get
  }
  public var unreadMessagesCount: Swift.Int {
    get
  }
  public var userData: Swift.UnsafeMutableRawPointer? {
    get
    set
  }
  public func addParticipant(addr: WiFiWirelessSDK.Address)
  public func addParticipants(addresses: [WiFiWirelessSDK.Address]) -> Swift.Bool
  public func allowCpim()
  public func allowMultipart()
  public func canHandleParticipants() -> Swift.Bool
  public func compose()
  public func createEmptyMessage() throws -> WiFiWirelessSDK.ChatMessage
  public func createFileTransferMessage(initialContent: WiFiWirelessSDK.Content) throws -> WiFiWirelessSDK.ChatMessage
  public func createForwardMessage(message: WiFiWirelessSDK.ChatMessage) throws -> WiFiWirelessSDK.ChatMessage
  @available(*, deprecated)
  public func createMessage(message: Swift.String?) throws -> WiFiWirelessSDK.ChatMessage
  public func createMessageFromUtf8(message: Swift.String?) throws -> WiFiWirelessSDK.ChatMessage
  public func createReplyMessage(message: WiFiWirelessSDK.ChatMessage) throws -> WiFiWirelessSDK.ChatMessage
  public func createVoiceRecordingMessage(recorder: WiFiWirelessSDK.Recorder) throws -> WiFiWirelessSDK.ChatMessage
  public func deleteHistory()
  public func deleteMessage(message: WiFiWirelessSDK.ChatMessage)
  public func ephemeralSupportedByAllParticipants() -> Swift.Bool
  public func findMessage(messageId: Swift.String) -> WiFiWirelessSDK.ChatMessage?
  public func findParticipant(address: WiFiWirelessSDK.Address) -> WiFiWirelessSDK.Participant?
  public func getHistory(nbMessage: Swift.Int) -> [WiFiWirelessSDK.ChatMessage]
  public func getHistoryEvents(nbEvents: Swift.Int) -> [WiFiWirelessSDK.EventLog]
  public func getHistoryMessageEvents(nbEvents: Swift.Int) -> [WiFiWirelessSDK.EventLog]
  public func getHistoryRange(begin: Swift.Int, end: Swift.Int) -> [WiFiWirelessSDK.ChatMessage]
  public func getHistoryRangeEvents(begin: Swift.Int, end: Swift.Int) -> [WiFiWirelessSDK.EventLog]
  public func getHistoryRangeMessageEvents(begin: Swift.Int, end: Swift.Int) -> [WiFiWirelessSDK.EventLog]
  @available(*, deprecated)
  public func hasBeenLeft() -> Swift.Bool
  public func hasCapability(mask: Swift.Int) -> Swift.Bool
  public func leave()
  public func markAsRead()
  public func notifyParticipantDeviceRegistration(participantDevice: WiFiWirelessSDK.Address)
  public func receiveChatMessage(message: WiFiWirelessSDK.ChatMessage)
  public func removeParticipant(participant: WiFiWirelessSDK.Participant)
  public func removeParticipants(participants: [WiFiWirelessSDK.Participant])
  public func setParticipantAdminStatus(participant: WiFiWirelessSDK.Participant, isAdmin: Swift.Bool)
  public func setParticipantDevices(participantAddress: WiFiWirelessSDK.Address, deviceIdentities: [WiFiWirelessSDK.ParticipantDeviceIdentity])
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class ChatRoomParams : WiFiWirelessSDK.LinphoneObject {
  public static func getSwiftObject(cObject: Swift.OpaquePointer) -> WiFiWirelessSDK.ChatRoomParams
  public var getCobject: Swift.OpaquePointer? {
    get
  }
  public var backend: WiFiWirelessSDK.ChatRoom.Backend {
    get
    set
  }
  public var encryptionBackend: WiFiWirelessSDK.ChatRoom.EncryptionBackend {
    get
    set
  }
  public var encryptionEnabled: Swift.Bool {
    get
    set
  }
  public var ephemeralLifetime: Swift.Int {
    get
    set
  }
  public var ephemeralMode: WiFiWirelessSDK.ChatRoom.EphemeralMode {
    get
    set
  }
  public var groupEnabled: Swift.Bool {
    get
    set
  }
  public var isValid: Swift.Bool {
    get
  }
  public var rttEnabled: Swift.Bool {
    get
    set
  }
  public var subject: Swift.String? {
    get
    set
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class Conference : WiFiWirelessSDK.LinphoneObject {
  public static func getSwiftObject(cObject: Swift.OpaquePointer) -> WiFiWirelessSDK.Conference
  public var getCobject: Swift.OpaquePointer? {
    get
  }
  public enum SecurityLevel : Swift.Int {
    case None
    case PointToPoint
    case EndToEnd
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum ParticipantListType : Swift.Int {
    case Closed
    case Open
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum JoiningMode : Swift.Int {
    case DialIn
    case DialOut
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum Layout : Swift.Int {
    case Grid
    case ActiveSpeaker
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum State : Swift.Int {
    case None
    case Instantiated
    case CreationPending
    case Created
    case CreationFailed
    case TerminationPending
    case Terminated
    case TerminationFailed
    case Deleted
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public func addDelegate(delegate: any WiFiWirelessSDK.ConferenceDelegate)
  public func removeDelegate(delegate: any WiFiWirelessSDK.ConferenceDelegate)
  public var activeSpeakerParticipantDevice: WiFiWirelessSDK.ParticipantDevice? {
    get
  }
  public var call: WiFiWirelessSDK.Call? {
    get
  }
  public var conferenceAddress: WiFiWirelessSDK.Address? {
    get
    set
  }
  public var core: WiFiWirelessSDK.Core? {
    get
  }
  public var currentDelegate: (any WiFiWirelessSDK.ConferenceDelegate)? {
    get
  }
  public var currentParams: WiFiWirelessSDK.ConferenceParams? {
    get
  }
  public var duration: Swift.Int? {
    get
  }
  public var ID: Swift.String {
    @available(*, deprecated)
    get
    @available(*, deprecated)
    set
  }
  public var inputAudioDevice: WiFiWirelessSDK.AudioDevice? {
    get
    set
  }
  public var inputVolume: Swift.Float {
    get
  }
  public var isIn: Swift.Bool {
    get
  }
  public var isRecording: Swift.Bool {
    get
  }
  public var me: WiFiWirelessSDK.Participant? {
    get
  }
  public var microphoneMuted: Swift.Bool {
    get
    set
  }
  public var outputAudioDevice: WiFiWirelessSDK.AudioDevice? {
    get
    set
  }
  public var participantCount: Swift.Int {
    get
  }
  public var participantDeviceList: [WiFiWirelessSDK.ParticipantDevice] {
    get
  }
  public var participantList: [WiFiWirelessSDK.Participant] {
    get
  }
  @available(*, deprecated)
  public var participants: [WiFiWirelessSDK.Address] {
    get
  }
  public var startTime: Darwin.time_t? {
    get
  }
  public var state: WiFiWirelessSDK.Conference.State {
    get
  }
  public var subject: Swift.String? {
    get
    set
  }
  public var userData: Swift.UnsafeMutableRawPointer? {
    get
    set
  }
  public var username: Swift.String? {
    get
    set
  }
  public func addParticipant(call: WiFiWirelessSDK.Call) throws
  public func addParticipant(uri: WiFiWirelessSDK.Address) throws
  public func addParticipants(calls: [WiFiWirelessSDK.Call]) throws
  public func addParticipants(addresses: [WiFiWirelessSDK.Address]) throws
  public func enter() -> Swift.Int
  public func findParticipant(uri: WiFiWirelessSDK.Address) -> WiFiWirelessSDK.Participant?
  public func getParticipantDeviceVolume(device: WiFiWirelessSDK.ParticipantDevice) -> Swift.Int
  public func inviteParticipants(addresses: [WiFiWirelessSDK.Address], params: WiFiWirelessSDK.CallParams?) throws
  public func isMe(uri: WiFiWirelessSDK.Address) -> Swift.Bool
  public func leave() -> Swift.Int
  @available(*, deprecated)
  public func removeParticipant(uri: WiFiWirelessSDK.Address) throws
  public func removeParticipant(participant: WiFiWirelessSDK.Participant) throws
  @available(*, deprecated)
  public func removeParticipant(call: WiFiWirelessSDK.Call) throws
  public func setLocalParticipantStreamCapability(direction: WiFiWirelessSDK.MediaDirection, type: WiFiWirelessSDK.StreamType)
  public func setParticipantAdminStatus(participant: WiFiWirelessSDK.Participant, isAdmin: Swift.Bool)
  public func startRecording(path: Swift.String) -> Swift.Int
  public func stopRecording() -> Swift.Int
  public func terminate() -> Swift.Int
  public func updateParams(params: WiFiWirelessSDK.ConferenceParams) -> Swift.Int
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class ConferenceInfo : WiFiWirelessSDK.LinphoneObject {
  public static func getSwiftObject(cObject: Swift.OpaquePointer) -> WiFiWirelessSDK.ConferenceInfo
  public var getCobject: Swift.OpaquePointer? {
    get
  }
  public enum State : Swift.Int {
    case New
    case Updated
    case Cancelled
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public var dateTime: Darwin.time_t {
    get
    set
  }
  public var description: Swift.String? {
    get
    set
  }
  public var duration: Swift.UInt {
    get
    set
  }
  public var icalendarString: Swift.String? {
    get
  }
  public var organizer: WiFiWirelessSDK.Address? {
    get
    set
  }
  public var participantInfos: [WiFiWirelessSDK.ParticipantInfo] {
    get
    set
  }
  public var participants: [WiFiWirelessSDK.Address] {
    @available(*, deprecated)
    get
    @available(*, deprecated)
    set
  }
  public var securityLevel: WiFiWirelessSDK.Conference.SecurityLevel {
    get
    set
  }
  public var state: WiFiWirelessSDK.ConferenceInfo.State? {
    get
  }
  public var subject: Swift.String? {
    get
    set
  }
  public var uri: WiFiWirelessSDK.Address? {
    get
  }
  public func addParticipant(participant: WiFiWirelessSDK.Address)
  public func addParticipant(participantInfo: WiFiWirelessSDK.ParticipantInfo)
  public func addParticipantInfos(participantInfos: [WiFiWirelessSDK.ParticipantInfo]?)
  public func clone() -> WiFiWirelessSDK.ConferenceInfo?
  public func findParticipant(participant: WiFiWirelessSDK.Address) -> WiFiWirelessSDK.ParticipantInfo?
  public func removeParticipant(participant: WiFiWirelessSDK.Address)
  public func updateParticipant(participantInfo: WiFiWirelessSDK.ParticipantInfo)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class ConferenceParams : WiFiWirelessSDK.LinphoneObject {
  public static func getSwiftObject(cObject: Swift.OpaquePointer) -> WiFiWirelessSDK.ConferenceParams
  public var getCobject: Swift.OpaquePointer? {
    get
  }
  public var account: WiFiWirelessSDK.Account? {
    get
  }
  public var audioEnabled: Swift.Bool {
    get
    set
  }
  public var chatEnabled: Swift.Bool {
    get
    set
  }
  public var conferenceFactoryAddress: WiFiWirelessSDK.Address? {
    get
    set
  }
  public var description: Swift.String? {
    get
    set
  }
  public var endTime: Darwin.time_t {
    get
    set
  }
  public var hidden: Swift.Bool? {
    get
    set
  }
  @available(*, deprecated)
  public var isAudioEnabled: Swift.Bool {
    get
  }
  @available(*, deprecated)
  public var isChatEnabled: Swift.Bool {
    get
  }
  public var isHidden: Swift.Bool {
    get
  }
  @available(*, deprecated)
  public var isLocalParticipantEnabled: Swift.Bool {
    get
  }
  @available(*, deprecated)
  public var isOneParticipantConferenceEnabled: Swift.Bool {
    get
  }
  @available(*, deprecated)
  public var isVideoEnabled: Swift.Bool {
    get
  }
  public var localParticipantEnabled: Swift.Bool {
    get
    set
  }
  public var oneParticipantConferenceEnabled: Swift.Bool {
    get
    set
  }
  public var participantListType: WiFiWirelessSDK.Conference.ParticipantListType {
    get
    set
  }
  @available(*, deprecated)
  public var proxyCfg: WiFiWirelessSDK.ProxyConfig? {
    get
  }
  public var securityLevel: WiFiWirelessSDK.Conference.SecurityLevel {
    get
    set
  }
  public var startTime: Darwin.time_t {
    get
    set
  }
  public var subject: Swift.String? {
    get
    set
  }
  public var videoEnabled: Swift.Bool {
    get
    set
  }
  public func clone() -> WiFiWirelessSDK.ConferenceParams?
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class ConferenceScheduler : WiFiWirelessSDK.LinphoneObject {
  public static func getSwiftObject(cObject: Swift.OpaquePointer) -> WiFiWirelessSDK.ConferenceScheduler
  public var getCobject: Swift.OpaquePointer? {
    get
  }
  public enum State : Swift.Int {
    case Idle
    case Error
    case AllocationPending
    case Ready
    case Updating
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public func addDelegate(delegate: any WiFiWirelessSDK.ConferenceSchedulerDelegate)
  public func removeDelegate(delegate: any WiFiWirelessSDK.ConferenceSchedulerDelegate)
  public var account: WiFiWirelessSDK.Account? {
    get
    set
  }
  public var core: WiFiWirelessSDK.Core? {
    get
  }
  public var currentDelegate: (any WiFiWirelessSDK.ConferenceSchedulerDelegate)? {
    get
  }
  public var info: WiFiWirelessSDK.ConferenceInfo? {
    get
    set
  }
  public func cancelConference(conferenceInfo: WiFiWirelessSDK.ConferenceInfo?)
  public func sendInvitations(chatRoomParams: WiFiWirelessSDK.ChatRoomParams)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class Config : WiFiWirelessSDK.LinphoneObject {
  public static func getSwiftObject(cObject: Swift.OpaquePointer) -> WiFiWirelessSDK.Config
  public var getCobject: Swift.OpaquePointer? {
    get
  }
  public enum ConfiguringState : Swift.Int {
    case Successful
    case Failed
    case Skipped
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public static func newForSharedCore(appGroupId: Swift.String, configFilename: Swift.String?, factoryConfigFilename: Swift.String?) -> WiFiWirelessSDK.Config?
  public static func newFromBuffer(buffer: Swift.String) -> WiFiWirelessSDK.Config?
  public static func newWithFactory(configFilename: Swift.String?, factoryConfigFilename: Swift.String?) -> WiFiWirelessSDK.Config?
  public var sectionsNamesList: [Swift.String] {
    get
  }
  public func cleanEntry(section: Swift.String, key: Swift.String)
  public func cleanSection(section: Swift.String)
  public func dump() -> Swift.String
  public func dumpAsXml() -> Swift.String
  public func getBool(section: Swift.String, key: Swift.String, defaultValue: Swift.Bool) -> Swift.Bool
  public func getDefaultFloat(section: Swift.String, key: Swift.String, defaultValue: Swift.Float) -> Swift.Float
  public func getDefaultInt(section: Swift.String, key: Swift.String, defaultValue: Swift.Int) -> Swift.Int
  public func getDefaultInt64(section: Swift.String, key: Swift.String, defaultValue: Swift.Int64) -> Swift.Int64
  public func getDefaultString(section: Swift.String, key: Swift.String, defaultValue: Swift.String) -> Swift.String
  public func getFloat(section: Swift.String, key: Swift.String, defaultValue: Swift.Float) -> Swift.Float
  public func getInt(section: Swift.String, key: Swift.String, defaultValue: Swift.Int) -> Swift.Int
  public func getInt64(section: Swift.String, key: Swift.String, defaultValue: Swift.Int64) -> Swift.Int64
  public func getKeysNamesList(section: Swift.String) -> [Swift.String]
  public func getOverwriteFlagForEntry(section: Swift.String, key: Swift.String) -> Swift.Bool
  public func getOverwriteFlagForSection(section: Swift.String) -> Swift.Bool
  public func getRange(section: Swift.String, key: Swift.String, min: Swift.UnsafeMutablePointer<Swift.Int32>, max: Swift.UnsafeMutablePointer<Swift.Int32>, defaultMin: Swift.Int, defaultMax: Swift.Int) -> Swift.Bool
  public func getSectionParamString(section: Swift.String, key: Swift.String, defaultValue: Swift.String?) -> Swift.String
  public func getSkipFlagForEntry(section: Swift.String, key: Swift.String) -> Swift.Bool
  public func getSkipFlagForSection(section: Swift.String) -> Swift.Bool
  public func getString(section: Swift.String, key: Swift.String, defaultString: Swift.String?) -> Swift.String
  public func getStringList(section: Swift.String, key: Swift.String, defaultList: [Swift.String]?) -> [Swift.String]
  public func hasEntry(section: Swift.String, key: Swift.String) -> Swift.Int
  public func hasSection(section: Swift.String) -> Swift.Int
  public func loadFromXmlFile(filename: Swift.String) -> Swift.String
  public func loadFromXmlString(buffer: Swift.String) throws
  public func readFile(filename: Swift.String) throws
  public func relativeFileExists(filename: Swift.String) -> Swift.Bool
  public func reload()
  public func setBool(section: Swift.String, key: Swift.String, value: Swift.Bool)
  public func setFloat(section: Swift.String, key: Swift.String, value: Swift.Float)
  public func setInt(section: Swift.String, key: Swift.String, value: Swift.Int)
  public func setInt64(section: Swift.String, key: Swift.String, value: Swift.Int64)
  public func setIntHex(section: Swift.String, key: Swift.String, value: Swift.Int)
  public func setOverwriteFlagForEntry(section: Swift.String, key: Swift.String, value: Swift.Bool)
  public func setOverwriteFlagForSection(section: Swift.String, value: Swift.Bool)
  public func setRange(section: Swift.String, key: Swift.String, minValue: Swift.Int, maxValue: Swift.Int)
  public func setSkipFlagForEntry(section: Swift.String, key: Swift.String, value: Swift.Bool)
  public func setSkipFlagForSection(section: Swift.String, value: Swift.Bool)
  public func setString(section: Swift.String, key: Swift.String, value: Swift.String?)
  public func setStringList(section: Swift.String, key: Swift.String, value: [Swift.String]?)
  public func sync() throws
  public func writeRelativeFile(filename: Swift.String, data: Swift.String)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class Content : WiFiWirelessSDK.LinphoneObject {
  public static func getSwiftObject(cObject: Swift.OpaquePointer) -> WiFiWirelessSDK.Content
  public var getCobject: Swift.OpaquePointer? {
    get
  }
  public var buffer: Swift.UnsafePointer<Swift.UInt8> {
    get
  }
  public var disposition: Swift.String? {
    get
    set
  }
  public var encoding: Swift.String? {
    get
    set
  }
  public var fileDuration: Swift.Int {
    get
  }
  public var filePath: Swift.String? {
    get
    set
  }
  public var fileSize: Swift.Int {
    get
  }
  public var isFile: Swift.Bool {
    get
  }
  public var isFileEncrypted: Swift.Bool {
    get
  }
  public var isFileTransfer: Swift.Bool {
    get
  }
  public var isIcalendar: Swift.Bool {
    get
  }
  public var isMultipart: Swift.Bool {
    get
  }
  public var isText: Swift.Bool {
    get
  }
  public var isVoiceRecording: Swift.Bool {
    get
  }
  public var key: Swift.String? {
    get
  }
  public var keySize: Swift.Int {
    get
  }
  public var name: Swift.String? {
    get
    set
  }
  public var parts: [WiFiWirelessSDK.Content] {
    get
  }
  @available(*, deprecated)
  public var plainFilePath: Swift.String {
    get
  }
  public var size: Swift.Int {
    get
    set
  }
  public var stringBuffer: Swift.String {
    @available(*, deprecated)
    get
    @available(*, deprecated)
    set
  }
  public var subtype: Swift.String {
    get
    set
  }
  public var type: Swift.String {
    get
    set
  }
  public var userData: Swift.UnsafeMutableRawPointer? {
    get
    set
  }
  public var utf8Text: Swift.String? {
    get
    set
  }
  public func addContentTypeParameter(name: Swift.String, value: Swift.String?)
  public func addCustomHeader(headerName: Swift.String, headerValue: Swift.String)
  public func exportPlainFile() -> Swift.String
  public func findPartByHeader(headerName: Swift.String, headerValue: Swift.String) -> WiFiWirelessSDK.Content?
  public func getCustomHeader(headerName: Swift.String) -> Swift.String
  public func getPart(index: Swift.Int) -> WiFiWirelessSDK.Content?
  public func setBuffer(buffer: Swift.UnsafePointer<Swift.UInt8>, size: Swift.Int)
  public func setKey(key: Swift.String, keyLength: Swift.Int)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class Core : WiFiWirelessSDK.LinphoneObject {
  public static func getSwiftObject(cObject: Swift.OpaquePointer) -> WiFiWirelessSDK.Core
  public var getCobject: Swift.OpaquePointer? {
    get
  }
  public var nativeVideoWindow: UIKit.UIView? {
    get
    set
  }
  public var nativePreviewWindow: UIKit.UIView? {
    get
    set
  }
  public enum LogCollectionUploadState : Swift.Int {
    case InProgress
    case Delivered
    case NotDelivered
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public func addDelegate(delegate: any WiFiWirelessSDK.CoreDelegate)
  public func removeDelegate(delegate: any WiFiWirelessSDK.CoreDelegate)
  public static func compressLogCollection() -> Swift.String
  public static func enableLogCollection(state: WiFiWirelessSDK.LogCollectionState)
  public static var getLogCollectionMaxFileSize: Swift.Int {
    get
  }
  public static var getLogCollectionPath: Swift.String {
    get
  }
  public static var getLogCollectionPrefix: Swift.String {
    get
  }
  public static var getPostQuantumAvailable: Swift.Bool {
    get
  }
  public static var getVersion: Swift.String {
    get
  }
  public static func logCollectionEnabled() -> WiFiWirelessSDK.LogCollectionState
  public static func resetLogCollection()
  public static func serializeLogs()
  public static func setLogCollectionMaxFileSize(size: Swift.Int)
  public static func setLogCollectionPath(path: Swift.String)
  public static func setLogCollectionPrefix(prefix: Swift.String)
  public static func tunnelAvailable() -> Swift.Bool
  public static func upnpAvailable() -> Swift.Bool
  public static func vcardSupported() -> Swift.Bool
  public var accountCreatorBackend: WiFiWirelessSDK.AccountCreator.Backend {
    get
    set
  }
  public var accountCreatorUrl: Swift.String? {
    get
    set
  }
  public var accountList: [WiFiWirelessSDK.Account] {
    get
  }
  public var adaptiveRateAlgorithm: Swift.String {
    get
    set
  }
  public var adaptiveRateControlEnabled: Swift.Bool {
    get
    set
  }
  public var agcEnabled: Swift.Bool {
    get
    set
  }
  public var alertsEnabled: Swift.Bool {
    get
    set
  }
  public var audioAdaptiveJittcompEnabled: Swift.Bool {
    get
    set
  }
  public var audioDevices: [WiFiWirelessSDK.AudioDevice] {
    get
  }
  public var audioDscp: Swift.Int {
    get
    set
  }
  public var audioJittcomp: Swift.Int {
    get
    set
  }
  public var audioMulticastAddr: Swift.String? {
    get
  }
  public func setAudiomulticastaddr(newValue: Swift.String) throws
  public var audioMulticastEnabled: Swift.Bool {
    get
    set
  }
  public var audioMulticastTtl: Swift.Int {
    get
  }
  public func setAudiomulticastttl(newValue: Swift.Int) throws
  public var audioPayloadTypes: [WiFiWirelessSDK.PayloadType] {
    get
    set
  }
  public var audioPort: Swift.Int {
    get
    set
  }
  public var audioPortsRange: WiFiWirelessSDK.Range? {
    get
  }
  public var authInfoList: [WiFiWirelessSDK.AuthInfo] {
    get
  }
  public var autoDownloadIcalendarsEnabled: Swift.Bool {
    get
    set
  }
  public var autoDownloadVoiceRecordingsEnabled: Swift.Bool {
    get
    set
  }
  public var autoIterateBackgroundSchedule: Swift.Int {
    get
    set
  }
  public var autoIterateEnabled: Swift.Bool {
    get
    set
  }
  public var autoIterateForegroundSchedule: Swift.Int {
    get
    set
  }
  public var autoSendRingingEnabled: Swift.Bool {
    get
    set
  }
  public var automaticHttpProxyDetectionEnabled: Swift.Bool {
    get
    set
  }
  public var avpfMode: WiFiWirelessSDK.AVPFMode {
    get
    set
  }
  public var avpfRrInterval: Swift.Int {
    get
    set
  }
  public var callLogs: [WiFiWirelessSDK.CallLog] {
    get
  }
  public var callLogsDatabasePath: Swift.String? {
    @available(*, deprecated)
    get
    @available(*, deprecated)
    set
  }
  public var callToneIndicationsEnabled: Swift.Bool {
    get
    set
  }
  public var callkitEnabled: Swift.Bool {
    get
    set
  }
  public var calls: [WiFiWirelessSDK.Call] {
    get
  }
  public var callsNb: Swift.Int {
    get
  }
  public var cameraSensorRotation: Swift.Int {
    get
  }
  public var capabilityNegociationEnabled: Swift.Bool {
    get
    set
  }
  public var capabilityNegotiationReinviteEnabled: Swift.Bool {
    get
    set
  }
  public var captureDevice: Swift.String? {
    get
  }
  public func setCapturedevice(newValue: Swift.String) throws
  public var cfgLinesMergingEnabled: Swift.Bool {
    get
    set
  }
  public var chatEnabled: Swift.Bool {
    get
  }
  public var chatMessagesAggregationEnabled: Swift.Bool {
    get
    set
  }
  public var chatRooms: [WiFiWirelessSDK.ChatRoom] {
    get
  }
  @available(*, deprecated)
  public var conference: WiFiWirelessSDK.Conference? {
    get
  }
  public var conferenceIcsInMessageBodyEnabled: Swift.Bool {
    get
    set
  }
  public var conferenceInformationList: [WiFiWirelessSDK.ConferenceInfo] {
    get
  }
  public var conferenceLocalInputVolume: Swift.Float {
    get
  }
  public var conferenceParticipantListType: WiFiWirelessSDK.Conference.ParticipantListType {
    get
    set
  }
  public var conferenceServerEnabled: Swift.Bool {
    get
    set
  }
  @available(*, deprecated)
  public var conferenceSize: Swift.Int {
    get
  }
  public var config: WiFiWirelessSDK.Config? {
    get
  }
  public var consolidatedPresence: WiFiWirelessSDK.ConsolidatedPresence {
    get
    set
  }
  public var currentCall: WiFiWirelessSDK.Call? {
    get
  }
  public var currentCallRemoteAddress: WiFiWirelessSDK.Address? {
    get
  }
  public var currentDelegate: (any WiFiWirelessSDK.CoreDelegate)? {
    get
  }
  public var currentPreviewVideoDefinition: WiFiWirelessSDK.VideoDefinition? {
    get
  }
  public var defaultAccount: WiFiWirelessSDK.Account? {
    get
    set
  }
  public var defaultConferenceLayout: WiFiWirelessSDK.Conference.Layout {
    get
    set
  }
  public var defaultEphemeralLifetime: Swift.Int {
    get
    set
  }
  public var defaultFriendList: WiFiWirelessSDK.FriendList? {
    get
  }
  public var defaultInputAudioDevice: WiFiWirelessSDK.AudioDevice? {
    get
    set
  }
  public var defaultOutputAudioDevice: WiFiWirelessSDK.AudioDevice? {
    get
    set
  }
  public var defaultProxyConfig: WiFiWirelessSDK.ProxyConfig? {
    get
    set
  }
  public var defaultVideoDisplayFilter: Swift.String {
    get
  }
  public var delayedTimeout: Swift.Int {
    get
    set
  }
  public var deviceRotation: Swift.Int {
    get
    set
  }
  public var digestAuthenticationPolicy: WiFiWirelessSDK.DigestAuthenticationPolicy? {
    get
    set
  }
  public var disableRecordOnMute: Swift.Bool {
    get
    set
  }
  public var dnsSearchEnabled: Swift.Bool {
    get
    set
  }
  public var dnsServers: [Swift.String] {
    get
    set
  }
  public var dnsServersApp: [Swift.String] {
    get
    set
  }
  public var dnsSetByApp: Swift.Bool {
    get
  }
  public var dnsSrvEnabled: Swift.Bool {
    get
    set
  }
  public var downloadBandwidth: Swift.Int {
    get
    set
  }
  public var downloadPtime: Swift.Int {
    get
    set
  }
  public var echoCancellationCalibration: Swift.Int {
    get
  }
  public var echoCancellationEnabled: Swift.Bool {
    get
    set
  }
  public var echoCancellerFilterName: Swift.String? {
    get
    set
  }
  public var echoLimiterEnabled: Swift.Bool {
    get
    set
  }
  public var enableSipUpdate: Swift.Int {
    get
    set
  }
  public var expectedBandwidth: Swift.Int {
    get
    set
  }
  public var extendedAudioDevices: [WiFiWirelessSDK.AudioDevice] {
    get
  }
  public var fileTransferServer: Swift.String? {
    get
    set
  }
  public var forcedIceRelayEnabled: Swift.Bool {
    get
    set
  }
  public var friendListSubscriptionEnabled: Swift.Bool {
    get
    set
  }
  public var friendsDatabasePath: Swift.String? {
    get
    set
  }
  public var friendsLists: [WiFiWirelessSDK.FriendList] {
    get
  }
  public var futureConferenceInformationList: [WiFiWirelessSDK.ConferenceInfo] {
    get
  }
  public var genericComfortNoiseEnabled: Swift.Bool {
    get
    set
  }
  public var globalState: WiFiWirelessSDK.GlobalState {
    get
  }
  public var guessHostname: Swift.Bool {
    get
    set
  }
  public var httpProxyHost: Swift.String? {
    get
    set
  }
  public var httpProxyPort: Swift.Int {
    get
    set
  }
  public var identity: Swift.String {
    get
  }
  public var imNotifPolicy: WiFiWirelessSDK.ImNotifPolicy? {
    get
  }
  public var inCallTimeout: Swift.Int {
    get
    set
  }
  public var incTimeout: Swift.Int {
    get
    set
  }
  public var inputAudioDevice: WiFiWirelessSDK.AudioDevice? {
    get
    set
  }
  public var ipv6Enabled: Swift.Bool {
    get
    set
  }
  @available(*, deprecated)
  public var isAutoDownloadIcalendarsEnabled: Swift.Bool {
    get
  }
  @available(*, deprecated)
  public var isAutoDownloadVoiceRecordingsEnabled: Swift.Bool {
    get
  }
  @available(*, deprecated)
  public var isAutoIterateEnabled: Swift.Bool {
    get
  }
  public var isEchoCancellerCalibrationRequired: Swift.Bool {
    get
  }
  @available(*, deprecated)
  public var isFriendListSubscriptionEnabled: Swift.Bool {
    get
  }
  public var isInBackground: Swift.Bool {
    get
  }
  @available(*, deprecated)
  public var isInConference: Swift.Bool {
    get
  }
  public var isIncomingInvitePending: Swift.Bool {
    get
  }
  public var isMediaEncryptionMandatory: Swift.Bool {
    get
  }
  @available(*, deprecated)
  public var isNativeRingingEnabled: Swift.Bool {
    get
  }
  public var isNetworkReachable: Swift.Bool {
    get
  }
  public var isPushNotificationAvailable: Swift.Bool {
    get
  }
  @available(*, deprecated)
  public var isPushNotificationEnabled: Swift.Bool {
    get
  }
  @available(*, deprecated)
  public var isRecordAwareEnabled: Swift.Bool {
    get
  }
  public var isSenderNameHiddenInForwardMessage: Swift.Bool {
    get
  }
  public var isVerifyServerCertificates: Swift.Bool {
    get
  }
  public var isVerifyServerCn: Swift.Bool {
    get
  }
  @available(*, deprecated)
  public var isVibrationOnIncomingCallEnabled: Swift.Bool {
    get
  }
  public var keepAliveEnabled: Swift.Bool {
    get
    set
  }
  public var label: Swift.String {
    get
    set
  }
  public var lastOutgoingCallLog: WiFiWirelessSDK.CallLog? {
    get
  }
  public var ldapList: [WiFiWirelessSDK.Ldap] {
    get
  }
  public var limeX3DhEnabled: Swift.Bool {
    get
    set
  }
  public var limeX3DhServerUrl: Swift.String? {
    @available(*, deprecated)
    get
    @available(*, deprecated)
    set
  }
  public var linphoneSpecsList: [Swift.String] {
    get
    set
  }
  public var loadedPlugins: [Swift.String] {
    get
  }
  public var localPermissionEnabled: Swift.Bool {
    get
  }
  public var logCollectionUploadServerUrl: Swift.String? {
    get
    set
  }
  public var maxCalls: Swift.Int {
    get
    set
  }
  public var maxSizeForAutoDownloadIncomingFiles: Swift.Int {
    get
    set
  }
  public var mediaDevice: Swift.String? {
    get
  }
  public func setMediadevice(newValue: Swift.String) throws
  public var mediaEncryption: WiFiWirelessSDK.MediaEncryption {
    get
  }
  public func setMediaencryption(newValue: WiFiWirelessSDK.MediaEncryption) throws
  public var mediaEncryptionMandatory: Swift.Bool? {
    get
    set
  }
  public var mediaNetworkReachable: Swift.Bool? {
    get
    set
  }
  public var mediaResourceMode: WiFiWirelessSDK.MediaResourceMode {
    get
    set
  }
  public var micEnabled: Swift.Bool {
    get
    set
  }
  public var micGainDb: Swift.Float {
    get
    set
  }
  public var missedCallsCount: Swift.Int {
    get
  }
  public var mtu: Swift.Int {
    get
    set
  }
  public var natAddress: Swift.String? {
    @available(*, deprecated)
    get
    @available(*, deprecated)
    set
  }
  public var natPolicy: WiFiWirelessSDK.NatPolicy? {
    get
    set
  }
  public var nativePreviewWindowId: Swift.UnsafeMutableRawPointer? {
    get
    set
  }
  public var nativeRingingEnabled: Swift.Bool {
    get
    set
  }
  public var nativeVideoWindowId: Swift.UnsafeMutableRawPointer? {
    get
    set
  }
  public var networkReachable: Swift.Bool? {
    get
    set
  }
  public var nortpTimeout: Swift.Int {
    get
    set
  }
  public var outputAudioDevice: WiFiWirelessSDK.AudioDevice? {
    get
    set
  }
  public var playFile: Swift.String? {
    get
    set
  }
  public var playbackDevice: Swift.String? {
    get
  }
  public func setPlaybackdevice(newValue: Swift.String) throws
  public var playbackGainDb: Swift.Float {
    get
    set
  }
  public var preferredFramerate: Swift.Float {
    get
    set
  }
  public var preferredVideoDefinition: WiFiWirelessSDK.VideoDefinition? {
    get
    set
  }
  public var preferredVideoDefinitionByName: Swift.String {
    get
    set
  }
  public var presenceModel: WiFiWirelessSDK.PresenceModel? {
    get
    set
  }
  public var previewVideoDefinition: WiFiWirelessSDK.VideoDefinition? {
    get
    set
  }
  public var previewVideoDefinitionByName: Swift.String {
    get
    set
  }
  public var primaryContact: Swift.String {
    get
  }
  public func setPrimarycontact(newValue: Swift.String) throws
  @available(*, deprecated)
  public var primaryContactParsed: WiFiWirelessSDK.Address? {
    get
  }
  public var provisioningUri: Swift.String? {
    get
  }
  public func setProvisioninguri(newValue: Swift.String) throws
  public var proxyConfigList: [WiFiWirelessSDK.ProxyConfig] {
    get
  }
  public var pushIncomingCallTimeout: Swift.Int {
    get
    set
  }
  public var pushNotificationConfig: WiFiWirelessSDK.PushNotificationConfig? {
    get
  }
  public var pushNotificationEnabled: Swift.Bool {
    get
    set
  }
  public var qrcodeVideoPreviewEnabled: Swift.Bool {
    get
    set
  }
  public var realtimeTextEnabled: Swift.Bool {
    get
  }
  public var recordAwareEnabled: Swift.Bool {
    get
    set
  }
  public var recordFile: Swift.String? {
    get
    set
  }
  public var remoteRingbackTone: Swift.String? {
    get
    set
  }
  public var retransmissionOnNackEnabled: Swift.Bool {
    get
    set
  }
  public var ring: Swift.String? {
    get
    set
  }
  public var ringDuringIncomingEarlyMedia: Swift.Bool {
    get
    set
  }
  public var ringback: Swift.String? {
    get
    set
  }
  public var ringerDevice: Swift.String? {
    get
  }
  public func setRingerdevice(newValue: Swift.String) throws
  public var rootCa: Swift.String? {
    get
    set
  }
  public var rootCaData: Swift.String {
    get
    set
  }
  public var rtpBundleEnabled: Swift.Bool {
    get
    set
  }
  public var sdp200AckEnabled: Swift.Bool {
    get
    set
  }
  public var selfViewEnabled: Swift.Bool {
    get
    set
  }
  public var senderNameHiddenInForwardMessageEnabled: Swift.Bool? {
    get
    set
  }
  public var sessionExpiresEnabled: Swift.Bool {
    get
    set
  }
  public var sessionExpiresMinValue: Swift.Int {
    get
    set
  }
  public var sessionExpiresRefresherValue: WiFiWirelessSDK.SessionExpiresRefresher {
    get
    set
  }
  public var sessionExpiresValue: Swift.Int {
    get
    set
  }
  public var sipDscp: Swift.Int {
    get
    set
  }
  public var sipNetworkReachable: Swift.Bool? {
    get
    set
  }
  public var sipTransportTimeout: Swift.Int {
    get
    set
  }
  @available(*, deprecated)
  public var soundDevicesList: [Swift.String] {
    get
  }
  public var srtpCryptoSuites: Swift.String {
    get
    set
  }
  public var staticPicture: Swift.String? {
    get
  }
  public func setStaticpicture(newValue: Swift.String) throws
  public var staticPictureFps: Swift.Float {
    get
  }
  public func setStaticpicturefps(newValue: Swift.Float) throws
  public var stunServer: Swift.String? {
    get
    set
  }
  public var supportedFileFormatsList: [Swift.String] {
    get
  }
  public var supportedTag: Swift.String {
    get
    set
  }
  public var tag100RelSupportLevel: WiFiWirelessSDK.SupportLevel {
    get
    set
  }
  public var tcapLineMergingEnabled: Swift.Bool? {
    get
    set
  }
  public var tcapLinesMergingEnabled: Swift.Bool {
    get
  }
  public var textPayloadTypes: [WiFiWirelessSDK.PayloadType] {
    get
    set
  }
  public var textPort: Swift.Int {
    get
    set
  }
  public var textPortsRange: WiFiWirelessSDK.Range? {
    get
  }
  public var tlsCert: Swift.String? {
    get
    set
  }
  public var tlsCertPath: Swift.String? {
    get
    set
  }
  public var tlsKey: Swift.String? {
    get
    set
  }
  public var tlsKeyPath: Swift.String? {
    get
    set
  }
  public var transports: WiFiWirelessSDK.Transports? {
    get
  }
  public func setTransports(newValue: WiFiWirelessSDK.Transports) throws
  public var transportsUsed: WiFiWirelessSDK.Transports? {
    get
  }
  public var tunnel: WiFiWirelessSDK.Tunnel? {
    get
  }
  public var unreadChatMessageCount: Swift.Int {
    get
  }
  public var unreadChatMessageCountFromActiveLocals: Swift.Int {
    get
  }
  public var uploadBandwidth: Swift.Int {
    get
    set
  }
  public var uploadPtime: Swift.Int {
    get
    set
  }
  public var upnpExternalIpaddress: Swift.String? {
    get
  }
  public var upnpState: WiFiWirelessSDK.UpnpState {
    get
  }
  public var useFiles: Swift.Bool {
    get
    set
  }
  public var useInfoForDtmf: Swift.Bool {
    get
    set
  }
  public var useRfc2833ForDtmf: Swift.Bool {
    get
    set
  }
  public var userAgent: Swift.String {
    get
  }
  public var userCertificatesPath: Swift.String? {
    get
    set
  }
  public var userData: Swift.UnsafeMutableRawPointer? {
    get
    set
  }
  public var vibrationOnIncomingCallEnabled: Swift.Bool {
    get
    set
  }
  public var videoActivationPolicy: WiFiWirelessSDK.VideoActivationPolicy? {
    get
    set
  }
  public var videoAdaptiveJittcompEnabled: Swift.Bool {
    get
    set
  }
  public var videoCaptureEnabled: Swift.Bool {
    get
    set
  }
  public var videoCodecPriorityPolicy: WiFiWirelessSDK.CodecPriorityPolicy {
    get
    set
  }
  public var videoDevice: Swift.String? {
    get
  }
  public func setVideodevice(newValue: Swift.String) throws
  public var videoDevicesList: [Swift.String] {
    get
  }
  public var videoDisplayEnabled: Swift.Bool {
    get
    set
  }
  public var videoDisplayFilter: Swift.String? {
    get
    set
  }
  public var videoDscp: Swift.Int {
    get
    set
  }
  public var videoEnabled: Swift.Bool {
    get
  }
  public var videoJittcomp: Swift.Int {
    get
    set
  }
  public var videoMulticastAddr: Swift.String? {
    get
  }
  public func setVideomulticastaddr(newValue: Swift.String) throws
  public var videoMulticastEnabled: Swift.Bool {
    get
    set
  }
  public var videoMulticastTtl: Swift.Int {
    get
  }
  public func setVideomulticastttl(newValue: Swift.Int) throws
  public var videoPayloadTypes: [WiFiWirelessSDK.PayloadType] {
    get
    set
  }
  public var videoPort: Swift.Int {
    get
    set
  }
  public var videoPortsRange: WiFiWirelessSDK.Range? {
    get
  }
  public var videoPreset: Swift.String? {
    get
    set
  }
  public var videoPreviewEnabled: Swift.Bool {
    get
    set
  }
  public var videoSourceReuseEnabled: Swift.Bool? {
    get
    set
  }
  public var wifiOnlyEnabled: Swift.Bool {
    get
    set
  }
  public var zeroRtpPortForStreamInactiveEnabled: Swift.Bool {
    get
    set
  }
  public var zrtpGoClearEnabled: Swift.Bool {
    get
    set
  }
  public var zrtpSecretsFile: Swift.String? {
    get
    set
  }
  public func activateAudioSession(actived: Swift.Bool)
  public func addAccount(account: WiFiWirelessSDK.Account) throws
  public func addAllToConference() throws
  public func addAuthInfo(info: WiFiWirelessSDK.AuthInfo)
  public func addContentTypeSupport(contentType: Swift.String)
  public func addFriendList(list: WiFiWirelessSDK.FriendList)
  public func addLdap(ldap: WiFiWirelessSDK.Ldap)
  public func addLinphoneSpec(spec: Swift.String)
  public func addProvisioningHeader(headerName: Swift.String, value: Swift.String)
  public func addProxyConfig(config: WiFiWirelessSDK.ProxyConfig) throws
  public func addSupportedTag(tag: Swift.String)
  public func addToConference(call: WiFiWirelessSDK.Call) throws
  @available(*, deprecated)
  public func audioRouteChanged()
  public func chatRoomGetDefaultEphemeralMode() -> WiFiWirelessSDK.ChatRoom.EphemeralMode
  public func chatRoomSetDefaultEphemeralMode(mode: WiFiWirelessSDK.ChatRoom.EphemeralMode)
  public func checkForUpdate(currentVersion: Swift.String)
  public func clearAccounts()
  public func clearAllAuthInfo()
  public func clearCallLogs()
  public func clearLdaps()
  public func clearProvisioningHeaders()
  public func clearProxyConfig()
  public func configSync() throws
  public func configureAudioSession()
  public func createAccount(params: WiFiWirelessSDK.AccountParams) throws -> WiFiWirelessSDK.Account
  public func createAccountCreator(xmlrpcUrl: Swift.String?) throws -> WiFiWirelessSDK.AccountCreator
  public func createAccountParams() throws -> WiFiWirelessSDK.AccountParams
  public func createAddress(address: Swift.String?) throws -> WiFiWirelessSDK.Address
  public func createCallLog(from: WiFiWirelessSDK.Address, to: WiFiWirelessSDK.Address, dir: WiFiWirelessSDK.Call.Dir, duration: Swift.Int, startTime: Darwin.time_t, connectedTime: Darwin.time_t, status: WiFiWirelessSDK.Call.Status, videoEnabled: Swift.Bool, quality: Swift.Float) throws -> WiFiWirelessSDK.CallLog
  public func createCallParams(call: WiFiWirelessSDK.Call?) throws -> WiFiWirelessSDK.CallParams
  public func createChatRoom(params: WiFiWirelessSDK.ChatRoomParams, localAddr: WiFiWirelessSDK.Address?, participants: [WiFiWirelessSDK.Address]) throws -> WiFiWirelessSDK.ChatRoom
  @available(*, deprecated)
  public func createChatRoom(params: WiFiWirelessSDK.ChatRoomParams, localAddr: WiFiWirelessSDK.Address, subject: Swift.String, participants: [WiFiWirelessSDK.Address]) throws -> WiFiWirelessSDK.ChatRoom
  @available(*, deprecated)
  public func createChatRoom(params: WiFiWirelessSDK.ChatRoomParams, subject: Swift.String, participants: [WiFiWirelessSDK.Address]) throws -> WiFiWirelessSDK.ChatRoom
  @available(*, deprecated)
  public func createChatRoom(subject: Swift.String, participants: [WiFiWirelessSDK.Address]) throws -> WiFiWirelessSDK.ChatRoom
  @available(*, deprecated)
  public func createChatRoom(params: WiFiWirelessSDK.ChatRoomParams, localAddr: WiFiWirelessSDK.Address, participant: WiFiWirelessSDK.Address) throws -> WiFiWirelessSDK.ChatRoom
  @available(*, deprecated)
  public func createChatRoom(participant: WiFiWirelessSDK.Address) throws -> WiFiWirelessSDK.ChatRoom
  public func createConferenceParams(conference: WiFiWirelessSDK.Conference?) throws -> WiFiWirelessSDK.ConferenceParams
  public func createConferenceScheduler() throws -> WiFiWirelessSDK.ConferenceScheduler
  public func createConferenceWithParams(params: WiFiWirelessSDK.ConferenceParams) throws -> WiFiWirelessSDK.Conference
  public func createConfig(filename: Swift.String?) throws -> WiFiWirelessSDK.Config
  public func createContent() throws -> WiFiWirelessSDK.Content
  public func createDefaultChatRoomParams() throws -> WiFiWirelessSDK.ChatRoomParams
  public func createFriend() throws -> WiFiWirelessSDK.Friend
  public func createFriendList() throws -> WiFiWirelessSDK.FriendList
  public func createFriendWithAddress(address: Swift.String) throws -> WiFiWirelessSDK.Friend
  public func createInfoMessage() throws -> WiFiWirelessSDK.InfoMessage
  public func createLdap() throws -> WiFiWirelessSDK.Ldap
  public func createLdapParams() throws -> WiFiWirelessSDK.LdapParams
  public func createLdapWithParams(params: WiFiWirelessSDK.LdapParams) throws -> WiFiWirelessSDK.Ldap
  public func createLocalPlayer(soundCardName: Swift.String?, videoDisplayName: Swift.String?, windowId: Swift.UnsafeMutableRawPointer?) throws -> WiFiWirelessSDK.Player
  public func createMagicSearch() throws -> WiFiWirelessSDK.MagicSearch
  public func createNatPolicy() throws -> WiFiWirelessSDK.NatPolicy
  public func createNativePreviewWindowId() throws -> Swift.UnsafeMutableRawPointer
  public func createNativeVideoWindowId() throws -> Swift.UnsafeMutableRawPointer
  public func createNotify(resource: WiFiWirelessSDK.Address, event: Swift.String) throws -> WiFiWirelessSDK.Event
  public func createOneShotPublish(resource: WiFiWirelessSDK.Address, event: Swift.String) throws -> WiFiWirelessSDK.Event
  public func createPresenceActivity(acttype: WiFiWirelessSDK.PresenceActivity.Kind, description: Swift.String?) throws -> WiFiWirelessSDK.PresenceActivity
  public func createPresenceModel() throws -> WiFiWirelessSDK.PresenceModel
  public func createPresenceModelWithActivity(acttype: WiFiWirelessSDK.PresenceActivity.Kind, description: Swift.String?) throws -> WiFiWirelessSDK.PresenceModel
  public func createPresenceModelWithActivityAndNote(acttype: WiFiWirelessSDK.PresenceActivity.Kind, description: Swift.String?, note: Swift.String, lang: Swift.String?) throws -> WiFiWirelessSDK.PresenceModel
  public func createPresenceNote(content: Swift.String, lang: Swift.String?) throws -> WiFiWirelessSDK.PresenceNote
  public func createPresencePerson(id: Swift.String) throws -> WiFiWirelessSDK.PresencePerson
  public func createPresenceService(id: Swift.String, basicStatus: WiFiWirelessSDK.PresenceBasicStatus, contact: Swift.String) throws -> WiFiWirelessSDK.PresenceService
  public func createPrimaryContactParsed() throws -> WiFiWirelessSDK.Address
  public func createProxyConfig() throws -> WiFiWirelessSDK.ProxyConfig
  public func createPublish(resource: WiFiWirelessSDK.Address, event: Swift.String, expires: Swift.Int) throws -> WiFiWirelessSDK.Event
  public func createRecorder(params: WiFiWirelessSDK.RecorderParams) throws -> WiFiWirelessSDK.Recorder
  public func createRecorderParams() throws -> WiFiWirelessSDK.RecorderParams
  public func createSubscribe(resource: WiFiWirelessSDK.Address, event: Swift.String, expires: Swift.Int) throws -> WiFiWirelessSDK.Event
  public func createSubscribe(resource: WiFiWirelessSDK.Address, proxy: WiFiWirelessSDK.ProxyConfig, event: Swift.String, expires: Swift.Int) throws -> WiFiWirelessSDK.Event
  public func createXmlRpcSession(url: Swift.String) throws -> WiFiWirelessSDK.XmlRpcSession
  public func deleteChatRoom(chatRoom: WiFiWirelessSDK.ChatRoom)
  public func deleteConferenceInformation(conferenceInfo: WiFiWirelessSDK.ConferenceInfo)
  public func didRegisterForRemotePush(deviceToken: Swift.UnsafeMutableRawPointer?)
  public func didRegisterForRemotePushWithStringifiedToken(deviceTokenStr: Swift.String?)
  public func disableChat(denyReason: WiFiWirelessSDK.Reason)
  public func enableChat()
  @available(*, deprecated)
  public func ensureRegistered()
  public func enterBackground()
  @available(*, deprecated)
  public func enterConference() throws
  public func enterForeground()
  public func fileFormatSupported(fmt: Swift.String) -> Swift.Bool
  public func findAuthInfo(realm: Swift.String?, username: Swift.String, sipDomain: Swift.String?) -> WiFiWirelessSDK.AuthInfo?
  @available(*, deprecated)
  public func findCallFromUri(uri: Swift.String) -> WiFiWirelessSDK.Call?
  public func findCallLog(callId: Swift.String, limit: Swift.Int) -> WiFiWirelessSDK.CallLog?
  public func findCallLogFromCallId(callId: Swift.String) -> WiFiWirelessSDK.CallLog?
  @available(*, deprecated)
  public func findChatRoom(peerAddr: WiFiWirelessSDK.Address, localAddr: WiFiWirelessSDK.Address) -> WiFiWirelessSDK.ChatRoom?
  public func findConferenceInformationFromUri(uri: WiFiWirelessSDK.Address) -> WiFiWirelessSDK.ConferenceInfo?
  public func findContactsByChar(filter: Swift.String, sipOnly: Swift.Bool) -> [WiFiWirelessSDK.Address]
  public func findFriend(address: WiFiWirelessSDK.Address) -> WiFiWirelessSDK.Friend?
  public func findFriendByPhoneNumber(phoneNumber: Swift.String) -> WiFiWirelessSDK.Friend?
  public func findFriends(address: WiFiWirelessSDK.Address) -> [WiFiWirelessSDK.Friend]
  @available(*, deprecated)
  public func findOneToOneChatRoom(localAddr: WiFiWirelessSDK.Address, participantAddr: WiFiWirelessSDK.Address, encrypted: Swift.Bool) -> WiFiWirelessSDK.ChatRoom?
  public func getAccountByIdkey(idkey: Swift.String?) -> WiFiWirelessSDK.Account?
  public func getCallByCallid(callId: Swift.String) -> WiFiWirelessSDK.Call?
  @available(*, deprecated)
  public func getCallByRemoteAddress(remoteAddress: Swift.String) -> WiFiWirelessSDK.Call?
  public func getCallByRemoteAddress2(remoteAddress: WiFiWirelessSDK.Address) -> WiFiWirelessSDK.Call?
  public func getCallHistory(peerAddress: WiFiWirelessSDK.Address, localAddress: WiFiWirelessSDK.Address) -> [WiFiWirelessSDK.CallLog]
  @available(*, deprecated)
  public func getChatRoom(addr: WiFiWirelessSDK.Address) -> WiFiWirelessSDK.ChatRoom?
  @available(*, deprecated)
  public func getChatRoom(peerAddr: WiFiWirelessSDK.Address, localAddr: WiFiWirelessSDK.Address) -> WiFiWirelessSDK.ChatRoom?
  @available(*, deprecated)
  public func getChatRoomFromUri(to: Swift.String) -> WiFiWirelessSDK.ChatRoom?
  public func getConferenceInformationListAfterTime(time: Darwin.time_t) -> [WiFiWirelessSDK.ConferenceInfo]
  public func getFriendByRefKey(key: Swift.String) -> WiFiWirelessSDK.Friend?
  public func getFriendListByName(name: Swift.String) -> WiFiWirelessSDK.FriendList?
  public func getNewChatRoomFromConfAddr(chatRoomAddr: Swift.String) -> WiFiWirelessSDK.ChatRoom?
  public func getNewMessageFromCallid(callId: Swift.String) -> WiFiWirelessSDK.PushNotificationMessage?
  public func getPayloadType(type: Swift.String, rate: Swift.Int, channels: Swift.Int) -> WiFiWirelessSDK.PayloadType?
  public func getProxyConfigByIdkey(idkey: Swift.String) -> WiFiWirelessSDK.ProxyConfig?
  public func getUnreadChatMessageCountFromLocal(address: WiFiWirelessSDK.Address) -> Swift.Int
  public func getZrtpStatus(addr: Swift.String) -> WiFiWirelessSDK.ZrtpPeerStatus
  public func hasBuiltinEchoCanceller() -> Swift.Bool
  public func hasCrappyOpengl() -> Swift.Bool
  public func inCall() -> Swift.Bool
  @available(*, deprecated)
  public func interpretUrl(url: Swift.String) -> WiFiWirelessSDK.Address?
  public func interpretUrl(url: Swift.String, applyInternationalPrefix: Swift.Bool) -> WiFiWirelessSDK.Address?
  public func invite(url: Swift.String) -> WiFiWirelessSDK.Call?
  public func inviteAddress(addr: WiFiWirelessSDK.Address) -> WiFiWirelessSDK.Call?
  public func inviteAddressWithParams(addr: WiFiWirelessSDK.Address, params: WiFiWirelessSDK.CallParams) -> WiFiWirelessSDK.Call?
  public func inviteAddressWithParams(addr: WiFiWirelessSDK.Address, params: WiFiWirelessSDK.CallParams, subject: Swift.String?, content: WiFiWirelessSDK.Content?) -> WiFiWirelessSDK.Call?
  public func inviteWithParams(url: Swift.String, params: WiFiWirelessSDK.CallParams) -> WiFiWirelessSDK.Call?
  public func isContentTypeSupported(contentType: Swift.String) -> Swift.Bool
  public func isMediaEncryptionSupported(menc: WiFiWirelessSDK.MediaEncryption) -> Swift.Bool
  public func isMediaFilterSupported(filtername: Swift.String) -> Swift.Bool
  public func isPluginLoaded(name: Swift.String) -> Swift.Bool
  public func iterate()
  public func ldapAvailable() -> Swift.Bool
  @available(*, deprecated)
  public func leaveConference() throws
  public func limeX3DhAvailable() -> Swift.Bool
  public func loadConfigFromXml(xmlUri: Swift.String)
  public func mediaEncryptionSupported(menc: WiFiWirelessSDK.MediaEncryption) -> Swift.Bool
  public func migrateLogsFromRcToDb()
  public func migrateToMultiTransport() throws
  public func notifyAllFriends(presence: WiFiWirelessSDK.PresenceModel)
  public func notifyNotifyPresenceReceived(linphoneFriend: WiFiWirelessSDK.Friend)
  public func notifyNotifyPresenceReceivedForUriOrTel(linphoneFriend: WiFiWirelessSDK.Friend, uriOrTel: Swift.String, presenceModel: WiFiWirelessSDK.PresenceModel)
  public func pauseAllCalls() throws
  public func playDtmf(dtmf: Swift.CChar, durationMs: Swift.Int)
  public func playLocal(audiofile: Swift.String) throws
  public func preemptSoundResources() -> Swift.Int
  public func previewOglRender()
  public func processPushNotification(callId: Swift.String?)
  public func publish(resource: WiFiWirelessSDK.Address, event: Swift.String, expires: Swift.Int, body: WiFiWirelessSDK.Content) -> WiFiWirelessSDK.Event?
  public func realtimeTextGetKeepaliveInterval() -> Swift.UInt
  public func realtimeTextSetKeepaliveInterval(interval: Swift.UInt)
  public func refreshRegisters()
  public func rejectSubscriber(linphoneFriend: WiFiWirelessSDK.Friend)
  public func reloadMsPlugins(path: Swift.String?)
  public func reloadSoundDevices()
  public func reloadVideoDevices()
  public func removeAccount(account: WiFiWirelessSDK.Account)
  public func removeAuthInfo(info: WiFiWirelessSDK.AuthInfo)
  public func removeCallLog(callLog: WiFiWirelessSDK.CallLog)
  public func removeContentTypeSupport(contentType: Swift.String)
  public func removeFriendList(list: WiFiWirelessSDK.FriendList)
  public func removeFromConference(call: WiFiWirelessSDK.Call) throws
  public func removeLdap(ldap: WiFiWirelessSDK.Ldap)
  public func removeLinphoneSpec(spec: Swift.String)
  public func removeProxyConfig(config: WiFiWirelessSDK.ProxyConfig)
  public func removeSupportedTag(tag: Swift.String)
  public func resetEchoCancellationCalibration()
  public func resetMissedCallsCount()
  public func searchChatRoom(params: WiFiWirelessSDK.ChatRoomParams?, localAddr: WiFiWirelessSDK.Address?, remoteAddr: WiFiWirelessSDK.Address?, participants: [WiFiWirelessSDK.Address]?) -> WiFiWirelessSDK.ChatRoom?
  public func searchConference(params: WiFiWirelessSDK.ConferenceParams?, localAddr: WiFiWirelessSDK.Address?, remoteAddr: WiFiWirelessSDK.Address?, participants: [WiFiWirelessSDK.Address]?) -> WiFiWirelessSDK.Conference?
  public func searchConference(conferenceAddr: WiFiWirelessSDK.Address) -> WiFiWirelessSDK.Conference?
  public func setAudioPortRange(minPort: Swift.Int, maxPort: Swift.Int)
  public func setQrcodeDecodeRect(x: Swift.Int, y: Swift.Int, w: Swift.Int, h: Swift.Int)
  public func setTextPortRange(minPort: Swift.Int, maxPort: Swift.Int)
  public func setTone(toneId: WiFiWirelessSDK.ToneID, audiofile: Swift.String?)
  public func setUserAgent(name: Swift.String?, version: Swift.String?)
  public func setVideoPortRange(minPort: Swift.Int, maxPort: Swift.Int)
  @available(*, deprecated)
  public func soundDeviceCanCapture(device: Swift.String) -> Swift.Bool
  @available(*, deprecated)
  public func soundDeviceCanPlayback(device: Swift.String) -> Swift.Bool
  public func soundResourcesLocked() -> Swift.Bool
  public func start() throws
  @available(*, deprecated)
  public func startConferenceRecording(path: Swift.String) throws
  public func startEchoCancellerCalibration() throws
  public func startEchoTester(rate: Swift.UInt) throws
  public func stop()
  public func stopAsync()
  @available(*, deprecated)
  public func stopConferenceRecording() throws
  public func stopDtmf()
  public func stopEchoTester() throws
  public func stopRinging()
  public func subscribe(resource: WiFiWirelessSDK.Address, event: Swift.String, expires: Swift.Int, body: WiFiWirelessSDK.Content?) -> WiFiWirelessSDK.Event?
  public func takePreviewSnapshot(file: Swift.String) throws
  public func terminateAllCalls() throws
  public func terminateConference() throws
  public func uploadLogCollection()
  public func usePreviewWindow(yesno: Swift.Bool)
  public func verifyServerCertificates(yesno: Swift.Bool)
  public func verifyServerCn(yesno: Swift.Bool)
  public func videoSupported() -> Swift.Bool
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class DialPlan : WiFiWirelessSDK.LinphoneObject {
  public static func getSwiftObject(cObject: Swift.OpaquePointer) -> WiFiWirelessSDK.DialPlan
  public var getCobject: Swift.OpaquePointer? {
    get
  }
  public static func byCcc(ccc: Swift.String) -> WiFiWirelessSDK.DialPlan?
  public static func byCccAsInt(ccc: Swift.Int) -> WiFiWirelessSDK.DialPlan?
  public static var getAllList: [WiFiWirelessSDK.DialPlan] {
    get
  }
  public static func lookupCccFromE164(e164: Swift.String) -> Swift.Int
  public static func lookupCccFromIso(iso: Swift.String) -> Swift.Int
  public var country: Swift.String {
    get
  }
  public var countryCallingCode: Swift.String {
    get
  }
  public var flag: Swift.String {
    get
  }
  public var internationalCallPrefix: Swift.String {
    get
  }
  public var isGeneric: Swift.Bool {
    get
  }
  public var isoCountryCode: Swift.String {
    get
  }
  public var nationalNumberLength: Swift.Int {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class Dictionary : WiFiWirelessSDK.LinphoneObject {
  public static func getSwiftObject(cObject: Swift.OpaquePointer) -> WiFiWirelessSDK.Dictionary
  public var getCobject: Swift.OpaquePointer? {
    get
  }
  public func clear()
  public func clone() -> WiFiWirelessSDK.Dictionary?
  public func getFloat(key: Swift.String?) -> Swift.Float
  public func getInt(key: Swift.String?) -> Swift.Int
  public func getInt64(key: Swift.String?) -> Swift.Int64
  public func getString(key: Swift.String?) -> Swift.String
  public func hasKey(key: Swift.String?) throws
  public func remove(key: Swift.String?) throws
  public func setFloat(key: Swift.String?, value: Swift.Float)
  public func setInt(key: Swift.String?, value: Swift.Int)
  public func setInt64(key: Swift.String?, value: Swift.Int64)
  public func setString(key: Swift.String?, value: Swift.String)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class DigestAuthenticationPolicy : WiFiWirelessSDK.LinphoneObject {
  public static func getSwiftObject(cObject: Swift.OpaquePointer) -> WiFiWirelessSDK.DigestAuthenticationPolicy
  public var getCobject: Swift.OpaquePointer? {
    get
  }
  public var allowMd5: Swift.Bool {
    get
    set
  }
  public var allowNoQop: Swift.Bool {
    get
    set
  }
  public var userData: Swift.UnsafeMutableRawPointer? {
    get
    set
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class ErrorInfo : WiFiWirelessSDK.LinphoneObject {
  public static func getSwiftObject(cObject: Swift.OpaquePointer) -> WiFiWirelessSDK.ErrorInfo
  public var getCobject: Swift.OpaquePointer? {
    get
  }
  public var phrase: Swift.String? {
    get
    set
  }
  public var proto: Swift.String? {
    get
    set
  }
  public var protocolCode: Swift.Int {
    get
    set
  }
  public var reason: WiFiWirelessSDK.Reason {
    get
    set
  }
  public var retryAfter: Swift.Int {
    get
    set
  }
  public var subErrorInfo: WiFiWirelessSDK.ErrorInfo? {
    get
    set
  }
  public var warnings: Swift.String? {
    get
    set
  }
  public func set(proto: Swift.String?, reason: WiFiWirelessSDK.Reason, code: Swift.Int, status: Swift.String?, warning: Swift.String?)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class Event : WiFiWirelessSDK.LinphoneObject {
  public static func getSwiftObject(cObject: Swift.OpaquePointer) -> WiFiWirelessSDK.Event
  public var getCobject: Swift.OpaquePointer? {
    get
  }
  public func addDelegate(delegate: any WiFiWirelessSDK.EventDelegate)
  public func removeDelegate(delegate: any WiFiWirelessSDK.EventDelegate)
  public var core: WiFiWirelessSDK.Core? {
    get
  }
  public var currentDelegate: (any WiFiWirelessSDK.EventDelegate)? {
    get
  }
  public var errorInfo: WiFiWirelessSDK.ErrorInfo? {
    get
  }
  public var from: WiFiWirelessSDK.Address? {
    get
  }
  public var name: Swift.String {
    get
  }
  public var publishState: WiFiWirelessSDK.PublishState {
    get
  }
  public var reason: WiFiWirelessSDK.Reason {
    get
  }
  public var remoteContact: WiFiWirelessSDK.Address? {
    get
  }
  public var resource: WiFiWirelessSDK.Address? {
    get
  }
  public var subscriptionDir: WiFiWirelessSDK.SubscriptionDir {
    get
  }
  public var subscriptionState: WiFiWirelessSDK.SubscriptionState {
    get
  }
  public var to: WiFiWirelessSDK.Address? {
    get
  }
  public var userData: Swift.UnsafeMutableRawPointer? {
    get
    set
  }
  public func acceptPublish() throws
  public func acceptSubscription() throws
  public func addCustomHeader(name: Swift.String, value: Swift.String?)
  public func denyPublish(reason: WiFiWirelessSDK.Reason) throws
  public func denySubscription(reason: WiFiWirelessSDK.Reason) throws
  public func getCustomHeader(name: Swift.String) -> Swift.String
  public func notify(body: WiFiWirelessSDK.Content?) throws
  public func pausePublish()
  public func refreshPublish() throws
  public func refreshSubscribe() throws
  public func removeCustomHeader(name: Swift.String)
  public func sendPublish(body: WiFiWirelessSDK.Content) throws
  public func sendSubscribe(body: WiFiWirelessSDK.Content?) throws
  public func terminate()
  public func updatePublish(body: WiFiWirelessSDK.Content) throws
  public func updateSubscribe(body: WiFiWirelessSDK.Content?) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class EventLog : WiFiWirelessSDK.LinphoneObject {
  public static func getSwiftObject(cObject: Swift.OpaquePointer) -> WiFiWirelessSDK.EventLog
  public var getCobject: Swift.OpaquePointer? {
    get
  }
  public enum SecurityEventType : Swift.Int {
    case None
    case SecurityLevelDowngraded
    case ParticipantMaxDeviceCountExceeded
    case EncryptionIdentityKeyChanged
    case ManInTheMiddleDetected
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum Kind : Swift.Int {
    case None
    case ConferenceCreated
    case ConferenceTerminated
    case ConferenceCallStarted
    case ConferenceConnected
    case ConferenceCallEnded
    case ConferenceChatMessage
    case ConferenceParticipantAdded
    case ConferenceParticipantRemoved
    case ConferenceParticipantRoleUnknown
    case ConferenceParticipantRoleSpeaker
    case ConferenceParticipantRoleListener
    case ConferenceParticipantSetAdmin
    case ConferenceParticipantUnsetAdmin
    case ConferenceParticipantDeviceAdded
    case ConferenceParticipantDeviceRemoved
    case ConferenceParticipantDeviceMediaCapabilityChanged
    case ConferenceParticipantDeviceMediaAvailabilityChanged
    case ConferenceParticipantDeviceStatusChanged
    case ConferenceSubjectChanged
    case ConferenceAvailableMediaChanged
    case ConferenceSecurityEvent
    case ConferenceEphemeralMessageLifetimeChanged
    case ConferenceEphemeralMessageEnabled
    case ConferenceEphemeralMessageDisabled
    case ConferenceEphemeralMessageManagedByAdmin
    case ConferenceEphemeralMessageManagedByParticipants
    case ConferenceChatMessageReaction
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public var callLog: WiFiWirelessSDK.CallLog? {
    get
  }
  public var chatMessage: WiFiWirelessSDK.ChatMessage? {
    get
  }
  public var conferenceInfo: WiFiWirelessSDK.ConferenceInfo? {
    get
  }
  public var creationTime: Darwin.time_t {
    get
  }
  public var deviceAddress: WiFiWirelessSDK.Address? {
    get
  }
  public var ephemeralMessageLifetime: Swift.Int {
    get
  }
  public var localAddress: WiFiWirelessSDK.Address? {
    get
  }
  public var notifyId: Swift.UInt {
    get
  }
  public var participantAddress: WiFiWirelessSDK.Address? {
    get
  }
  public var peerAddress: WiFiWirelessSDK.Address? {
    get
  }
  public var securityEventFaultyDeviceAddress: WiFiWirelessSDK.Address? {
    get
  }
  public var securityEventType: WiFiWirelessSDK.EventLog.SecurityEventType {
    get
  }
  public var subject: Swift.String? {
    get
  }
  public var type: WiFiWirelessSDK.EventLog.Kind {
    get
  }
  public func deleteFromDatabase()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class Factory : WiFiWirelessSDK.LinphoneObject {
  public static func getSwiftObject(cObject: Swift.OpaquePointer) -> WiFiWirelessSDK.Factory
  public var getCobject: Swift.OpaquePointer? {
    get
  }
  public static func clean()
  public static var Instance: WiFiWirelessSDK.Factory {
    get
  }
  public var cacheDir: Swift.String {
    get
    set
  }
  public var configDir: Swift.String {
    get
    set
  }
  public var dataDir: Swift.String {
    get
    set
  }
  public var dataResourcesDir: Swift.String? {
    get
    set
  }
  public var dialPlans: [WiFiWirelessSDK.DialPlan] {
    get
  }
  public var downloadDir: Swift.String {
    get
    set
  }
  public var imageResourcesDir: Swift.String? {
    get
    set
  }
  public var isCacheDirSet: Swift.Bool {
    get
  }
  public var isConfigDirSet: Swift.Bool {
    get
  }
  public var isDataDirSet: Swift.Bool {
    get
  }
  public var isDatabaseStorageAvailable: Swift.Bool {
    get
  }
  public var isDownloadDirSet: Swift.Bool {
    get
  }
  public var isImdnAvailable: Swift.Bool {
    get
  }
  public var isQrcodeAvailable: Swift.Bool {
    get
  }
  public var liblinphonePluginsDir: Swift.String? {
    get
    set
  }
  public var logCollectionPath: Swift.String {
    get
    set
  }
  public var mspluginsDir: Swift.String? {
    get
    set
  }
  public var recommendedVideoDefinitions: [WiFiWirelessSDK.VideoDefinition] {
    get
  }
  public var ringResourcesDir: Swift.String? {
    get
    set
  }
  public var soundResourcesDir: Swift.String? {
    get
    set
  }
  public var supportedVideoDefinitions: [WiFiWirelessSDK.VideoDefinition] {
    get
  }
  public var topResourcesDir: Swift.String? {
    get
    set
  }
  public var userData: Swift.UnsafeMutableRawPointer? {
    get
    set
  }
  public func computeHa1ForAlgorithm(userid: Swift.String, password: Swift.String, realm: Swift.String, algorithm: Swift.String) -> Swift.String
  public func createAddress(addr: Swift.String) throws -> WiFiWirelessSDK.Address
  public func createAuthInfo(username: Swift.String, userid: Swift.String?, passwd: Swift.String?, ha1: Swift.String?, realm: Swift.String?, domain: Swift.String?) throws -> WiFiWirelessSDK.AuthInfo
  public func createAuthInfo(username: Swift.String, userid: Swift.String?, passwd: Swift.String?, ha1: Swift.String?, realm: Swift.String?, domain: Swift.String?, algorithm: Swift.String?) throws -> WiFiWirelessSDK.AuthInfo
  public func createBuffer() throws -> WiFiWirelessSDK.Buffer
  public func createBufferFromData(data: Swift.UnsafePointer<Swift.UInt8>, size: Swift.Int) throws -> WiFiWirelessSDK.Buffer
  public func createBufferFromString(data: Swift.String) throws -> WiFiWirelessSDK.Buffer
  public func createConferenceInfo() throws -> WiFiWirelessSDK.ConferenceInfo
  public func createConferenceInfoFromIcalendarContent(content: WiFiWirelessSDK.Content) throws -> WiFiWirelessSDK.ConferenceInfo
  public func createConfig(path: Swift.String?) throws -> WiFiWirelessSDK.Config
  public func createConfigFromString(data: Swift.String) throws -> WiFiWirelessSDK.Config
  public func createConfigWithFactory(path: Swift.String?, factoryPath: Swift.String?) throws -> WiFiWirelessSDK.Config
  public func createContent() throws -> WiFiWirelessSDK.Content
  public func createContentFromFile(filePath: Swift.String) throws -> WiFiWirelessSDK.Content
  public func createCore(configPath: Swift.String?, factoryConfigPath: Swift.String?, systemContext: Swift.UnsafeMutableRawPointer?) throws -> WiFiWirelessSDK.Core
  public func createCoreWithConfig(config: WiFiWirelessSDK.Config, systemContext: Swift.UnsafeMutableRawPointer?) throws -> WiFiWirelessSDK.Core
  public func createDigestAuthenticationPolicy() throws -> WiFiWirelessSDK.DigestAuthenticationPolicy
  public func createErrorInfo() throws -> WiFiWirelessSDK.ErrorInfo
  public func createFriendPhoneNumber(phoneNumber: Swift.String, label: Swift.String?) throws -> WiFiWirelessSDK.FriendPhoneNumber
  public func createParticipantDeviceIdentity(address: WiFiWirelessSDK.Address, name: Swift.String?) throws -> WiFiWirelessSDK.ParticipantDeviceIdentity
  public func createParticipantInfo(address: WiFiWirelessSDK.Address) throws -> WiFiWirelessSDK.ParticipantInfo
  public func createQrcode(code: Swift.String, width: Swift.UInt, height: Swift.UInt, margin: Swift.UInt) throws -> WiFiWirelessSDK.Content
  public func createRange() throws -> WiFiWirelessSDK.Range
  public func createSharedCore(configFilename: Swift.String?, factoryConfigPath: Swift.String?, systemContext: Swift.UnsafeMutableRawPointer?, appGroupId: Swift.String, mainCore: Swift.Bool) throws -> WiFiWirelessSDK.Core
  public func createSharedCoreWithConfig(config: WiFiWirelessSDK.Config, systemContext: Swift.UnsafeMutableRawPointer?, appGroupId: Swift.String, mainCore: Swift.Bool) throws -> WiFiWirelessSDK.Core
  public func createSignalInformation() throws -> WiFiWirelessSDK.SignalInformation
  public func createTransports() throws -> WiFiWirelessSDK.Transports
  public func createTunnelConfig() throws -> WiFiWirelessSDK.TunnelConfig
  public func createVcard() throws -> WiFiWirelessSDK.Vcard
  public func createVideoActivationPolicy() throws -> WiFiWirelessSDK.VideoActivationPolicy
  public func createVideoDefinition(width: Swift.UInt, height: Swift.UInt) throws -> WiFiWirelessSDK.VideoDefinition
  public func createVideoDefinitionFromName(name: Swift.String) throws -> WiFiWirelessSDK.VideoDefinition
  public func createVideoSourceDescriptor() throws -> WiFiWirelessSDK.VideoSourceDescriptor
  public func enableLogCollection(state: WiFiWirelessSDK.LogCollectionState)
  public func getCacheDir(context: Swift.UnsafeMutableRawPointer?) -> Swift.String
  public func getConfigDir(context: Swift.UnsafeMutableRawPointer?) -> Swift.String
  public func getDataDir(context: Swift.UnsafeMutableRawPointer?) -> Swift.String
  public func getDownloadDir(context: Swift.UnsafeMutableRawPointer?) -> Swift.String
  public func isChatroomBackendAvailable(chatroomBackend: WiFiWirelessSDK.ChatRoom.Backend) -> Swift.Bool
  public func setVfsEncryption(encryptionModule: Swift.UInt16, secret: Swift.UnsafePointer<Swift.UInt8>?, secretSize: Swift.Int)
  public func writeQrcodeFile(filePath: Swift.String, code: Swift.String, width: Swift.UInt, height: Swift.UInt, margin: Swift.UInt) -> Swift.Int
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class Friend : WiFiWirelessSDK.LinphoneObject {
  public static func getSwiftObject(cObject: Swift.OpaquePointer) -> WiFiWirelessSDK.Friend
  public var getCobject: Swift.OpaquePointer? {
    get
  }
  public struct Capability : Swift.OptionSet {
    public let rawValue: Swift.Int
    public init(rawValue: Swift.Int)
    public static let None: WiFiWirelessSDK.Friend.Capability
    public static let GroupChat: WiFiWirelessSDK.Friend.Capability
    public static let LimeX3Dh: WiFiWirelessSDK.Friend.Capability
    public static let EphemeralMessages: WiFiWirelessSDK.Friend.Capability
    public typealias ArrayLiteralElement = WiFiWirelessSDK.Friend.Capability
    public typealias Element = WiFiWirelessSDK.Friend.Capability
    public typealias RawValue = Swift.Int
  }
  public func addDelegate(delegate: any WiFiWirelessSDK.FriendDelegate)
  public func removeDelegate(delegate: any WiFiWirelessSDK.FriendDelegate)
  public static func newFromVcard(vcard: WiFiWirelessSDK.Vcard) -> WiFiWirelessSDK.Friend?
  public var address: WiFiWirelessSDK.Address? {
    get
  }
  public func setAddress(newValue: WiFiWirelessSDK.Address) throws
  public var addresses: [WiFiWirelessSDK.Address] {
    get
  }
  public var capabilities: Swift.Int {
    get
  }
  public var consolidatedPresence: WiFiWirelessSDK.ConsolidatedPresence {
    get
  }
  public var core: WiFiWirelessSDK.Core? {
    get
  }
  public var currentDelegate: (any WiFiWirelessSDK.FriendDelegate)? {
    get
  }
  public var incSubscribePolicy: WiFiWirelessSDK.SubscribePolicy {
    get
  }
  public func setIncsubscribepolicy(newValue: WiFiWirelessSDK.SubscribePolicy) throws
  public var isPresenceReceived: Swift.Bool {
    get
  }
  public var jobTitle: Swift.String? {
    get
    set
  }
  public var name: Swift.String? {
    get
  }
  public func setName(newValue: Swift.String) throws
  public var nativeUri: Swift.String? {
    get
    set
  }
  public var organization: Swift.String? {
    get
    set
  }
  public var phoneNumbers: [Swift.String] {
    get
  }
  public var phoneNumbersWithLabel: [WiFiWirelessSDK.FriendPhoneNumber] {
    get
  }
  public var photo: Swift.String? {
    get
    set
  }
  public var presenceModel: WiFiWirelessSDK.PresenceModel? {
    get
    set
  }
  public var refKey: Swift.String? {
    get
    set
  }
  public var starred: Swift.Bool {
    get
    set
  }
  public var subscribesEnabled: Swift.Bool {
    get
  }
  public func setSubscribesenabled(newValue: Swift.Bool) throws
  public var subscriptionState: WiFiWirelessSDK.SubscriptionState {
    get
  }
  public var userData: Swift.UnsafeMutableRawPointer? {
    get
    set
  }
  public var vcard: WiFiWirelessSDK.Vcard? {
    get
    set
  }
  public func addAddress(address: WiFiWirelessSDK.Address)
  public func addPhoneNumber(phoneNumber: Swift.String)
  public func addPhoneNumberWithLabel(phoneNumber: WiFiWirelessSDK.FriendPhoneNumber)
  public func createVcard(name: Swift.String?) throws -> Swift.Bool
  public func done()
  public func edit()
  public func getCapabilityVersion(capability: WiFiWirelessSDK.Friend.Capability) -> Swift.Float
  public func getPresenceModelForUriOrTel(uriOrTel: Swift.String) -> WiFiWirelessSDK.PresenceModel?
  public func hasCapability(capability: WiFiWirelessSDK.Friend.Capability) -> Swift.Bool
  public func hasCapabilityWithVersion(capability: WiFiWirelessSDK.Friend.Capability, version: Swift.Float) -> Swift.Bool
  public func hasCapabilityWithVersionOrMore(capability: WiFiWirelessSDK.Friend.Capability, version: Swift.Float) -> Swift.Bool
  public func hasPhoneNumber(phoneNumber: Swift.String) -> Swift.Bool
  public func inList() -> Swift.Bool
  public func remove()
  public func removeAddress(address: WiFiWirelessSDK.Address)
  public func removePhoneNumber(phoneNumber: Swift.String)
  public func removePhoneNumberWithLabel(phoneNumber: WiFiWirelessSDK.FriendPhoneNumber)
  public func save(core: WiFiWirelessSDK.Core)
  public func setPresenceModelForUriOrTel(uriOrTel: Swift.String, presence: WiFiWirelessSDK.PresenceModel?)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class FriendList : WiFiWirelessSDK.LinphoneObject {
  public static func getSwiftObject(cObject: Swift.OpaquePointer) -> WiFiWirelessSDK.FriendList
  public var getCobject: Swift.OpaquePointer? {
    get
  }
  public enum SyncStatus : Swift.Int {
    case Started
    case Successful
    case Failure
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum Status : Swift.Int {
    case OK
    case NonExistentFriend
    case InvalidFriend
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum Kind : Swift.Int {
    case Default
    case CardDAV
    case VCard4
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public func addDelegate(delegate: any WiFiWirelessSDK.FriendListDelegate)
  public func removeDelegate(delegate: any WiFiWirelessSDK.FriendListDelegate)
  public var core: WiFiWirelessSDK.Core? {
    get
  }
  public var currentDelegate: (any WiFiWirelessSDK.FriendListDelegate)? {
    get
  }
  public var databaseStorageEnabled: Swift.Bool {
    get
    set
  }
  public var displayName: Swift.String? {
    get
    set
  }
  public var friends: [WiFiWirelessSDK.Friend] {
    get
  }
  public var isSubscriptionBodyless: Swift.Bool {
    get
  }
  public var rlsAddress: WiFiWirelessSDK.Address? {
    get
    set
  }
  public var rlsUri: Swift.String? {
    @available(*, deprecated)
    get
    @available(*, deprecated)
    set
  }
  public var subscriptionBodyless: Swift.Bool? {
    get
    set
  }
  public var subscriptionsEnabled: Swift.Bool {
    get
    set
  }
  public var type: WiFiWirelessSDK.FriendList.Kind {
    get
    set
  }
  public var uri: Swift.String? {
    get
    set
  }
  public var userData: Swift.UnsafeMutableRawPointer? {
    get
    set
  }
  public func addFriend(linphoneFriend: WiFiWirelessSDK.Friend) -> WiFiWirelessSDK.FriendList.Status
  public func addLocalFriend(linphoneFriend: WiFiWirelessSDK.Friend) -> WiFiWirelessSDK.FriendList.Status
  public func exportFriendsAsVcard4File(vcardFile: Swift.String)
  public func findFriendByAddress(address: WiFiWirelessSDK.Address) -> WiFiWirelessSDK.Friend?
  public func findFriendByPhoneNumber(phoneNumber: Swift.String) -> WiFiWirelessSDK.Friend?
  public func findFriendByRefKey(refKey: Swift.String) -> WiFiWirelessSDK.Friend?
  public func findFriendByUri(uri: Swift.String) -> WiFiWirelessSDK.Friend?
  public func findFriendsByAddress(address: WiFiWirelessSDK.Address) -> [WiFiWirelessSDK.Friend]
  public func findFriendsByUri(uri: Swift.String) -> [WiFiWirelessSDK.Friend]
  public func importFriendsFromVcard4Buffer(vcardBuffer: Swift.String) -> Swift.Int
  public func importFriendsFromVcard4File(vcardFile: Swift.String) -> Swift.Int
  public func notifyPresence(presence: WiFiWirelessSDK.PresenceModel)
  public func removeFriend(linphoneFriend: WiFiWirelessSDK.Friend) -> WiFiWirelessSDK.FriendList.Status
  public func synchronizeFriendsFromServer()
  public func updateDirtyFriends()
  public func updateRevision(revision: Swift.Int)
  public func updateSubscriptions()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class FriendPhoneNumber : WiFiWirelessSDK.LinphoneObject {
  public static func getSwiftObject(cObject: Swift.OpaquePointer) -> WiFiWirelessSDK.FriendPhoneNumber
  public var getCobject: Swift.OpaquePointer? {
    get
  }
  public var label: Swift.String? {
    get
    set
  }
  public var phoneNumber: Swift.String {
    get
    set
  }
  public func clone() -> WiFiWirelessSDK.FriendPhoneNumber?
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class Headers : WiFiWirelessSDK.LinphoneObject {
  public static func getSwiftObject(cObject: Swift.OpaquePointer) -> WiFiWirelessSDK.Headers
  public var getCobject: Swift.OpaquePointer? {
    get
  }
  public func add(name: Swift.String, value: Swift.String?)
  public func getValue(headerName: Swift.String) -> Swift.String
  public func remove(name: Swift.String)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class ImNotifPolicy : WiFiWirelessSDK.LinphoneObject {
  public static func getSwiftObject(cObject: Swift.OpaquePointer) -> WiFiWirelessSDK.ImNotifPolicy
  public var getCobject: Swift.OpaquePointer? {
    get
  }
  public var recvImdnDelivered: Swift.Bool {
    get
    set
  }
  public var recvImdnDeliveryError: Swift.Bool {
    get
    set
  }
  public var recvImdnDisplayed: Swift.Bool {
    get
    set
  }
  public var recvIsComposing: Swift.Bool {
    get
    set
  }
  public var sendImdnDelivered: Swift.Bool {
    get
    set
  }
  public var sendImdnDeliveryError: Swift.Bool {
    get
    set
  }
  public var sendImdnDisplayed: Swift.Bool {
    get
    set
  }
  public var sendIsComposing: Swift.Bool {
    get
    set
  }
  public var userData: Swift.UnsafeMutableRawPointer? {
    get
    set
  }
  public func clear()
  public func enableAll()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class InfoMessage : WiFiWirelessSDK.LinphoneObject {
  public static func getSwiftObject(cObject: Swift.OpaquePointer) -> WiFiWirelessSDK.InfoMessage
  public var getCobject: Swift.OpaquePointer? {
    get
  }
  public var content: WiFiWirelessSDK.Content? {
    get
    set
  }
  public func addHeader(name: Swift.String, value: Swift.String?)
  public func getHeader(name: Swift.String) -> Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class Ldap : WiFiWirelessSDK.LinphoneObject {
  public static func getSwiftObject(cObject: Swift.OpaquePointer) -> WiFiWirelessSDK.Ldap
  public var getCobject: Swift.OpaquePointer? {
    get
  }
  public enum DebugLevel : Swift.Int {
    case Off
    case Verbose
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum AuthMethod : Swift.Int {
    case Anonymous
    case Simple
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum CertVerificationMode : Swift.Int {
    case Default
    case Disabled
    case Enabled
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum Check : Swift.Int {
    case Ok
    case ServerEmpty
    case ServerNotUrl
    case ServerNoScheme
    case ServerNotLdap
    case ServerLdaps
    case BaseObjectEmpty
    case MissingFields
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public static func newWithParams(lc: WiFiWirelessSDK.Core, params: WiFiWirelessSDK.LdapParams) -> WiFiWirelessSDK.Ldap?
  public var core: WiFiWirelessSDK.Core? {
    get
  }
  public var index: Swift.Int {
    get
    set
  }
  public var params: WiFiWirelessSDK.LdapParams? {
    get
    set
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class LdapParams : WiFiWirelessSDK.LinphoneObject {
  public static func getSwiftObject(cObject: Swift.OpaquePointer) -> WiFiWirelessSDK.LdapParams
  public var getCobject: Swift.OpaquePointer? {
    get
  }
  public var authMethod: WiFiWirelessSDK.Ldap.AuthMethod {
    get
    set
  }
  public var baseObject: Swift.String {
    get
    set
  }
  public var bindDn: Swift.String? {
    get
    set
  }
  public var debugLevel: WiFiWirelessSDK.Ldap.DebugLevel {
    get
    set
  }
  public var delay: Swift.Int {
    get
    set
  }
  public var enabled: Swift.Bool {
    get
    set
  }
  public var filter: Swift.String? {
    get
    set
  }
  public var maxResults: Swift.Int {
    get
    set
  }
  public var minChars: Swift.Int {
    get
    set
  }
  public var nameAttribute: Swift.String? {
    get
    set
  }
  public var password: Swift.String? {
    get
    set
  }
  public var salEnabled: Swift.Bool {
    get
    set
  }
  public var server: Swift.String {
    get
    set
  }
  public var serverCertificatesVerificationMode: WiFiWirelessSDK.Ldap.CertVerificationMode {
    get
    set
  }
  public var sipAttribute: Swift.String? {
    get
    set
  }
  public var sipDomain: Swift.String? {
    get
    set
  }
  public var timeout: Swift.Int {
    get
    set
  }
  public var timeoutTlsMs: Swift.Int {
    get
    set
  }
  public var tlsEnabled: Swift.Bool {
    get
    set
  }
  public func check() -> Swift.Int
  public func clone() -> WiFiWirelessSDK.LdapParams?
  public func getCustomValue(key: Swift.String) -> Swift.String
  public func setCustomValue(key: Swift.String, value: Swift.String?)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class LoggingService : WiFiWirelessSDK.LinphoneObject {
  public static func getSwiftObject(cObject: Swift.OpaquePointer) -> WiFiWirelessSDK.LoggingService
  public var getCobject: Swift.OpaquePointer? {
    get
  }
  public func addDelegate(delegate: any WiFiWirelessSDK.LoggingServiceDelegate)
  public func removeDelegate(delegate: any WiFiWirelessSDK.LoggingServiceDelegate)
  public static var Instance: WiFiWirelessSDK.LoggingService {
    get
  }
  public var currentDelegate: (any WiFiWirelessSDK.LoggingServiceDelegate)? {
    get
  }
  public var domain: Swift.String? {
    get
    set
  }
  public var logLevel: WiFiWirelessSDK.LogLevel? {
    get
    set
  }
  public var logLevelMask: Swift.UInt {
    get
    set
  }
  public var stackTraceDumpsEnabled: Swift.Bool? {
    get
    set
  }
  public func debug(message: Swift.String)
  public func error(message: Swift.String)
  public func fatal(message: Swift.String)
  public func message(message: Swift.String)
  public func setLogFile(dir: Swift.String, filename: Swift.String, maxSize: Swift.Int)
  public func trace(message: Swift.String)
  public func warning(message: Swift.String)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class MagicSearch : WiFiWirelessSDK.LinphoneObject {
  public static func getSwiftObject(cObject: Swift.OpaquePointer) -> WiFiWirelessSDK.MagicSearch
  public var getCobject: Swift.OpaquePointer? {
    get
  }
  public enum Aggregation : Swift.Int {
    case None
    case Friend
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public struct Source : Swift.OptionSet {
    public let rawValue: Swift.Int
    public init(rawValue: Swift.Int)
    public static let None: WiFiWirelessSDK.MagicSearch.Source
    public static let Friends: WiFiWirelessSDK.MagicSearch.Source
    public static let CallLogs: WiFiWirelessSDK.MagicSearch.Source
    public static let LdapServers: WiFiWirelessSDK.MagicSearch.Source
    public static let ChatRooms: WiFiWirelessSDK.MagicSearch.Source
    public static let Request: WiFiWirelessSDK.MagicSearch.Source
    public static let FavoriteFriends: WiFiWirelessSDK.MagicSearch.Source
    public static let ConferencesInfo: WiFiWirelessSDK.MagicSearch.Source
    public static let All: WiFiWirelessSDK.MagicSearch.Source
    public typealias ArrayLiteralElement = WiFiWirelessSDK.MagicSearch.Source
    public typealias Element = WiFiWirelessSDK.MagicSearch.Source
    public typealias RawValue = Swift.Int
  }
  public func addDelegate(delegate: any WiFiWirelessSDK.MagicSearchDelegate)
  public func removeDelegate(delegate: any WiFiWirelessSDK.MagicSearchDelegate)
  public var currentDelegate: (any WiFiWirelessSDK.MagicSearchDelegate)? {
    get
  }
  public var delimiter: Swift.String? {
    get
    set
  }
  public var lastSearch: [WiFiWirelessSDK.SearchResult] {
    get
  }
  public var limitedSearch: Swift.Bool {
    get
    set
  }
  public var maxWeight: Swift.UInt {
    get
    set
  }
  public var minWeight: Swift.UInt {
    get
    set
  }
  public var searchLimit: Swift.UInt {
    get
    set
  }
  public var useDelimiter: Swift.Bool {
    get
    set
  }
  @available(*, deprecated)
  public func getContactListFromFilter(filter: Swift.String?, domain: Swift.String?) -> [WiFiWirelessSDK.SearchResult]
  @available(*, deprecated)
  public func getContactListFromFilterAsync(filter: Swift.String?, domain: Swift.String?)
  @available(*, deprecated)
  public func getContacts(filter: Swift.String?, domain: Swift.String?, sourceFlags: Swift.Int) -> [WiFiWirelessSDK.SearchResult]
  @available(*, deprecated)
  public func getContactsAsync(filter: Swift.String?, domain: Swift.String?, sourceFlags: Swift.Int)
  public func getContactsList(filter: Swift.String?, domain: Swift.String?, sourceFlags: Swift.Int, aggregation: WiFiWirelessSDK.MagicSearch.Aggregation) -> [WiFiWirelessSDK.SearchResult]
  public func getContactsListAsync(filter: Swift.String?, domain: Swift.String?, sourceFlags: Swift.Int, aggregation: WiFiWirelessSDK.MagicSearch.Aggregation)
  public func resetSearchCache()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class NatPolicy : WiFiWirelessSDK.LinphoneObject {
  public static func getSwiftObject(cObject: Swift.OpaquePointer) -> WiFiWirelessSDK.NatPolicy
  public var getCobject: Swift.OpaquePointer? {
    get
  }
  public var core: WiFiWirelessSDK.Core? {
    get
  }
  public var iceEnabled: Swift.Bool {
    get
    set
  }
  public var natV4Address: Swift.String? {
    get
    set
  }
  public var natV6Address: Swift.String? {
    get
    set
  }
  public var stunEnabled: Swift.Bool {
    get
    set
  }
  public var stunServer: Swift.String? {
    get
    set
  }
  public var stunServerUsername: Swift.String? {
    get
    set
  }
  public var tcpTurnTransportEnabled: Swift.Bool {
    get
    set
  }
  public var tlsTurnTransportEnabled: Swift.Bool {
    get
    set
  }
  public var turnEnabled: Swift.Bool {
    get
    set
  }
  public var udpTurnTransportEnabled: Swift.Bool {
    get
    set
  }
  public var upnpEnabled: Swift.Bool {
    get
    set
  }
  public var userData: Swift.UnsafeMutableRawPointer? {
    get
    set
  }
  public func clear()
  public func clone() -> WiFiWirelessSDK.NatPolicy?
  public func resolveStunServer()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class Participant : WiFiWirelessSDK.LinphoneObject {
  public static func getSwiftObject(cObject: Swift.OpaquePointer) -> WiFiWirelessSDK.Participant
  public var getCobject: Swift.OpaquePointer? {
    get
  }
  public enum Role : Swift.Int {
    case Speaker
    case Listener
    case Unknown
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public var address: WiFiWirelessSDK.Address? {
    get
  }
  public var creationTime: Darwin.time_t {
    get
  }
  public var devices: [WiFiWirelessSDK.ParticipantDevice] {
    get
  }
  public var isAdmin: Swift.Bool {
    get
  }
  public var isFocus: Swift.Bool {
    get
  }
  public var role: WiFiWirelessSDK.Participant.Role {
    get
  }
  public var securityLevel: WiFiWirelessSDK.ChatRoom.SecurityLevel {
    get
  }
  public var userData: Swift.UnsafeMutableRawPointer? {
    get
    set
  }
  public func findDevice(call: WiFiWirelessSDK.Call) -> WiFiWirelessSDK.ParticipantDevice?
  public func findDevice(address: WiFiWirelessSDK.Address) -> WiFiWirelessSDK.ParticipantDevice?
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class ParticipantDevice : WiFiWirelessSDK.LinphoneObject {
  public static func getSwiftObject(cObject: Swift.OpaquePointer) -> WiFiWirelessSDK.ParticipantDevice
  public var getCobject: Swift.OpaquePointer? {
    get
  }
  public enum JoiningMethod : Swift.Int {
    case DialedIn
    case DialedOut
    case FocusOwner
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum DisconnectionMethod : Swift.Int {
    case Booted
    case Departed
    case Busy
    case Failed
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum State : Swift.Int {
    case Joining
    case Present
    case Leaving
    case Left
    case ScheduledForJoining
    case ScheduledForLeaving
    case OnHold
    case Alerting
    case MutedByFocus
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public func addDelegate(delegate: any WiFiWirelessSDK.ParticipantDeviceDelegate)
  public func removeDelegate(delegate: any WiFiWirelessSDK.ParticipantDeviceDelegate)
  public var address: WiFiWirelessSDK.Address? {
    get
  }
  public var currentDelegate: (any WiFiWirelessSDK.ParticipantDeviceDelegate)? {
    get
  }
  public var disconnectionMethod: WiFiWirelessSDK.ParticipantDevice.DisconnectionMethod {
    get
  }
  public var disconnectionReason: Swift.String? {
    get
  }
  public var isInConference: Swift.Bool {
    get
  }
  public var isMuted: Swift.Bool {
    get
  }
  public var isSpeaking: Swift.Bool {
    get
  }
  public var joiningMethod: WiFiWirelessSDK.ParticipantDevice.JoiningMethod {
    get
  }
  public var name: Swift.String? {
    get
  }
  public var nativeVideoWindowId: Swift.UnsafeMutableRawPointer? {
    get
    set
  }
  public var securityLevel: WiFiWirelessSDK.ChatRoom.SecurityLevel {
    get
  }
  public var state: WiFiWirelessSDK.ParticipantDevice.State {
    get
  }
  public var timeOfDisconnection: Darwin.time_t {
    get
  }
  public var timeOfJoining: Darwin.time_t {
    get
  }
  public var userData: Swift.UnsafeMutableRawPointer? {
    get
    set
  }
  public func createNativeVideoWindowId() throws -> Swift.UnsafeMutableRawPointer
  public func getSsrc(streamType: WiFiWirelessSDK.StreamType) -> Swift.UInt32
  public func getStreamAvailability(streamType: WiFiWirelessSDK.StreamType) -> Swift.Bool
  public func getStreamCapability(streamType: WiFiWirelessSDK.StreamType) -> WiFiWirelessSDK.MediaDirection
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class ParticipantDeviceIdentity : WiFiWirelessSDK.LinphoneObject {
  public static func getSwiftObject(cObject: Swift.OpaquePointer) -> WiFiWirelessSDK.ParticipantDeviceIdentity
  public var getCobject: Swift.OpaquePointer? {
    get
  }
  public var address: WiFiWirelessSDK.Address? {
    get
  }
  public var capabilityDescriptor: Swift.String {
    @available(*, deprecated)
    get
    @available(*, deprecated)
    set
  }
  public var capabilityDescriptor2: [Swift.String] {
    get
    set
  }
  public var capabilityDescriptorList: [Swift.String] {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class ParticipantImdnState : WiFiWirelessSDK.LinphoneObject {
  public static func getSwiftObject(cObject: Swift.OpaquePointer) -> WiFiWirelessSDK.ParticipantImdnState
  public var getCobject: Swift.OpaquePointer? {
    get
  }
  public var participant: WiFiWirelessSDK.Participant? {
    get
  }
  public var state: WiFiWirelessSDK.ChatMessage.State {
    get
  }
  public var stateChangeTime: Darwin.time_t {
    get
  }
  public var userData: Swift.UnsafeMutableRawPointer? {
    get
    set
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class ParticipantInfo : WiFiWirelessSDK.LinphoneObject {
  public static func getSwiftObject(cObject: Swift.OpaquePointer) -> WiFiWirelessSDK.ParticipantInfo
  public var getCobject: Swift.OpaquePointer? {
    get
  }
  public var address: WiFiWirelessSDK.Address? {
    get
  }
  public var role: WiFiWirelessSDK.Participant.Role {
    get
    set
  }
  public func addParameter(name: Swift.String, value: Swift.String)
  public func clone() -> WiFiWirelessSDK.ParticipantInfo?
  public func getParameterValue(name: Swift.String) -> Swift.String
  public func hasParameter(name: Swift.String) -> Swift.Bool
  public func removeParameter(name: Swift.String)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class PayloadType : WiFiWirelessSDK.LinphoneObject {
  public static func getSwiftObject(cObject: Swift.OpaquePointer) -> WiFiWirelessSDK.PayloadType
  public var getCobject: Swift.OpaquePointer? {
    get
  }
  public var channels: Swift.Int {
    get
  }
  public var clockRate: Swift.Int {
    get
  }
  public var description: Swift.String {
    get
  }
  public var encoderDescription: Swift.String? {
    get
  }
  public var isUsable: Swift.Bool {
    get
  }
  public var isVbr: Swift.Bool {
    get
  }
  public var mimeType: Swift.String {
    get
  }
  public var normalBitrate: Swift.Int {
    get
    set
  }
  public var number: Swift.Int {
    get
    set
  }
  public var recvFmtp: Swift.String? {
    get
    set
  }
  public var sendFmtp: Swift.String? {
    get
    set
  }
  public var type: Swift.Int {
    get
  }
  public func clone() -> WiFiWirelessSDK.PayloadType?
  public func enable(enabled: Swift.Bool) -> Swift.Int
  public func enabled() -> Swift.Bool
  public func weakEquals(otherPayloadType: WiFiWirelessSDK.PayloadType) -> Swift.Bool
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class Player : WiFiWirelessSDK.LinphoneObject {
  public static func getSwiftObject(cObject: Swift.OpaquePointer) -> WiFiWirelessSDK.Player
  public var getCobject: Swift.OpaquePointer? {
    get
  }
  public enum State : Swift.Int {
    case Closed
    case Paused
    case Playing
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public func addDelegate(delegate: any WiFiWirelessSDK.PlayerDelegate)
  public func removeDelegate(delegate: any WiFiWirelessSDK.PlayerDelegate)
  public var core: WiFiWirelessSDK.Core? {
    get
  }
  public var currentDelegate: (any WiFiWirelessSDK.PlayerDelegate)? {
    get
  }
  public var currentPosition: Swift.Int {
    get
  }
  public var duration: Swift.Int {
    get
  }
  public var isVideoAvailable: Swift.Bool {
    get
  }
  public var state: WiFiWirelessSDK.Player.State {
    get
  }
  public var userData: Swift.UnsafeMutableRawPointer? {
    get
    set
  }
  public var volumeGain: Swift.Float {
    get
    set
  }
  public var windowId: Swift.UnsafeMutableRawPointer? {
    get
    set
  }
  public func close()
  public func createWindowId() throws -> Swift.UnsafeMutableRawPointer
  public func open(filename: Swift.String) throws
  public func pause() throws
  public func seek(timeMs: Swift.Int) throws
  public func start() throws
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class PresenceActivity : WiFiWirelessSDK.LinphoneObject {
  public static func getSwiftObject(cObject: Swift.OpaquePointer) -> WiFiWirelessSDK.PresenceActivity
  public var getCobject: Swift.OpaquePointer? {
    get
  }
  public enum Kind : Swift.Int {
    case Appointment
    case Away
    case Breakfast
    case Busy
    case Dinner
    case Holiday
    case InTransit
    case LookingForWork
    case Lunch
    case Meal
    case Meeting
    case OnThePhone
    case Other
    case Performance
    case PermanentAbsence
    case Playing
    case Presentation
    case Shopping
    case Sleeping
    case Spectator
    case Steering
    case Travel
    case TV
    case Unknown
    case Vacation
    case Working
    case Worship
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public var description: Swift.String? {
    get
  }
  public func setDescription(newValue: Swift.String) throws
  public var type: WiFiWirelessSDK.PresenceActivity.Kind {
    get
  }
  public func setType(newValue: WiFiWirelessSDK.PresenceActivity.Kind) throws
  public var userData: Swift.UnsafeMutableRawPointer? {
    get
    set
  }
  public func toString() -> Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class PresenceModel : WiFiWirelessSDK.LinphoneObject {
  public static func getSwiftObject(cObject: Swift.OpaquePointer) -> WiFiWirelessSDK.PresenceModel
  public var getCobject: Swift.OpaquePointer? {
    get
  }
  public static func newWithActivity(activity: WiFiWirelessSDK.PresenceActivity.Kind, description: Swift.String?) -> WiFiWirelessSDK.PresenceModel?
  public static func newWithActivityAndNote(activity: WiFiWirelessSDK.PresenceActivity.Kind, description: Swift.String?, note: Swift.String, lang: Swift.String?) -> WiFiWirelessSDK.PresenceModel?
  public var activity: WiFiWirelessSDK.PresenceActivity? {
    get
  }
  public var basicStatus: WiFiWirelessSDK.PresenceBasicStatus {
    get
  }
  public func setBasicstatus(newValue: WiFiWirelessSDK.PresenceBasicStatus) throws
  public var capabilities: Swift.Int {
    get
  }
  public var consolidatedPresence: WiFiWirelessSDK.ConsolidatedPresence {
    get
  }
  public var contact: Swift.String? {
    get
  }
  public func setContact(newValue: Swift.String) throws
  public var isOnline: Swift.Bool {
    get
  }
  public var latestActivityTimestamp: Darwin.time_t {
    get
  }
  public var nbActivities: Swift.UInt {
    get
  }
  public var nbPersons: Swift.UInt {
    get
  }
  public var nbServices: Swift.UInt {
    get
  }
  public var presentity: WiFiWirelessSDK.Address? {
    get
  }
  public func setPresentity(newValue: WiFiWirelessSDK.Address) throws
  public var timestamp: Darwin.time_t {
    get
  }
  public var userData: Swift.UnsafeMutableRawPointer? {
    get
    set
  }
  public func addActivity(activity: WiFiWirelessSDK.PresenceActivity) throws
  public func addNote(noteContent: Swift.String, lang: Swift.String?) throws
  public func addPerson(person: WiFiWirelessSDK.PresencePerson) throws
  public func addService(service: WiFiWirelessSDK.PresenceService) throws
  public func clearActivities() throws
  public func clearNotes() throws
  public func clearPersons() throws
  public func clearServices() throws
  public func getCapabilityVersion(capability: WiFiWirelessSDK.Friend.Capability) -> Swift.Float
  public func getNote(lang: Swift.String?) -> WiFiWirelessSDK.PresenceNote?
  public func getNthActivity(index: Swift.UInt) -> WiFiWirelessSDK.PresenceActivity?
  public func getNthPerson(index: Swift.UInt) -> WiFiWirelessSDK.PresencePerson?
  public func getNthService(index: Swift.UInt) -> WiFiWirelessSDK.PresenceService?
  public func hasCapability(capability: WiFiWirelessSDK.Friend.Capability) -> Swift.Bool
  public func hasCapabilityWithVersion(capability: WiFiWirelessSDK.Friend.Capability, version: Swift.Float) -> Swift.Bool
  public func hasCapabilityWithVersionOrMore(capability: WiFiWirelessSDK.Friend.Capability, version: Swift.Float) -> Swift.Bool
  public func setActivity(activity: WiFiWirelessSDK.PresenceActivity.Kind, description: Swift.String?) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class PresenceNote : WiFiWirelessSDK.LinphoneObject {
  public static func getSwiftObject(cObject: Swift.OpaquePointer) -> WiFiWirelessSDK.PresenceNote
  public var getCobject: Swift.OpaquePointer? {
    get
  }
  public var content: Swift.String {
    get
  }
  public func setContent(newValue: Swift.String) throws
  public var lang: Swift.String? {
    get
  }
  public func setLang(newValue: Swift.String) throws
  public var userData: Swift.UnsafeMutableRawPointer? {
    get
    set
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class PresencePerson : WiFiWirelessSDK.LinphoneObject {
  public static func getSwiftObject(cObject: Swift.OpaquePointer) -> WiFiWirelessSDK.PresencePerson
  public var getCobject: Swift.OpaquePointer? {
    get
  }
  public var id: Swift.String? {
    get
  }
  public func setId(newValue: Swift.String) throws
  public var nbActivities: Swift.UInt {
    get
  }
  public var nbActivitiesNotes: Swift.UInt {
    get
  }
  public var nbNotes: Swift.UInt {
    get
  }
  public var userData: Swift.UnsafeMutableRawPointer? {
    get
    set
  }
  public func addActivitiesNote(note: WiFiWirelessSDK.PresenceNote) throws
  public func addActivity(activity: WiFiWirelessSDK.PresenceActivity) throws
  public func addNote(note: WiFiWirelessSDK.PresenceNote) throws
  public func clearActivities() throws
  public func clearActivitiesNotes() throws
  public func clearNotes() throws
  public func getNthActivitiesNote(index: Swift.UInt) -> WiFiWirelessSDK.PresenceNote?
  public func getNthActivity(index: Swift.UInt) -> WiFiWirelessSDK.PresenceActivity?
  public func getNthNote(index: Swift.UInt) -> WiFiWirelessSDK.PresenceNote?
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class PresenceService : WiFiWirelessSDK.LinphoneObject {
  public static func getSwiftObject(cObject: Swift.OpaquePointer) -> WiFiWirelessSDK.PresenceService
  public var getCobject: Swift.OpaquePointer? {
    get
  }
  public var basicStatus: WiFiWirelessSDK.PresenceBasicStatus {
    get
  }
  public func setBasicstatus(newValue: WiFiWirelessSDK.PresenceBasicStatus) throws
  public var contact: Swift.String? {
    get
  }
  public func setContact(newValue: Swift.String) throws
  public var id: Swift.String? {
    get
  }
  public func setId(newValue: Swift.String) throws
  public var nbNotes: Swift.UInt {
    get
  }
  public var serviceDescriptions: [Swift.String] {
    get
  }
  public func setServicedescriptions(newValue: [Swift.String]) throws
  public var userData: Swift.UnsafeMutableRawPointer? {
    get
    set
  }
  public func addNote(note: WiFiWirelessSDK.PresenceNote) throws
  public func clearNotes() throws
  public func getNthNote(index: Swift.UInt) -> WiFiWirelessSDK.PresenceNote?
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class ProxyConfig : WiFiWirelessSDK.LinphoneObject {
  public static func getSwiftObject(cObject: Swift.OpaquePointer) -> WiFiWirelessSDK.ProxyConfig
  public var getCobject: Swift.OpaquePointer? {
    get
  }
  @available(*, deprecated)
  public var avpfEnabled: Swift.Bool {
    get
  }
  public var avpfMode: WiFiWirelessSDK.AVPFMode {
    @available(*, deprecated)
    get
    @available(*, deprecated)
    set
  }
  public var avpfRrInterval: Swift.UInt8 {
    @available(*, deprecated)
    get
    @available(*, deprecated)
    set
  }
  public var conferenceFactoryUri: Swift.String? {
    @available(*, deprecated)
    get
    @available(*, deprecated)
    set
  }
  @available(*, deprecated)
  public var contact: WiFiWirelessSDK.Address? {
    get
  }
  public var contactParameters: Swift.String? {
    @available(*, deprecated)
    get
    @available(*, deprecated)
    set
  }
  public var contactUriParameters: Swift.String? {
    @available(*, deprecated)
    get
    @available(*, deprecated)
    set
  }
  @available(*, deprecated)
  public var core: WiFiWirelessSDK.Core? {
    get
  }
  public var dependency: WiFiWirelessSDK.ProxyConfig? {
    @available(*, deprecated)
    get
    @available(*, deprecated)
    set
  }
  public var dialEscapePlus: Swift.Bool {
    @available(*, deprecated)
    get
    @available(*, deprecated)
    set
  }
  public var dialPrefix: Swift.String? {
    @available(*, deprecated)
    get
    @available(*, deprecated)
    set
  }
  @available(*, deprecated)
  public var domain: Swift.String? {
    get
  }
  @available(*, deprecated)
  public var error: WiFiWirelessSDK.Reason {
    get
  }
  @available(*, deprecated)
  public var errorInfo: WiFiWirelessSDK.ErrorInfo? {
    get
  }
  public var expires: Swift.Int {
    @available(*, deprecated)
    get
    @available(*, deprecated)
    set
  }
  @available(*, deprecated)
  public var identityAddress: WiFiWirelessSDK.Address? {
    get
  }
  @available(*, deprecated)
  public func setIdentityaddress(newValue: WiFiWirelessSDK.Address) throws
  public var idkey: Swift.String? {
    @available(*, deprecated)
    get
    @available(*, deprecated)
    set
  }
  @available(*, deprecated)
  public var isPushNotificationAllowed: Swift.Bool {
    get
  }
  @available(*, deprecated)
  public var isPushNotificationAvailable: Swift.Bool {
    get
  }
  @available(*, deprecated)
  public var isRemotePushNotificationAllowed: Swift.Bool {
    get
  }
  public var natPolicy: WiFiWirelessSDK.NatPolicy? {
    @available(*, deprecated)
    get
    @available(*, deprecated)
    set
  }
  public var privacy: Swift.UInt {
    @available(*, deprecated)
    get
    @available(*, deprecated)
    set
  }
  public var publishEnabled: Swift.Bool {
    @available(*, deprecated)
    get
    @available(*, deprecated)
    set
  }
  public var publishExpires: Swift.Int {
    @available(*, deprecated)
    get
    @available(*, deprecated)
    set
  }
  public var pushNotificationAllowed: Swift.Bool? {
    get
    set
  }
  public var pushNotificationConfig: WiFiWirelessSDK.PushNotificationConfig? {
    @available(*, deprecated)
    get
    @available(*, deprecated)
    set
  }
  public var qualityReportingCollector: Swift.String? {
    @available(*, deprecated)
    get
    @available(*, deprecated)
    set
  }
  public var qualityReportingEnabled: Swift.Bool {
    @available(*, deprecated)
    get
    @available(*, deprecated)
    set
  }
  public var qualityReportingInterval: Swift.Int {
    @available(*, deprecated)
    get
    @available(*, deprecated)
    set
  }
  public var realm: Swift.String? {
    @available(*, deprecated)
    get
    @available(*, deprecated)
    set
  }
  public var refKey: Swift.String? {
    @available(*, deprecated)
    get
    @available(*, deprecated)
    set
  }
  public var registerEnabled: Swift.Bool {
    @available(*, deprecated)
    get
    @available(*, deprecated)
    set
  }
  public var remotePushNotificationAllowed: Swift.Bool? {
    get
    set
  }
  @available(*, deprecated)
  public func setRoute(newValue: Swift.String) throws
  @available(*, deprecated)
  public var routes: [Swift.String] {
    get
  }
  @available(*, deprecated)
  public func setRoutes(newValue: [Swift.String]) throws
  @available(*, deprecated)
  public var serverAddr: Swift.String? {
    get
  }
  @available(*, deprecated)
  public func setServeraddr(newValue: Swift.String) throws
  @available(*, deprecated)
  public var state: WiFiWirelessSDK.RegistrationState {
    get
  }
  @available(*, deprecated)
  public var transport: Swift.String {
    get
  }
  @available(*, deprecated)
  public var unreadChatMessageCount: Swift.Int {
    get
  }
  public var userData: Swift.UnsafeMutableRawPointer? {
    get
    set
  }
  @available(*, deprecated)
  public func done() throws
  @available(*, deprecated)
  public func edit()
  @available(*, deprecated)
  public func findAuthInfo() -> WiFiWirelessSDK.AuthInfo?
  @available(*, deprecated)
  public func getCustomHeader(headerName: Swift.String) -> Swift.String
  @available(*, deprecated)
  public func normalizePhoneNumber(username: Swift.String) -> Swift.String
  @available(*, deprecated)
  public func normalizeSipUri(username: Swift.String) -> WiFiWirelessSDK.Address?
  @available(*, deprecated)
  public func pauseRegister()
  @available(*, deprecated)
  public func refreshRegister()
  @available(*, deprecated)
  public func setCustomHeader(headerName: Swift.String, headerValue: Swift.String?)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class PushNotificationConfig : WiFiWirelessSDK.LinphoneObject {
  public static func getSwiftObject(cObject: Swift.OpaquePointer) -> WiFiWirelessSDK.PushNotificationConfig
  public var getCobject: Swift.OpaquePointer? {
    get
  }
  public var bundleIdentifier: Swift.String? {
    get
    set
  }
  public var callSnd: Swift.String {
    get
    set
  }
  public var callStr: Swift.String {
    get
    set
  }
  public var groupChatStr: Swift.String {
    get
    set
  }
  public var msgSnd: Swift.String {
    get
    set
  }
  public var msgStr: Swift.String {
    get
    set
  }
  public var param: Swift.String? {
    get
    set
  }
  public var prid: Swift.String? {
    get
    set
  }
  public var provider: Swift.String? {
    get
    set
  }
  public var remotePushInterval: Swift.String {
    get
    set
  }
  public var remoteToken: Swift.String? {
    get
    set
  }
  public var teamId: Swift.String? {
    get
    set
  }
  public var voipToken: Swift.String? {
    get
    set
  }
  public func clone() -> WiFiWirelessSDK.PushNotificationConfig?
  public func isEqual(otherConfig: WiFiWirelessSDK.PushNotificationConfig) -> Swift.Bool
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class PushNotificationMessage : WiFiWirelessSDK.LinphoneObject {
  public static func getSwiftObject(cObject: Swift.OpaquePointer) -> WiFiWirelessSDK.PushNotificationMessage
  public var getCobject: Swift.OpaquePointer? {
    get
  }
  public var callId: Swift.String {
    get
  }
  public var fromAddr: WiFiWirelessSDK.Address? {
    get
  }
  public var isConferenceInvitationCancellation: Swift.Bool {
    get
  }
  public var isConferenceInvitationNew: Swift.Bool {
    get
  }
  public var isConferenceInvitationUpdate: Swift.Bool {
    get
  }
  public var isIcalendar: Swift.Bool {
    get
  }
  public var isText: Swift.Bool {
    get
  }
  public var localAddr: WiFiWirelessSDK.Address? {
    get
  }
  public var peerAddr: WiFiWirelessSDK.Address? {
    get
  }
  public var reactionContent: Swift.String? {
    get
  }
  public var subject: Swift.String? {
    get
  }
  public var textContent: Swift.String? {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class Range : WiFiWirelessSDK.LinphoneObject {
  public static func getSwiftObject(cObject: Swift.OpaquePointer) -> WiFiWirelessSDK.Range
  public var getCobject: Swift.OpaquePointer? {
    get
  }
  public var max: Swift.Int {
    get
    set
  }
  public var min: Swift.Int {
    get
    set
  }
  public var userData: Swift.UnsafeMutableRawPointer? {
    get
    set
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class Recorder : WiFiWirelessSDK.LinphoneObject {
  public static func getSwiftObject(cObject: Swift.OpaquePointer) -> WiFiWirelessSDK.Recorder
  public var getCobject: Swift.OpaquePointer? {
    get
  }
  public enum FileFormat : Swift.Int {
    case Unknown
    case Wav
    case Mkv
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum State : Swift.Int {
    case Closed
    case Paused
    case Running
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public var captureVolume: Swift.Float {
    get
  }
  public var duration: Swift.Int {
    get
  }
  public var file: Swift.String? {
    get
  }
  public var params: WiFiWirelessSDK.RecorderParams? {
    get
    set
  }
  public var state: WiFiWirelessSDK.Recorder.State {
    get
  }
  public var userData: Swift.UnsafeMutableRawPointer? {
    get
    set
  }
  public func close()
  public func createContent() throws -> WiFiWirelessSDK.Content
  public func open(file: Swift.String) throws
  public func pause() throws
  public func start() throws
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class RecorderParams : WiFiWirelessSDK.LinphoneObject {
  public static func getSwiftObject(cObject: Swift.OpaquePointer) -> WiFiWirelessSDK.RecorderParams
  public var getCobject: Swift.OpaquePointer? {
    get
  }
  public var audioDevice: WiFiWirelessSDK.AudioDevice? {
    get
    set
  }
  public var fileFormat: WiFiWirelessSDK.Recorder.FileFormat {
    get
    set
  }
  public var videoCodec: Swift.String? {
    get
    set
  }
  public var webcamName: Swift.String? {
    get
    set
  }
  public var windowId: Swift.UnsafeMutableRawPointer? {
    get
    set
  }
  public func clone() -> WiFiWirelessSDK.RecorderParams?
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class SearchResult : WiFiWirelessSDK.LinphoneObject {
  public static func getSwiftObject(cObject: Swift.OpaquePointer) -> WiFiWirelessSDK.SearchResult
  public var getCobject: Swift.OpaquePointer? {
    get
  }
  public var address: WiFiWirelessSDK.Address? {
    get
  }
  public var capabilities: Swift.Int {
    get
  }
  public var friend: WiFiWirelessSDK.Friend? {
    get
  }
  public var phoneNumber: Swift.String? {
    get
  }
  public var sourceFlags: Swift.Int {
    get
  }
  public var weight: Swift.UInt {
    get
  }
  public func hasCapability(capability: WiFiWirelessSDK.Friend.Capability) -> Swift.Bool
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class SignalInformation : WiFiWirelessSDK.LinphoneObject {
  public static func getSwiftObject(cObject: Swift.OpaquePointer) -> WiFiWirelessSDK.SignalInformation
  public var getCobject: Swift.OpaquePointer? {
    get
  }
  public var signalType: WiFiWirelessSDK.SignalType {
    get
    set
  }
  public var signalUnit: WiFiWirelessSDK.SignalStrengthUnit {
    get
    set
  }
  public var strength: Swift.Float {
    get
  }
  public var value: Swift.Float {
    get
    set
  }
  public func clone() -> WiFiWirelessSDK.SignalInformation?
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class Transports : WiFiWirelessSDK.LinphoneObject {
  public static func getSwiftObject(cObject: Swift.OpaquePointer) -> WiFiWirelessSDK.Transports
  public var getCobject: Swift.OpaquePointer? {
    get
  }
  public var dtlsPort: Swift.Int {
    get
    set
  }
  public var tcpPort: Swift.Int {
    get
    set
  }
  public var tlsPort: Swift.Int {
    get
    set
  }
  public var udpPort: Swift.Int {
    get
    set
  }
  public var userData: Swift.UnsafeMutableRawPointer? {
    get
    set
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class Tunnel : WiFiWirelessSDK.LinphoneObject {
  public static func getSwiftObject(cObject: Swift.OpaquePointer) -> WiFiWirelessSDK.Tunnel
  public var getCobject: Swift.OpaquePointer? {
    get
  }
  public enum Mode : Swift.Int {
    case Disable
    case Enable
    case Auto
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public var activated: Swift.Bool {
    get
  }
  public var domain: Swift.String? {
    get
    set
  }
  public var dualModeEnabled: Swift.Bool {
    get
    set
  }
  public var mode: WiFiWirelessSDK.Tunnel.Mode {
    get
    set
  }
  public var servers: [WiFiWirelessSDK.TunnelConfig] {
    get
  }
  public var sipEnabled: Swift.Bool {
    get
    set
  }
  public var username: Swift.String? {
    get
    set
  }
  public func addServer(tunnelConfig: WiFiWirelessSDK.TunnelConfig)
  public func cleanServers()
  public func connected() -> Swift.Bool
  public func reconnect()
  public func removeServer(tunnelConfig: WiFiWirelessSDK.TunnelConfig)
  public func setHttpProxy(host: Swift.String, port: Swift.Int, username: Swift.String?, passwd: Swift.String?)
  public func setHttpProxyAuthInfo(username: Swift.String?, passwd: Swift.String?)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class TunnelConfig : WiFiWirelessSDK.LinphoneObject {
  public static func getSwiftObject(cObject: Swift.OpaquePointer) -> WiFiWirelessSDK.TunnelConfig
  public var getCobject: Swift.OpaquePointer? {
    get
  }
  public var delay: Swift.Int {
    get
    set
  }
  public var host: Swift.String? {
    get
    set
  }
  public var host2: Swift.String? {
    get
    set
  }
  public var port: Swift.Int {
    get
    set
  }
  public var port2: Swift.Int {
    get
    set
  }
  public var remoteUdpMirrorPort: Swift.Int {
    get
    set
  }
  public var userData: Swift.UnsafeMutableRawPointer? {
    get
    set
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class Vcard : WiFiWirelessSDK.LinphoneObject {
  public static func getSwiftObject(cObject: Swift.OpaquePointer) -> WiFiWirelessSDK.Vcard
  public var getCobject: Swift.OpaquePointer? {
    get
  }
  public var etag: Swift.String? {
    get
    set
  }
  public var familyName: Swift.String? {
    get
    set
  }
  public var fullName: Swift.String? {
    get
    set
  }
  public var givenName: Swift.String? {
    get
    set
  }
  public var jobTitle: Swift.String? {
    get
    set
  }
  public var organization: Swift.String? {
    get
    set
  }
  public var phoneNumbers: [Swift.String] {
    get
  }
  public var phoneNumbersWithLabel: [WiFiWirelessSDK.FriendPhoneNumber] {
    get
  }
  public var photo: Swift.String? {
    get
    set
  }
  public var sipAddresses: [WiFiWirelessSDK.Address] {
    get
  }
  public var skipValidation: Swift.Bool {
    get
    set
  }
  public var uid: Swift.String? {
    get
    set
  }
  public var url: Swift.String? {
    get
    set
  }
  public func addExtendedProperty(name: Swift.String, value: Swift.String)
  public func addPhoneNumber(phone: Swift.String)
  public func addPhoneNumberWithLabel(phoneNumber: WiFiWirelessSDK.FriendPhoneNumber)
  public func addSipAddress(sipAddress: Swift.String)
  public func asVcard4String() -> Swift.String
  public func clone() -> WiFiWirelessSDK.Vcard?
  public func editMainSipAddress(sipAddress: Swift.String)
  public func generateUniqueId() -> Swift.Bool
  public func getExtendedPropertiesValuesByName(name: Swift.String) -> [Swift.String]
  public func removeExtentedPropertiesByName(name: Swift.String)
  public func removeJobTitle()
  public func removeOrganization()
  public func removePhoneNumber(phone: Swift.String)
  public func removePhoneNumberWithLabel(phoneNumber: WiFiWirelessSDK.FriendPhoneNumber)
  public func removePhoto()
  public func removeSipAddress(sipAddress: Swift.String)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class VideoActivationPolicy : WiFiWirelessSDK.LinphoneObject {
  public static func getSwiftObject(cObject: Swift.OpaquePointer) -> WiFiWirelessSDK.VideoActivationPolicy
  public var getCobject: Swift.OpaquePointer? {
    get
  }
  public var automaticallyAccept: Swift.Bool {
    get
    set
  }
  public var automaticallyInitiate: Swift.Bool {
    get
    set
  }
  public var userData: Swift.UnsafeMutableRawPointer? {
    get
    set
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class VideoDefinition : WiFiWirelessSDK.LinphoneObject {
  public static func getSwiftObject(cObject: Swift.OpaquePointer) -> WiFiWirelessSDK.VideoDefinition
  public var getCobject: Swift.OpaquePointer? {
    get
  }
  public var height: Swift.UInt {
    get
    set
  }
  public var isUndefined: Swift.Bool {
    get
  }
  public var name: Swift.String? {
    get
    set
  }
  public var userData: Swift.UnsafeMutableRawPointer? {
    get
    set
  }
  public var width: Swift.UInt {
    get
    set
  }
  public func clone() -> WiFiWirelessSDK.VideoDefinition?
  public func equals(videoDefinition2: WiFiWirelessSDK.VideoDefinition) -> Swift.Bool
  public func setDefinition(width: Swift.UInt, height: Swift.UInt)
  public func strictEquals(videoDefinition2: WiFiWirelessSDK.VideoDefinition) -> Swift.Bool
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class VideoSourceDescriptor : WiFiWirelessSDK.LinphoneObject {
  public static func getSwiftObject(cObject: Swift.OpaquePointer) -> WiFiWirelessSDK.VideoSourceDescriptor
  public var getCobject: Swift.OpaquePointer? {
    get
  }
  public var call: WiFiWirelessSDK.Call? {
    get
    set
  }
  public var cameraId: Swift.String? {
    get
    set
  }
  public var image: Swift.String? {
    get
    set
  }
  public var type: WiFiWirelessSDK.VideoSourceType {
    get
  }
  public func clone() -> WiFiWirelessSDK.VideoSourceDescriptor?
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class XmlRpcRequest : WiFiWirelessSDK.LinphoneObject {
  public static func getSwiftObject(cObject: Swift.OpaquePointer) -> WiFiWirelessSDK.XmlRpcRequest
  public var getCobject: Swift.OpaquePointer? {
    get
  }
  public func addDelegate(delegate: any WiFiWirelessSDK.XmlRpcRequestDelegate)
  public func removeDelegate(delegate: any WiFiWirelessSDK.XmlRpcRequestDelegate)
  public var content: Swift.String? {
    get
  }
  public var currentDelegate: (any WiFiWirelessSDK.XmlRpcRequestDelegate)? {
    get
  }
  public var intResponse: Swift.Int {
    get
  }
  public var listResponse: [Swift.String] {
    get
  }
  public var rawResponse: Swift.String? {
    get
  }
  public var status: WiFiWirelessSDK.XmlRpcStatus {
    get
  }
  public var stringResponse: Swift.String? {
    get
  }
  public var userData: Swift.UnsafeMutableRawPointer? {
    get
    set
  }
  public func addIntArg(value: Swift.Int)
  public func addStringArg(value: Swift.String)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class XmlRpcSession : WiFiWirelessSDK.LinphoneObject {
  public static func getSwiftObject(cObject: Swift.OpaquePointer) -> WiFiWirelessSDK.XmlRpcSession
  public var getCobject: Swift.OpaquePointer? {
    get
  }
  public var userData: Swift.UnsafeMutableRawPointer? {
    get
    set
  }
  public func createRequest(returnType: WiFiWirelessSDK.XmlRpcArgType, method: Swift.String) throws -> WiFiWirelessSDK.XmlRpcRequest
  public func release()
  public func sendRequest(request: WiFiWirelessSDK.XmlRpcRequest)
  @objc deinit
}
extension WiFiWirelessSDK.AVPFMode : Swift.Equatable {}
extension WiFiWirelessSDK.AVPFMode : Swift.Hashable {}
extension WiFiWirelessSDK.AVPFMode : Swift.RawRepresentable {}
extension WiFiWirelessSDK.AuthMethod : Swift.Equatable {}
extension WiFiWirelessSDK.AuthMethod : Swift.Hashable {}
extension WiFiWirelessSDK.AuthMethod : Swift.RawRepresentable {}
extension WiFiWirelessSDK.CodecPriorityPolicy : Swift.Equatable {}
extension WiFiWirelessSDK.CodecPriorityPolicy : Swift.Hashable {}
extension WiFiWirelessSDK.CodecPriorityPolicy : Swift.RawRepresentable {}
extension WiFiWirelessSDK.ConsolidatedPresence : Swift.Equatable {}
extension WiFiWirelessSDK.ConsolidatedPresence : Swift.Hashable {}
extension WiFiWirelessSDK.ConsolidatedPresence : Swift.RawRepresentable {}
extension WiFiWirelessSDK.EcCalibratorStatus : Swift.Equatable {}
extension WiFiWirelessSDK.EcCalibratorStatus : Swift.Hashable {}
extension WiFiWirelessSDK.EcCalibratorStatus : Swift.RawRepresentable {}
extension WiFiWirelessSDK.GlobalState : Swift.Equatable {}
extension WiFiWirelessSDK.GlobalState : Swift.Hashable {}
extension WiFiWirelessSDK.GlobalState : Swift.RawRepresentable {}
extension WiFiWirelessSDK.IceState : Swift.Equatable {}
extension WiFiWirelessSDK.IceState : Swift.Hashable {}
extension WiFiWirelessSDK.IceState : Swift.RawRepresentable {}
extension WiFiWirelessSDK.LimeState : Swift.Equatable {}
extension WiFiWirelessSDK.LimeState : Swift.Hashable {}
extension WiFiWirelessSDK.LimeState : Swift.RawRepresentable {}
extension WiFiWirelessSDK.LogCollectionState : Swift.Equatable {}
extension WiFiWirelessSDK.LogCollectionState : Swift.Hashable {}
extension WiFiWirelessSDK.LogCollectionState : Swift.RawRepresentable {}
extension WiFiWirelessSDK.MediaDirection : Swift.Equatable {}
extension WiFiWirelessSDK.MediaDirection : Swift.Hashable {}
extension WiFiWirelessSDK.MediaDirection : Swift.RawRepresentable {}
extension WiFiWirelessSDK.MediaEncryption : Swift.Equatable {}
extension WiFiWirelessSDK.MediaEncryption : Swift.Hashable {}
extension WiFiWirelessSDK.MediaEncryption : Swift.RawRepresentable {}
extension WiFiWirelessSDK.MediaResourceMode : Swift.Equatable {}
extension WiFiWirelessSDK.MediaResourceMode : Swift.Hashable {}
extension WiFiWirelessSDK.MediaResourceMode : Swift.RawRepresentable {}
extension WiFiWirelessSDK.PresenceBasicStatus : Swift.Equatable {}
extension WiFiWirelessSDK.PresenceBasicStatus : Swift.Hashable {}
extension WiFiWirelessSDK.PresenceBasicStatus : Swift.RawRepresentable {}
extension WiFiWirelessSDK.Privacy : Swift.Equatable {}
extension WiFiWirelessSDK.Privacy : Swift.Hashable {}
extension WiFiWirelessSDK.Privacy : Swift.RawRepresentable {}
extension WiFiWirelessSDK.PublishState : Swift.Equatable {}
extension WiFiWirelessSDK.PublishState : Swift.Hashable {}
extension WiFiWirelessSDK.PublishState : Swift.RawRepresentable {}
extension WiFiWirelessSDK.Reason : Swift.Equatable {}
extension WiFiWirelessSDK.Reason : Swift.Hashable {}
extension WiFiWirelessSDK.Reason : Swift.RawRepresentable {}
extension WiFiWirelessSDK.RegistrationState : Swift.Equatable {}
extension WiFiWirelessSDK.RegistrationState : Swift.Hashable {}
extension WiFiWirelessSDK.RegistrationState : Swift.RawRepresentable {}
extension WiFiWirelessSDK.SessionExpiresRefresher : Swift.Equatable {}
extension WiFiWirelessSDK.SessionExpiresRefresher : Swift.Hashable {}
extension WiFiWirelessSDK.SessionExpiresRefresher : Swift.RawRepresentable {}
extension WiFiWirelessSDK.SignalStrengthUnit : Swift.Equatable {}
extension WiFiWirelessSDK.SignalStrengthUnit : Swift.Hashable {}
extension WiFiWirelessSDK.SignalStrengthUnit : Swift.RawRepresentable {}
extension WiFiWirelessSDK.SignalType : Swift.Equatable {}
extension WiFiWirelessSDK.SignalType : Swift.Hashable {}
extension WiFiWirelessSDK.SignalType : Swift.RawRepresentable {}
extension WiFiWirelessSDK.SrtpSuite : Swift.Equatable {}
extension WiFiWirelessSDK.SrtpSuite : Swift.Hashable {}
extension WiFiWirelessSDK.SrtpSuite : Swift.RawRepresentable {}
extension WiFiWirelessSDK.StreamType : Swift.Equatable {}
extension WiFiWirelessSDK.StreamType : Swift.Hashable {}
extension WiFiWirelessSDK.StreamType : Swift.RawRepresentable {}
extension WiFiWirelessSDK.SubscribePolicy : Swift.Equatable {}
extension WiFiWirelessSDK.SubscribePolicy : Swift.Hashable {}
extension WiFiWirelessSDK.SubscribePolicy : Swift.RawRepresentable {}
extension WiFiWirelessSDK.SubscriptionDir : Swift.Equatable {}
extension WiFiWirelessSDK.SubscriptionDir : Swift.Hashable {}
extension WiFiWirelessSDK.SubscriptionDir : Swift.RawRepresentable {}
extension WiFiWirelessSDK.SubscriptionState : Swift.Equatable {}
extension WiFiWirelessSDK.SubscriptionState : Swift.Hashable {}
extension WiFiWirelessSDK.SubscriptionState : Swift.RawRepresentable {}
extension WiFiWirelessSDK.SupportLevel : Swift.Equatable {}
extension WiFiWirelessSDK.SupportLevel : Swift.Hashable {}
extension WiFiWirelessSDK.SupportLevel : Swift.RawRepresentable {}
extension WiFiWirelessSDK.ToneID : Swift.Equatable {}
extension WiFiWirelessSDK.ToneID : Swift.Hashable {}
extension WiFiWirelessSDK.ToneID : Swift.RawRepresentable {}
extension WiFiWirelessSDK.TransportType : Swift.Equatable {}
extension WiFiWirelessSDK.TransportType : Swift.Hashable {}
extension WiFiWirelessSDK.TransportType : Swift.RawRepresentable {}
extension WiFiWirelessSDK.UpnpState : Swift.Equatable {}
extension WiFiWirelessSDK.UpnpState : Swift.Hashable {}
extension WiFiWirelessSDK.UpnpState : Swift.RawRepresentable {}
extension WiFiWirelessSDK.VersionUpdateCheckResult : Swift.Equatable {}
extension WiFiWirelessSDK.VersionUpdateCheckResult : Swift.Hashable {}
extension WiFiWirelessSDK.VersionUpdateCheckResult : Swift.RawRepresentable {}
extension WiFiWirelessSDK.VideoSourceType : Swift.Equatable {}
extension WiFiWirelessSDK.VideoSourceType : Swift.Hashable {}
extension WiFiWirelessSDK.VideoSourceType : Swift.RawRepresentable {}
extension WiFiWirelessSDK.XmlRpcArgType : Swift.Equatable {}
extension WiFiWirelessSDK.XmlRpcArgType : Swift.Hashable {}
extension WiFiWirelessSDK.XmlRpcArgType : Swift.RawRepresentable {}
extension WiFiWirelessSDK.XmlRpcStatus : Swift.Equatable {}
extension WiFiWirelessSDK.XmlRpcStatus : Swift.Hashable {}
extension WiFiWirelessSDK.XmlRpcStatus : Swift.RawRepresentable {}
extension WiFiWirelessSDK.ZrtpKeyAgreement : Swift.Equatable {}
extension WiFiWirelessSDK.ZrtpKeyAgreement : Swift.Hashable {}
extension WiFiWirelessSDK.ZrtpKeyAgreement : Swift.RawRepresentable {}
extension WiFiWirelessSDK.ZrtpPeerStatus : Swift.Equatable {}
extension WiFiWirelessSDK.ZrtpPeerStatus : Swift.Hashable {}
extension WiFiWirelessSDK.ZrtpPeerStatus : Swift.RawRepresentable {}
extension WiFiWirelessSDK.AccountCreator.Status : Swift.Equatable {}
extension WiFiWirelessSDK.AccountCreator.Status : Swift.Hashable {}
extension WiFiWirelessSDK.AccountCreator.Status : Swift.RawRepresentable {}
extension WiFiWirelessSDK.AccountCreator.TransportStatus : Swift.Equatable {}
extension WiFiWirelessSDK.AccountCreator.TransportStatus : Swift.Hashable {}
extension WiFiWirelessSDK.AccountCreator.TransportStatus : Swift.RawRepresentable {}
extension WiFiWirelessSDK.AccountCreator.DomainStatus : Swift.Equatable {}
extension WiFiWirelessSDK.AccountCreator.DomainStatus : Swift.Hashable {}
extension WiFiWirelessSDK.AccountCreator.DomainStatus : Swift.RawRepresentable {}
extension WiFiWirelessSDK.AccountCreator.ActivationCodeStatus : Swift.Equatable {}
extension WiFiWirelessSDK.AccountCreator.ActivationCodeStatus : Swift.Hashable {}
extension WiFiWirelessSDK.AccountCreator.ActivationCodeStatus : Swift.RawRepresentable {}
extension WiFiWirelessSDK.AccountCreator.AlgoStatus : Swift.Equatable {}
extension WiFiWirelessSDK.AccountCreator.AlgoStatus : Swift.Hashable {}
extension WiFiWirelessSDK.AccountCreator.AlgoStatus : Swift.RawRepresentable {}
extension WiFiWirelessSDK.AccountCreator.LanguageStatus : Swift.Equatable {}
extension WiFiWirelessSDK.AccountCreator.LanguageStatus : Swift.Hashable {}
extension WiFiWirelessSDK.AccountCreator.LanguageStatus : Swift.RawRepresentable {}
extension WiFiWirelessSDK.AccountCreator.PasswordStatus : Swift.Equatable {}
extension WiFiWirelessSDK.AccountCreator.PasswordStatus : Swift.Hashable {}
extension WiFiWirelessSDK.AccountCreator.PasswordStatus : Swift.RawRepresentable {}
extension WiFiWirelessSDK.AccountCreator.EmailStatus : Swift.Equatable {}
extension WiFiWirelessSDK.AccountCreator.EmailStatus : Swift.Hashable {}
extension WiFiWirelessSDK.AccountCreator.EmailStatus : Swift.RawRepresentable {}
extension WiFiWirelessSDK.AccountCreator.UsernameStatus : Swift.Equatable {}
extension WiFiWirelessSDK.AccountCreator.UsernameStatus : Swift.Hashable {}
extension WiFiWirelessSDK.AccountCreator.UsernameStatus : Swift.RawRepresentable {}
extension WiFiWirelessSDK.AccountCreator.Backend : Swift.Equatable {}
extension WiFiWirelessSDK.AccountCreator.Backend : Swift.Hashable {}
extension WiFiWirelessSDK.AccountCreator.Backend : Swift.RawRepresentable {}
extension WiFiWirelessSDK.AccountCreator.PhoneNumberStatus : Swift.Equatable {}
extension WiFiWirelessSDK.AccountCreator.PhoneNumberStatus : Swift.Hashable {}
extension WiFiWirelessSDK.AccountCreator.PhoneNumberStatus : Swift.RawRepresentable {}
extension WiFiWirelessSDK.Address.Family : Swift.Equatable {}
extension WiFiWirelessSDK.Address.Family : Swift.Hashable {}
extension WiFiWirelessSDK.Address.Family : Swift.RawRepresentable {}
extension WiFiWirelessSDK.Alert.Kind : Swift.Equatable {}
extension WiFiWirelessSDK.Alert.Kind : Swift.Hashable {}
extension WiFiWirelessSDK.Alert.Kind : Swift.RawRepresentable {}
extension WiFiWirelessSDK.AudioDevice.Kind : Swift.Equatable {}
extension WiFiWirelessSDK.AudioDevice.Kind : Swift.Hashable {}
extension WiFiWirelessSDK.AudioDevice.Kind : Swift.RawRepresentable {}
extension WiFiWirelessSDK.Call.Status : Swift.Equatable {}
extension WiFiWirelessSDK.Call.Status : Swift.Hashable {}
extension WiFiWirelessSDK.Call.Status : Swift.RawRepresentable {}
extension WiFiWirelessSDK.Call.Dir : Swift.Equatable {}
extension WiFiWirelessSDK.Call.Dir : Swift.Hashable {}
extension WiFiWirelessSDK.Call.Dir : Swift.RawRepresentable {}
extension WiFiWirelessSDK.Call.State : Swift.Equatable {}
extension WiFiWirelessSDK.Call.State : Swift.Hashable {}
extension WiFiWirelessSDK.Call.State : Swift.RawRepresentable {}
extension WiFiWirelessSDK.ChatMessage.Direction : Swift.Equatable {}
extension WiFiWirelessSDK.ChatMessage.Direction : Swift.Hashable {}
extension WiFiWirelessSDK.ChatMessage.Direction : Swift.RawRepresentable {}
extension WiFiWirelessSDK.ChatMessage.State : Swift.Equatable {}
extension WiFiWirelessSDK.ChatMessage.State : Swift.Hashable {}
extension WiFiWirelessSDK.ChatMessage.State : Swift.RawRepresentable {}
extension WiFiWirelessSDK.ChatRoom.SecurityLevel : Swift.Equatable {}
extension WiFiWirelessSDK.ChatRoom.SecurityLevel : Swift.Hashable {}
extension WiFiWirelessSDK.ChatRoom.SecurityLevel : Swift.RawRepresentable {}
extension WiFiWirelessSDK.ChatRoom.EphemeralMode : Swift.Equatable {}
extension WiFiWirelessSDK.ChatRoom.EphemeralMode : Swift.Hashable {}
extension WiFiWirelessSDK.ChatRoom.EphemeralMode : Swift.RawRepresentable {}
extension WiFiWirelessSDK.ChatRoom.State : Swift.Equatable {}
extension WiFiWirelessSDK.ChatRoom.State : Swift.Hashable {}
extension WiFiWirelessSDK.ChatRoom.State : Swift.RawRepresentable {}
extension WiFiWirelessSDK.Conference.SecurityLevel : Swift.Equatable {}
extension WiFiWirelessSDK.Conference.SecurityLevel : Swift.Hashable {}
extension WiFiWirelessSDK.Conference.SecurityLevel : Swift.RawRepresentable {}
extension WiFiWirelessSDK.Conference.ParticipantListType : Swift.Equatable {}
extension WiFiWirelessSDK.Conference.ParticipantListType : Swift.Hashable {}
extension WiFiWirelessSDK.Conference.ParticipantListType : Swift.RawRepresentable {}
extension WiFiWirelessSDK.Conference.JoiningMode : Swift.Equatable {}
extension WiFiWirelessSDK.Conference.JoiningMode : Swift.Hashable {}
extension WiFiWirelessSDK.Conference.JoiningMode : Swift.RawRepresentable {}
extension WiFiWirelessSDK.Conference.Layout : Swift.Equatable {}
extension WiFiWirelessSDK.Conference.Layout : Swift.Hashable {}
extension WiFiWirelessSDK.Conference.Layout : Swift.RawRepresentable {}
extension WiFiWirelessSDK.Conference.State : Swift.Equatable {}
extension WiFiWirelessSDK.Conference.State : Swift.Hashable {}
extension WiFiWirelessSDK.Conference.State : Swift.RawRepresentable {}
extension WiFiWirelessSDK.ConferenceInfo.State : Swift.Equatable {}
extension WiFiWirelessSDK.ConferenceInfo.State : Swift.Hashable {}
extension WiFiWirelessSDK.ConferenceInfo.State : Swift.RawRepresentable {}
extension WiFiWirelessSDK.ConferenceScheduler.State : Swift.Equatable {}
extension WiFiWirelessSDK.ConferenceScheduler.State : Swift.Hashable {}
extension WiFiWirelessSDK.ConferenceScheduler.State : Swift.RawRepresentable {}
extension WiFiWirelessSDK.Config.ConfiguringState : Swift.Equatable {}
extension WiFiWirelessSDK.Config.ConfiguringState : Swift.Hashable {}
extension WiFiWirelessSDK.Config.ConfiguringState : Swift.RawRepresentable {}
extension WiFiWirelessSDK.Core.LogCollectionUploadState : Swift.Equatable {}
extension WiFiWirelessSDK.Core.LogCollectionUploadState : Swift.Hashable {}
extension WiFiWirelessSDK.Core.LogCollectionUploadState : Swift.RawRepresentable {}
extension WiFiWirelessSDK.EventLog.SecurityEventType : Swift.Equatable {}
extension WiFiWirelessSDK.EventLog.SecurityEventType : Swift.Hashable {}
extension WiFiWirelessSDK.EventLog.SecurityEventType : Swift.RawRepresentable {}
extension WiFiWirelessSDK.EventLog.Kind : Swift.Equatable {}
extension WiFiWirelessSDK.EventLog.Kind : Swift.Hashable {}
extension WiFiWirelessSDK.EventLog.Kind : Swift.RawRepresentable {}
extension WiFiWirelessSDK.FriendList.SyncStatus : Swift.Equatable {}
extension WiFiWirelessSDK.FriendList.SyncStatus : Swift.Hashable {}
extension WiFiWirelessSDK.FriendList.SyncStatus : Swift.RawRepresentable {}
extension WiFiWirelessSDK.FriendList.Status : Swift.Equatable {}
extension WiFiWirelessSDK.FriendList.Status : Swift.Hashable {}
extension WiFiWirelessSDK.FriendList.Status : Swift.RawRepresentable {}
extension WiFiWirelessSDK.FriendList.Kind : Swift.Equatable {}
extension WiFiWirelessSDK.FriendList.Kind : Swift.Hashable {}
extension WiFiWirelessSDK.FriendList.Kind : Swift.RawRepresentable {}
extension WiFiWirelessSDK.Ldap.DebugLevel : Swift.Equatable {}
extension WiFiWirelessSDK.Ldap.DebugLevel : Swift.Hashable {}
extension WiFiWirelessSDK.Ldap.DebugLevel : Swift.RawRepresentable {}
extension WiFiWirelessSDK.Ldap.AuthMethod : Swift.Equatable {}
extension WiFiWirelessSDK.Ldap.AuthMethod : Swift.Hashable {}
extension WiFiWirelessSDK.Ldap.AuthMethod : Swift.RawRepresentable {}
extension WiFiWirelessSDK.Ldap.CertVerificationMode : Swift.Equatable {}
extension WiFiWirelessSDK.Ldap.CertVerificationMode : Swift.Hashable {}
extension WiFiWirelessSDK.Ldap.CertVerificationMode : Swift.RawRepresentable {}
extension WiFiWirelessSDK.Ldap.Check : Swift.Equatable {}
extension WiFiWirelessSDK.Ldap.Check : Swift.Hashable {}
extension WiFiWirelessSDK.Ldap.Check : Swift.RawRepresentable {}
extension WiFiWirelessSDK.MagicSearch.Aggregation : Swift.Equatable {}
extension WiFiWirelessSDK.MagicSearch.Aggregation : Swift.Hashable {}
extension WiFiWirelessSDK.MagicSearch.Aggregation : Swift.RawRepresentable {}
extension WiFiWirelessSDK.Participant.Role : Swift.Equatable {}
extension WiFiWirelessSDK.Participant.Role : Swift.Hashable {}
extension WiFiWirelessSDK.Participant.Role : Swift.RawRepresentable {}
extension WiFiWirelessSDK.ParticipantDevice.JoiningMethod : Swift.Equatable {}
extension WiFiWirelessSDK.ParticipantDevice.JoiningMethod : Swift.Hashable {}
extension WiFiWirelessSDK.ParticipantDevice.JoiningMethod : Swift.RawRepresentable {}
extension WiFiWirelessSDK.ParticipantDevice.DisconnectionMethod : Swift.Equatable {}
extension WiFiWirelessSDK.ParticipantDevice.DisconnectionMethod : Swift.Hashable {}
extension WiFiWirelessSDK.ParticipantDevice.DisconnectionMethod : Swift.RawRepresentable {}
extension WiFiWirelessSDK.ParticipantDevice.State : Swift.Equatable {}
extension WiFiWirelessSDK.ParticipantDevice.State : Swift.Hashable {}
extension WiFiWirelessSDK.ParticipantDevice.State : Swift.RawRepresentable {}
extension WiFiWirelessSDK.Player.State : Swift.Equatable {}
extension WiFiWirelessSDK.Player.State : Swift.Hashable {}
extension WiFiWirelessSDK.Player.State : Swift.RawRepresentable {}
extension WiFiWirelessSDK.PresenceActivity.Kind : Swift.Equatable {}
extension WiFiWirelessSDK.PresenceActivity.Kind : Swift.Hashable {}
extension WiFiWirelessSDK.PresenceActivity.Kind : Swift.RawRepresentable {}
extension WiFiWirelessSDK.Recorder.FileFormat : Swift.Equatable {}
extension WiFiWirelessSDK.Recorder.FileFormat : Swift.Hashable {}
extension WiFiWirelessSDK.Recorder.FileFormat : Swift.RawRepresentable {}
extension WiFiWirelessSDK.Recorder.State : Swift.Equatable {}
extension WiFiWirelessSDK.Recorder.State : Swift.Hashable {}
extension WiFiWirelessSDK.Recorder.State : Swift.RawRepresentable {}
extension WiFiWirelessSDK.Tunnel.Mode : Swift.Equatable {}
extension WiFiWirelessSDK.Tunnel.Mode : Swift.Hashable {}
extension WiFiWirelessSDK.Tunnel.Mode : Swift.RawRepresentable {}
